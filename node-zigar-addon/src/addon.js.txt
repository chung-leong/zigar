"((function (exports) {\n"
"  'use strict';\n"
"\n"
"  const MemberType = {\n"
"    Void: 0,\n"
"    Bool: 1,\n"
"    Int: 2,\n"
"    Uint: 3,\n"
"    Float: 4,\n"
"    Object: 5,\n"
"    Type: 6,\n"
"    Comptime: 7,\n"
"    Static: 8,\n"
"    Literal: 9,\n"
"    Null: 10,\n"
"    Undefined: 11,\n"
"    Unsupported: 12,\n"
"  };\n"
"\n"
"  const StructureType = {\n"
"    Primitive: 0,\n"
"    Array: 1,\n"
"    Struct: 2,\n"
"    ExternStruct: 3,\n"
"    PackedStruct: 4,\n"
"    ArgStruct: 5,\n"
"    VariadicStruct: 6,\n"
"    ExternUnion: 7,\n"
"    BareUnion: 8,\n"
"    TaggedUnion: 9,\n"
"    ErrorUnion: 10,\n"
"    ErrorSet: 11,\n"
"    Enum: 12,\n"
"    Optional: 13,\n"
"    SinglePointer: 14,\n"
"    SlicePointer: 15,\n"
"    MultiPointer: 16,\n"
"    CPointer: 17,\n"
"    Slice: 18,\n"
"    Vector: 19,\n"
"    Opaque: 20,\n"
"    Function: 21,\n"
"  };\n"
"\n"
"  function getTypeName(member) {\n"
"    const { type, bitSize, byteSize } = member;\n"
"    if (type === MemberType.Int) {\n"
"      return `${bitSize <= 32 ? '' : 'Big' }Int${bitSize}`;\n"
"    } else if (type === MemberType.Uint) {\n"
"      return `${bitSize <= 32 ? '' : 'Big' }Uint${bitSize}`;\n"
"    } else if (type === MemberType.Float) {\n"
"      return `Float${bitSize}`;\n"
"    } else if (type === MemberType.Bool) {\n"
"      const boolSize = (byteSize !== undefined) ? byteSize * 8 : 1;\n"
"      return `Bool${boolSize}`;\n"
"    } else if (type === MemberType.Void) {\n"
"      return `Null`;\n"
"    }\n"
"  }\n"
"\n"
"  function getStructureName(n) {\n"
"    for (const [ name, value ] of Object.entries(StructureType)) {\n"
"      if (value === n) {\n"
"        return name.replace(/\\B[A-Z]/g, m => ` ${m}`).toLowerCase();\n"
"      }\n"
"    }\n"
"  }\n"
"\n"
"  function getIntRange(member) {\n"
"    const { type, bitSize } = member;\n"
"    const signed = (type === MemberType.Int);\n"
"    let magBits = (signed) ? bitSize - 1 : bitSize;\n"
"    if (bitSize <= 32) {\n"
"      const max = 2 ** magBits - 1;\n"
"      const min = (signed) ? -(2 ** magBits) : 0;\n"
"      return { min, max };\n"
"    } else {\n"
"      magBits = BigInt(magBits);\n"
"      const max = 2n ** magBits - 1n;\n"
"      const min = (signed) ? -(2n ** magBits) : 0n;\n"
"      return { min, max };\n"
"    }\n"
"  }\n"
"\n"
"  function getPrimitiveClass({ type, bitSize }) {\n"
"    if (type === MemberType.Int || type === MemberType.Uint) {\n"
"      if (bitSize <= 32) {\n"
"        return Number;\n"
"      } else {\n"
"        return BigInt;\n"
"      }\n"
"    } else if (type === MemberType.Float) {\n"
"      return Number;\n"
"    } else if (type === MemberType.Bool) {\n"
"      return Boolean;\n"
"    }\n"
"  }\n"
"\n"
"  function getPrimitiveType(member) {\n"
"    const Primitive = getPrimitiveClass(member);\n"
"    if (Primitive) {\n"
"      return typeof(Primitive(0));\n"
"    }\n"
"  }\n"
"\n"
"  function isPointer(type) {\n"
"    switch (type) {\n"
"      case StructureType.SinglePointer:\n"
"      case StructureType.SlicePointer:\n"
"      case StructureType.MultiPointer:\n"
"      case StructureType.CPointer:\n"
"        return true;\n"
"      default:\n"
"        return false;\n"
"    }\n"
"  }\n"
"\n"
"  function isArrayLike(type) {\n"
"    return type === StructureType.Array || type === StructureType.Vector || type === StructureType.Slice;\n"
"  }\n"
"\n"
"  function isByteAligned({ bitOffset, bitSize, byteSize }) {\n"
"    return byteSize !== undefined || (!(bitOffset & 0x07) && !(bitSize & 0x07)) || bitSize === 0;\n"
"  }\n"
"\n"
"  function isErrorJSON(arg) {\n"
"    return typeof(arg) === 'object' && typeof(arg.error) === 'string' && Object.keys(arg).length === 1  ;\n"
"  }\n"
"\n"
"  class Unsupported extends TypeError {\n"
"    constructor() {\n"
"      super(`Unsupported`);\n"
"    }\n"
"  }\n"
"\n"
"  class NoInitializer extends TypeError {\n"
"    constructor(structure) {\n"
"      const { name } = structure;\n"
"      super(`An initializer must be provided to the constructor of ${name}, even when the intended value is undefined`);\n"
"    }\n"
"  }\n"
"\n"
"  class BufferSizeMismatch extends TypeError {\n"
"    constructor(structure, dv, target = null) {\n"
"      const { name, type, byteSize } = structure;\n"
"      const actual = dv.byteLength;\n"
"      const s = (byteSize !== 1) ? 's' : '';\n"
"      let msg;\n"
"      if (type === StructureType.Slice && !target) {\n"
"        msg = `${name} has elements that are ${byteSize} byte${s} in length, received ${actual}`;\n"
"      } else {\n"
"        const total = (type === StructureType.Slice) ? target.length * byteSize : byteSize;\n"
"        msg = `${name} has ${total} byte${s}, received ${actual}`;\n"
"      }\n"
"      super(msg);\n"
"    }\n"
"  }\n"
"\n"
"  class BufferExpected extends TypeError {\n"
"    constructor(structure) {\n"
"      const { type, byteSize, typedArray } = structure;\n"
"      const s = (byteSize !== 1) ? 's' : '';\n"
"      const acceptable = [ 'ArrayBuffer', 'DataView' ].map(addArticle);\n"
"      if (typedArray) {\n"
"        acceptable.push(addArticle(typedArray.name));\n"
"      }\n"
"      let msg;\n"
"      if (type === StructureType.Slice) {\n"
"        msg = `Expecting ${formatList(acceptable)} that can accommodate items ${byteSize} byte${s} in length`;\n"
"      } else {\n"
"        msg = `Expecting ${formatList(acceptable)} that is ${byteSize} byte${s} in length`;\n"
"      }\n"
"      super(msg);\n"
"    }\n"
"  }\n"
"\n"
"  class EnumExpected extends TypeError {\n"
"    constructor(structure, arg) {\n"
"      const { name } = structure;\n"
"      let msg;\n"
"      if (typeof(arg) === 'number' || typeof(arg) === 'bigint') {\n"
"        msg = `Value given does not correspond to an item of enum ${name}: ${arg}`;\n"
"      } else {\n"
"        msg = `Enum item of the type ${name} expected, received ${arg}`;\n"
"      }\n"
"      super(msg);\n"
"    }\n"
"  }\n"
"\n"
"  class ErrorExpected extends TypeError {\n"
"    constructor(structure, arg) {\n"
"      const { name } = structure;\n"
"      const type = typeof(arg);\n"
"      let msg;\n"
"      if (type === 'string' || type === 'number' || isErrorJSON(arg)) {\n"
"        if (isErrorJSON(arg)) {\n"
"          arg = `{ error: ${JSON.stringify(arg.error)} }`;\n"
"        }\n"
"        msg = `Error ${type} does not corresponds to any error in error set ${name}: ${arg}`;\n"
"      } else {\n"
"        msg = `Error of the type ${name} expected, received ${arg}`;\n"
"      }\n"
"      super(msg);\n"
"    }\n"
"  }\n"
"\n"
"  class NotInErrorSet extends TypeError {\n"
"    constructor(structure) {\n"
"      const { name } = structure;\n"
"      super(`Error given is not a part of error set ${name}`);\n"
"    }\n"
"  }\n"
"\n"
"  class MultipleUnionInitializers extends TypeError {\n"
"    constructor(structure) {\n"
"      const { name } = structure;\n"
"      super(`Only one property of ${name} can be given a value`);\n"
"    }\n"
"  }\n"
"\n"
"  class InactiveUnionProperty extends TypeError {\n"
"    constructor(structure, name, currentName) {\n"
"      super(`Accessing property ${name} when ${currentName} is active`);\n"
"    }\n"
"  }\n"
"\n"
"  class MissingUnionInitializer extends TypeError {\n"
"    constructor(structure, arg, exclusion) {\n"
"      const { name, instance: { members } } = structure;\n"
"      const missing = members.slice(0, exclusion ? -1 : undefined).map(m => m.name);\n"
"      super(`${name} needs an initializer for one of its union properties: ${missing.join(', ')}`);\n"
"    }\n"
"  }\n"
"\n"
"  class InvalidInitializer extends TypeError {\n"
"    constructor(structure, expected, arg) {\n"
"      const { name } = structure;\n"
"      const acceptable = [];\n"
"      if (Array.isArray(expected)) {\n"
"        for (const type of expected) {\n"
"          acceptable.push(addArticle(type));\n"
"        }\n"
"      } else {\n"
"        acceptable.push(addArticle(expected));\n"
"      }\n"
"      const received = getDescription(arg);\n"
"      super(`${name} expects ${formatList(acceptable)} as argument, received ${received}`);\n"
"    }\n"
"  }\n"
"\n"
"  class InvalidArrayInitializer extends InvalidInitializer {\n"
"    constructor(structure, arg, shapeless = false) {\n"
"      const { instance: { members: [ member ] }, type, typedArray } = structure;\n"
"      const acceptable = [];\n"
"      const primitive = getPrimitiveType(member);\n"
"      if (primitive) {\n"
"        let object;\n"
"        switch (member.structure?.type) {\n"
"          case StructureType.Enum: object = 'enum item'; break;\n"
"          case StructureType.ErrorSet: object = 'error'; break;\n"
"          default: object = primitive;\n"
"        }\n"
"        acceptable.push(`array of ${object}s`);\n"
"      } else {\n"
"        acceptable.push(`array of objects`);\n"
"      }\n"
"      if (typedArray) {\n"
"        acceptable.push(typedArray.name);\n"
"      }\n"
"      if (type === StructureType.Slice && shapeless) {\n"
"        acceptable.push(`length`);\n"
"      }\n"
"      super(structure, acceptable.join(' or '), arg);\n"
"    }\n"
"  }\n"
"\n"
"  class ArrayLengthMismatch extends TypeError {\n"
"    constructor(structure, target, arg) {\n"
"      const { name, length, instance: { members: [ member ] } } = structure;\n"
"      const { structure: { constructor: elementConstructor} } = member;\n"
"      const { length: argLength, constructor: argConstructor } = arg;\n"
"      // get length from object whech it's a slice\n"
"      const actualLength = target?.length ?? length;\n"
"      const s = (actualLength !== 1) ? 's' : '';\n"
"      let received;\n"
"      if (argConstructor === elementConstructor) {\n"
"        received = `only a single one`;\n"
"      } else if (argConstructor.child === elementConstructor) {\n"
"        received = `a slice/array that has ${argLength}`;\n"
"      } else {\n"
"        received = `${argLength} initializer${argLength > 1 ? 's' : ''}`;\n"
"      }\n"
"      super(`${name} has ${actualLength} element${s}, received ${received}`);\n"
"    }\n"
"  }\n"
"\n"
"  class InvalidSliceLength extends TypeError {\n"
"    constructor(length, max) {\n"
"      if (length < 0) {\n"
"        super(`Length of slice cannot be negative`);\n"
"      } else {\n"
"        super(`Length of slice must be less than ${max}, received ${length}`);\n"
"      }\n"
"    }\n"
"  }\n"
"\n"
"  class MissingInitializers extends TypeError {\n"
"    constructor(structure, missing) {\n"
"      const { name } = structure;\n"
"      super(`Missing initializers for ${name}: ${missing.join(', ')}`);\n"
"    }\n"
"  }\n"
"\n"
"  class NoProperty extends TypeError {\n"
"    constructor(structure, propName) {\n"
"      const { name, instance: { members } } = structure;\n"
"      const member = members.find(m => m.name === propName);\n"
"      let msg;\n"
"      if (member) {\n"
"        msg = `Comptime value cannot be changed: ${propName}`;\n"
"      } else {\n"
"        msg = `${name} does not have a property with that name: ${propName}`;\n"
"      }\n"
"      super(msg);\n"
"    }\n"
"  }\n"
"\n"
"  class ArgumentCountMismatch extends Error {\n"
"    constructor(name, expected, actual) {\n"
"      const s = (expected !== 1) ? 's' : '';\n"
"      super(`${name}() expects ${expected} argument${s}, received ${actual}`);\n"
"    }\n"
"  }\n"
"\n"
"  class NoCastingToPointer extends TypeError {\n"
"    constructor(structure) {\n"
"      super(`Non-slice pointers can only be created with the help of the new operator`);\n"
"    }\n"
"  }\n"
"\n"
"  class ConstantConstraint extends TypeError {\n"
"    constructor(structure, pointer) {\n"
"      const { name: target } = structure;\n"
"      const { constructor: { name } } = pointer;\n"
"      super(`Conversion of ${name} to ${target} requires an explicit cast`);\n"
"    }\n"
"  }\n"
"\n"
"  class MisplacedSentinel extends TypeError {\n"
"    constructor(structure, value, index, length) {\n"
"      const { name } = structure;\n"
"      super(`${name} expects the sentinel value ${value} at ${length - 1}, found at ${index}`);\n"
"    }\n"
"  }\n"
"\n"
"  class MissingSentinel extends TypeError {\n"
"    constructor(structure, value, length) {\n"
"      const { name } = structure;\n"
"      super(`${name} expects the sentinel value ${value} at ${length - 1}`);\n"
"    }\n"
"  }\n"
"\n"
"  class AlignmentConflict extends TypeError {\n"
"    constructor(align1, align2) {\n"
"      super(`Unable to simultaneously align memory to ${align2}-byte and ${align1}-byte boundary`);\n"
"    }\n"
"  }\n"
"\n"
"  class TypeMismatch extends TypeError {\n"
"    constructor(expected, arg) {\n"
"      const received = getDescription(arg);\n"
"      super(`Expected ${addArticle(expected)}, received ${received}`);\n"
"    }\n"
"  }\n"
"\n"
"  class InaccessiblePointer extends TypeError {\n"
"    constructor() {\n"
"      super(`Pointers within an untagged union are not accessible`);\n"
"    }\n"
"  }\n"
"\n"
"  class NullPointer extends TypeError {\n"
"    constructor() {\n"
"      super(`Null pointer`);\n"
"    }\n"
"  }\n"
"\n"
"  class InvalidPointerTarget extends TypeError {\n"
"    constructor(structure, arg) {\n"
"      const { name } = structure;\n"
"      let target;\n"
"      if (arg != null) {\n"
"        const type = typeof(arg);\n"
"        const noun = (type === 'object' && arg.constructor !== Object) ? `${arg.constructor.name} object`: type;\n"
"        const a = article(noun);\n"
"        target = `${a} ${noun}`;\n"
"      } else {\n"
"        target = arg + '';\n"
"      }\n"
"      super(`${name} cannot point to ${target}`);\n"
"    }\n"
"  }\n"
"\n"
"  class FixedMemoryTargetRequired extends TypeError {\n"
"    constructor(structure, arg) {\n"
"      super(`Pointers in fixed memory cannot point to garbage-collected object`);\n"
"    }\n"
"  }\n"
"\n"
"  class Overflow extends TypeError {\n"
"    constructor(member, value) {\n"
"      const typeName = getTypeName(member);\n"
"      super(`${typeName} cannot represent the value given: ${value}`);\n"
"    }\n"
"  }\n"
"\n"
"  class OutOfBound extends RangeError {\n"
"    constructor(member, index) {\n"
"      const { name } = member;\n"
"      super(`Index exceeds the size of ${name ?? 'array'}: ${index}`);\n"
"    }\n"
"  }\n"
"\n"
"  class NotUndefined extends TypeError {\n"
"    constructor(member) {\n"
"      const { name } = member;\n"
"      const rvalue = (name !== undefined) ? `Property ${name}` : `Element`;\n"
"      super(`${rvalue} can only be undefined`);\n"
"    }\n"
"  }\n"
"\n"
"  class NotOnByteBoundary extends TypeError {\n"
"    constructor(member) {\n"
"      const { name, structure: { name: { struct }} } = member;\n"
"      super(`Unable to create ${struct} as it is not situated on a byte boundary: ${name}`);\n"
"    }\n"
"  }\n"
"\n"
"  class ReadOnly extends TypeError {\n"
"    constructor() {\n"
"      super(`Unable to modify read-only object`);\n"
"    }\n"
"  }\n"
"\n"
"  class ReadOnlyTarget extends TypeError {\n"
"    constructor(structure) {\n"
"      const { name } = structure;\n"
"      super(`${name} cannot point to a read-only object`);\n"
"    }\n"
"  }\n"
"\n"
"  class AccessingOpaque extends TypeError {\n"
"    constructor(structure) {\n"
"      const { name } = structure;\n"
"      super(`Unable to access opaque structure ${name}`);\n"
"    }\n"
"  }\n"
"\n"
"  class CreatingOpaque extends TypeError {\n"
"    constructor(structure) {\n"
"      const { name } = structure;\n"
"      super(`Unable to create instance of ${name}, as it is opaque`);\n"
"    }\n"
"  }\n"
"\n"
"  class InvalidVariadicArgument extends TypeError {\n"
"    constructor() {\n"
"      super(`Arguments passed to variadic function must be casted to a Zig type`);\n"
"    }\n"
"  }\n"
"\n"
"  class ZigError extends Error {\n"
"    constructor(name) {\n"
"      super(deanimalizeErrorName(name));\n"
"    }\n"
"  }\n"
"\n"
"  function adjustArgumentError(name, index, argCount, err) {\n"
"    // Zig currently does not provide the argument name\n"
"    const argName = `args[${index}]`;\n"
"    const prefix = (index !== 0) ? '..., ' : '';\n"
"    const suffix = (index !== argCount - 1) ? ', ...' : '';\n"
"    const argLabel = prefix + argName + suffix;\n"
"    const newError = Object.create(err.constructor.prototype);\n"
"    newError.message = `${name}(${argLabel}): ${err.message}`;\n"
"    newError.stack = err.stack;\n"
"    return newError;\n"
"  }\n"
"\n"
"  function adjustRangeError(member, index, err) {\n"
"    if (err instanceof RangeError && !(err instanceof OutOfBound)) {\n"
"      err = new OutOfBound(member, index);\n"
"    }\n"
"    return err;\n"
"  }\n"
"\n"
"  function throwReadOnly() {\n"
"    throw new ReadOnly();\n"
"  }\n"
"\n"
"  function warnImplicitArrayCreation(structure, arg) {\n"
"    const created = addArticle(structure.typedArray.name);\n"
"    const source = addArticle(arg.constructor.name);\n"
"    console.warn(`Implicitly creating ${created} from ${source}`);\n"
"  }\n"
"\n"
"  function deanimalizeErrorName(name) {\n"
"    // deal with snake_case first\n"
"    let s = name.replace(/_/g, ' ');\n"
"    // then camelCase, using a try block in case Unicode regex fails\n"
"    try {\n"
"      s = s.replace(/(\\p{Uppercase}+)(\\p{Lowercase}*)/gu, (m0, m1, m2) => {\n"
"        if (m1.length === 1) {\n"
"          return ` ${m1.toLocaleLowerCase()}${m2}`;\n"
"        } else {\n"
"          if (m2) {\n"
"            return m0;\n"
"          } else {\n"
"            return ` ${m1}`;\n"
"          }\n"
"        }\n"
"      }).trimStart();\n"
"      /* c8 ignore next 2 */\n"
"    } catch (err) {\n"
"    }\n"
"    return s.charAt(0).toLocaleUpperCase() + s.substring(1);\n"
"  }\n"
"\n"
"  function getDescription(arg) {\n"
"    const type = typeof(arg);\n"
"    let s;\n"
"    if (type === 'object') {\n"
"      s = (arg) ? Object.prototype.toString.call(arg) : 'null';\n"
"    } else {\n"
"      s = type;\n"
"    }\n"
"    return addArticle(s);\n"
"  }\n"
"\n"
"  function addArticle(noun) {\n"
"    return `${article(noun)} ${noun}`;\n"
"  }\n"
"\n"
"  function article(noun) {\n"
"    return /^\\W*[aeiou]/i.test(noun) ? 'an' : 'a';\n"
"  }\n"
"\n"
"  function formatList(list, conj = 'or') {\n"
"    const sep = ` ${conj} `;\n"
"    if (list.length > 2) {\n"
"      return list.slice(0, -1).join(', ') + sep + list[list.length - 1];\n"
"    } else {\n"
"      return list.join(sep);\n"
"    }\n"
"  }\n"
"\n"
"  const MEMORY = Symbol('memory');\n"
"  const SLOTS = Symbol('slots');\n"
"  const PARENT = Symbol('parent');\n"
"  const FIXED = Symbol('fixed');\n"
"  const NAME = Symbol('name');\n"
"  const TYPE = Symbol('type');\n"
"  const TUPLE = Symbol('tuple');\n"
"  const CLASS = Symbol('class');\n"
"  const TAG = Symbol('tag');\n"
"  const PROPS = Symbol('props');\n"
"  const GETTER = Symbol('getter');\n"
"  const SETTER = Symbol('setter');\n"
"  const ELEMENT_GETTER = Symbol('elementGetter');\n"
"  const ELEMENT_SETTER = Symbol('elementSetter');\n"
"  const TARGET_GETTER = Symbol('targetGetter');\n"
"  const TARGET_SETTER = Symbol('targetSetter');\n"
"  const ENTRIES_GETTER = Symbol('entriesGetter');\n"
"  const ADDRESS_SETTER = Symbol('addressSetter');\n"
"  const LENGTH_SETTER = Symbol('lengthSetter');\n"
"  const TARGET_UPDATER = Symbol('targetUpdater');\n"
"  const MAX_LENGTH = Symbol('maxLength');\n"
"  const PROP_GETTERS = Symbol('propGetters');\n"
"  const PROP_SETTERS = Symbol('propSetters');\n"
"  const WRITE_DISABLER = Symbol('writeDisabler');\n"
"  const ALL_KEYS = Symbol('allKeys');\n"
"  const ADDRESS = Symbol('address');\n"
"  const LENGTH = Symbol('length');\n"
"  const PROXY = Symbol('proxy');\n"
"  const COMPAT = Symbol('compat');\n"
"  const CACHE = Symbol('cache');\n"
"  const SIZE = Symbol('size');\n"
"  const ALIGN = Symbol('align');\n"
"  const ARRAY = Symbol('array');\n"
"  const POINTER = Symbol('pointer');\n"
"  const CONST_TARGET = Symbol('constTarget');\n"
"  const CONST_PROXY = Symbol('constProxy');\n"
"  const COPIER = Symbol('copier');\n"
"  const RESETTER = Symbol('resetter');\n"
"  const VIVIFICATOR = Symbol('vivificator');\n"
"  const POINTER_VISITOR = Symbol('pointerVisitor');\n"
"  const ENVIRONMENT = Symbol('environment');\n"
"  const ATTRIBUTES = Symbol('attributes');\n"
"  const MORE = Symbol('more');\n"
"  const PRIMITIVE = Symbol('primitive');\n"
"\n"
"  function getDestructor(env) {\n"
"    return function() {\n"
"      const dv = this[MEMORY];\n"
"      this[MEMORY] = null;\n"
"      if (this[SLOTS]) {\n"
"        this[SLOTS] = {};\n"
"      }\n"
"      if (dv[FIXED]) {\n"
"        env.releaseFixedView(dv);\n"
"      }\n"
"    };\n"
"  }\n"
"\n"
"  function getBitAlignFunction(bitPos, bitSize, toAligned) {\n"
"    if (bitPos + bitSize <= 8) {\n"
"      const mask = (2 ** bitSize) - 1;\n"
"      if (toAligned) {\n"
"        // from single byte\n"
"        return function(dest, src, offset) {\n"
"          const n = src.getUint8(offset);\n"
"          const b = (n >> bitPos) & mask;\n"
"          dest.setUint8(0, b);\n"
"        };\n"
"      } else {\n"
"        // to single byte\n"
"        const destMask = 0xFF ^ (mask << bitPos);\n"
"        return function(dest, src, offset) {\n"
"          const n = src.getUint8(0);\n"
"          const d = dest.getUint8(offset);\n"
"          const b = (d & destMask) | ((n & mask) << bitPos);\n"
"          dest.setUint8(offset, b);\n"
"        };\n"
"      }\n"
"    } else {\n"
"      const leadBits = 8 - bitPos;\n"
"      const leadMask = (2 ** leadBits) - 1;\n"
"      if (toAligned) {\n"
"        const trailBits = bitSize % 8;\n"
"        const trailMask = (2 ** trailBits) - 1;\n"
"        return function(dest, src, offset) {\n"
"          let i = offset, j = 0;\n"
"          let n = src.getUint8(i++), b;\n"
"          let bitBuf = (n >> bitPos) & leadMask;\n"
"          let bitCount = leadBits;\n"
"          let remaining = bitSize;\n"
"          do {\n"
"            if (remaining > bitCount) {\n"
"              n = src.getUint8(i++);\n"
"              bitBuf = bitBuf | (n << bitCount);\n"
"              //bitCount += 8;\n"
"            }\n"
"            b = (remaining >= 8) ? bitBuf & 0xFF : bitBuf & trailMask;\n"
"            dest.setUint8(j++, b);\n"
"            bitBuf >>= 8;\n"
"            //bitCount -= 8;\n"
"            remaining -= 8;\n"
"          } while (remaining > 0);\n"
"        }\n"
"      } else {\n"
"        const trailBits = (bitSize - leadBits) % 8;\n"
"        const trailMask = (2 ** trailBits) - 1;\n"
"        const destMask1 = 0xFF ^ (leadMask << bitPos);\n"
"        const destMask2 = 0xFF ^ trailMask;\n"
"        return function(dest, src, offset) {\n"
"          let i = 0, j = offset;\n"
"          // preserve bits ahead of bitPos\n"
"          let d = dest.getUint8(j), n, b;\n"
"          let bitBuf = d & destMask1;\n"
"          let bitCount = bitPos;\n"
"          let remaining = bitSize + bitCount;\n"
"          do {\n"
"            if (remaining > bitCount) {\n"
"              n = src.getUint8(i++);\n"
"              bitBuf = bitBuf | (n << bitCount);\n"
"              bitCount += 8;\n"
"            }\n"
"            if (remaining >= 8) {\n"
"              b = bitBuf & 0xFF;\n"
"            } else {\n"
"              // preserve bits at the destination sitting behind the trailing bits\n"
"              d = dest.getUint8(j);\n"
"              b = (d & destMask2) | (bitBuf & trailMask);\n"
"            }\n"
"            dest.setUint8(j++, b);\n"
"            bitBuf >>= 8;\n"
"            bitCount -= 8;\n"
"            remaining -= 8;\n"
"          } while (remaining > 0);\n"
"        }\n"
"      }\n"
"    }\n"
"  }\n"
"\n"
"  function getMemoryCopier(size, multiple = false) {\n"
"    const copy = getCopyFunction(size, multiple);\n"
"    return function(target) {\n"
"      const src = target[MEMORY];\n"
"      const dest = this[MEMORY];\n"
"      copy(dest, src);\n"
"    };\n"
"  }\n"
"\n"
"  function getCopyFunction(size, multiple = false) {\n"
"    if (size !== undefined) {\n"
"      if (!multiple) {\n"
"        const copier = copiers[size];\n"
"        if (copier) {\n"
"          return copier;\n"
"        }\n"
"      }\n"
"      if (!(size & 0x07)) return copy8x;\n"
"      if (!(size & 0x03)) return copy4x;\n"
"      if (!(size & 0x01)) return copy2x;\n"
"      return copy1x;\n"
"    } else {\n"
"      return copyAny;\n"
"    }\n"
"  }\n"
"\n"
"  function copyAny(dest, src) {\n"
"    const copy = getCopyFunction(dest.byteLength);\n"
"    copy(dest, src);\n"
"  }\n"
"\n"
"  const copiers = {\n"
"    1: copy1,\n"
"    2: copy2,\n"
"    4: copy4,\n"
"    8: copy8,\n"
"    16: copy16,\n"
"    32: copy32,\n"
"  };\n"
"\n"
"  function copy1x(dest, src) {\n"
"    for (let i = 0, len = dest.byteLength; i < len; i++) {\n"
"      dest.setInt8(i, src.getInt8(i));\n"
"    }\n"
"  }\n"
"\n"
"  function copy2x(dest, src) {\n"
"    for (let i = 0, len = dest.byteLength; i < len; i += 2) {\n"
"      dest.setInt16(i, src.getInt16(i, true), true);\n"
"    }\n"
"  }\n"
"\n"
"  function copy4x(dest, src) {\n"
"    for (let i = 0, len = dest.byteLength; i < len; i += 4) {\n"
"      dest.setInt32(i, src.getInt32(i, true), true);\n"
"    }\n"
"  }\n"
"\n"
"  function copy8x(dest, src) {\n"
"    for (let i = 0, len = dest.byteLength; i < len; i += 8) {\n"
"      dest.setInt32(i, src.getInt32(i, true), true);\n"
"      dest.setInt32(i + 4, src.getInt32(i + 4, true), true);\n"
"    }\n"
"  }\n"
"\n"
"  function copy1(dest, src) {\n"
"    dest.setInt8(0, src.getInt8(0));\n"
"  }\n"
"\n"
"  function copy2(dest, src) {\n"
"    dest.setInt16(0, src.getInt16(0, true), true);\n"
"  }\n"
"\n"
"  function copy4(dest, src) {\n"
"    dest.setInt32(0, src.getInt32(0, true), true);\n"
"  }\n"
"\n"
"  function copy8(dest, src) {\n"
"    dest.setInt32(0, src.getInt32(0, true), true);\n"
"    dest.setInt32(4, src.getInt32(4, true), true);\n"
"  }\n"
"\n"
"  function copy16(dest, src) {\n"
"    dest.setInt32(0, src.getInt32(0, true), true);\n"
"    dest.setInt32(4, src.getInt32(4, true), true);\n"
"    dest.setInt32(8, src.getInt32(8, true), true);\n"
"    dest.setInt32(12, src.getInt32(12, true), true);\n"
"  }\n"
"\n"
"  function copy32(dest, src) {\n"
"    dest.setInt32(0, src.getInt32(0, true), true);\n"
"    dest.setInt32(4, src.getInt32(4, true), true);\n"
"    dest.setInt32(8, src.getInt32(8, true), true);\n"
"    dest.setInt32(12, src.getInt32(12, true), true);\n"
"    dest.setInt32(16, src.getInt32(16, true), true);\n"
"    dest.setInt32(20, src.getInt32(20, true), true);\n"
"    dest.setInt32(24, src.getInt32(24, true), true);\n"
"    dest.setInt32(28, src.getInt32(28, true), true);\n"
"  }\n"
"\n"
"  function getMemoryResetter(offset, size) {\n"
"    const reset = getResetFunction(size);\n"
"    return function() {\n"
"      const dest = this[MEMORY];\n"
"      reset(dest, offset, size);\n"
"    };\n"
"  }\n"
"\n"
"  function getResetFunction(size) {\n"
"    const resetter = resetters[size];\n"
"    if (resetter) {\n"
"      return resetter;\n"
"    }\n"
"    if (!(size & 0x07)) return reset8x;\n"
"    if (!(size & 0x03)) return reset4x;\n"
"    if (!(size & 0x01)) return reset2x;\n"
"    return reset1x;\n"
"  }\n"
"\n"
"  const resetters = {\n"
"    1: reset1,\n"
"    2: reset2,\n"
"    4: reset4,\n"
"    8: reset8,\n"
"    16: reset16,\n"
"    32: reset32,\n"
"  };\n"
"\n"
"  function reset1x(dest, offset, size) {\n"
"    for (let i = offset, limit = offset + size; i < limit; i++) {\n"
"      dest.setInt8(i, 0);\n"
"    }\n"
"  }\n"
"\n"
"  function reset2x(dest, offset, size) {\n"
"    for (let i = offset, limit = offset + size; i < limit; i += 2) {\n"
"      dest.setInt16(i, 0, true);\n"
"    }\n"
"  }\n"
"\n"
"  function reset4x(dest, offset, size) {\n"
"    for (let i = offset, limit = offset + size; i < limit; i += 4) {\n"
"      dest.setInt32(i, 0, true);\n"
"    }\n"
"  }\n"
"\n"
"  function reset8x(dest, offset, size) {\n"
"    for (let i = offset, limit = offset + size; i < limit; i += 8) {\n"
"      dest.setInt32(i, 0, true);\n"
"      dest.setInt32(i + 4, 0, true);\n"
"    }\n"
"  }\n"
"\n"
"  function reset1(dest, offset) {\n"
"    dest.setInt8(offset, 0);\n"
"  }\n"
"\n"
"  function reset2(dest, offset) {\n"
"    dest.setInt16(offset, 0, true);\n"
"  }\n"
"\n"
"  function reset4(dest, offset) {\n"
"    dest.setInt32(offset, 0, true);\n"
"  }\n"
"\n"
"  function reset8(dest, offset) {\n"
"    dest.setInt32(offset + 0, 0, true);\n"
"    dest.setInt32(offset + 4, 0, true);\n"
"  }\n"
"\n"
"  function reset16(dest, offset) {\n"
"    dest.setInt32(offset + 0, 0, true);\n"
"    dest.setInt32(offset + 4, 0, true);\n"
"    dest.setInt32(offset + 8, 0, true);\n"
"    dest.setInt32(offset + 12, 0, true);\n"
"  }\n"
"\n"
"  function reset32(dest, offset) {\n"
"    dest.setInt32(offset + 0, 0, true);\n"
"    dest.setInt32(offset + 4, 0, true);\n"
"    dest.setInt32(offset + 8, 0, true);\n"
"    dest.setInt32(offset + 12, 0, true);\n"
"    dest.setInt32(offset + 16, 0, true);\n"
"    dest.setInt32(offset + 20, 0, true);\n"
"    dest.setInt32(offset + 24, 0, true);\n"
"    dest.setInt32(offset + 28, 0, true);\n"
"  }\n"
"\n"
"  function getBoolAccessor(access, member) {\n"
"    return cacheMethod(access, member, () => {\n"
"      if (isByteAligned(member)) {\n"
"        const { byteSize } = member;\n"
"        const typeName = getTypeName({ type: MemberType.Int, bitSize: byteSize * 8 });\n"
"        if (access === 'get') {\n"
"          const get = DataView.prototype[`get${typeName}`];\n"
"          return function(offset, littleEndian) {\n"
"            return !!get.call(this, offset, littleEndian);\n"
"          };\n"
"        } else {\n"
"          const set = DataView.prototype[`set${typeName}`];\n"
"          const T = (byteSize > 4) ? 1n : 1;\n"
"          const F = (byteSize > 4) ? 0n : 0;\n"
"          return function(offset, value, littleEndian) {\n"
"            set.call(this, offset, value ? T : F, littleEndian);\n"
"          };\n"
"        }\n"
"      } else {\n"
"        return getExtendedTypeAccessor(access, member);\n"
"      }\n"
"    });\n"
"  }\n"
"\n"
"  function getNumericAccessor(access, member) {\n"
"    return cacheMethod(access, member, (name) => {\n"
"      if (DataView.prototype[name]) {\n"
"        return DataView.prototype[name];\n"
"      } else {\n"
"        return getExtendedTypeAccessor(access, member);\n"
"      }\n"
"    });\n"
"  }\n"
"\n"
"  const factories$2 = {};\n"
"\n"
"  function useExtendedBool() {\n"
"    factories$2[MemberType.Bool] = getExtendedBoolAccessor;\n"
"  }\n"
"\n"
"  function useExtendedInt() {\n"
"    factories$2[MemberType.Int] = getExtendedIntAccessor;\n"
"  }\n"
"\n"
"  function useExtendedUint() {\n"
"    factories$2[MemberType.Uint] = getExtendedUintAccessor;\n"
"  }\n"
"\n"
"  function useExtendedFloat() {\n"
"    factories$2[MemberType.Float] = getExtendedFloatAccessor;\n"
"  }\n"
"\n"
"  function getExtendedTypeAccessor(access, member) {\n"
"    const f = factories$2[member.type];\n"
"    return f(access, member);\n"
"  }\n"
"\n"
"  function getExtendedBoolAccessor(access, member) {\n"
"    const { bitOffset } = member;\n"
"    const bitPos = bitOffset & 0x07;\n"
"    const mask = 1 << bitPos;\n"
"    const get = DataView.prototype.getInt8;\n"
"    if (access === 'get') {\n"
"      return function(offset) {\n"
"        const n = get.call(this, offset);\n"
"        return !!(n & mask);\n"
"      };\n"
"    } else {\n"
"      const set = DataView.prototype.setInt8;\n"
"      return function(offset, value) {\n"
"        const n = get.call(this, offset);\n"
"        const b = (value) ? n | mask : n & ~mask;\n"
"        set.call(this, offset, b);\n"
"      };\n"
"    }\n"
"  }\n"
"\n"
"  function getExtendedIntAccessor(access, member) {\n"
"    if (isByteAligned(member)) {\n"
"      return getAlignedIntAccessor(access, member)\n"
"    } else {\n"
"      return getUnalignedIntAccessor(access, member);\n"
"    }\n"
"  }\n"
"\n"
"  function getExtendedUintAccessor(access, member) {\n"
"    if (isByteAligned(member)) {\n"
"      return getAlignedUintAccessor(access, member)\n"
"    } else {\n"
"      return getUnalignedUintAccessor(access, member);\n"
"    }\n"
"  }\n"
"\n"
"  function getExtendedFloatAccessor(access, member) {\n"
"    if (isByteAligned(member)) {\n"
"      return getAlignedFloatAccessor(access, member)\n"
"    } else {\n"
"      return getUnalignedFloatAccessor(access, member);\n"
"    }\n"
"  }\n"
"\n"
"  function getDataView(structure, arg, env) {\n"
"    const { type, byteSize, typedArray } = structure;\n"
"    let dv;\n"
"    // not using instanceof just in case we're getting objects created in other contexts\n"
"    const tag = arg?.[Symbol.toStringTag];\n"
"    if (tag === 'DataView') {\n"
"      // capture relationship between the view and its buffer\n"
"      dv = env.registerView(arg);\n"
"    } else if (tag === 'ArrayBuffer' || tag === 'SharedArrayBuffer') {\n"
"      dv = env.obtainView(arg, 0, arg.byteLength);\n"
"    } else if (typedArray && tag === typedArray.name || (tag === 'Uint8ClampedArray' && typedArray === Uint8Array)) {\n"
"      dv = env.obtainView(arg.buffer, arg.byteOffset, arg.byteLength);\n"
"    } else if (tag === 'Uint8Array' && typeof(Buffer) === 'function' && arg instanceof Buffer) {\n"
"      dv = env.obtainView(arg.buffer, arg.byteOffset, arg.byteLength);\n"
"    } else {\n"
"      const memory = arg?.[MEMORY];\n"
"      if (memory) {\n"
"        // arg a Zig data object\n"
"        const { constructor, instance: { members: [ member ] } } = structure;\n"
"        if (arg instanceof constructor) {\n"
"          // same type, no problem\n"
"          return memory;\n"
"        } else {\n"
"          if (isArrayLike(type)) {\n"
"            // make sure the arg has the same type of elements\n"
"            const { byteSize: elementSize, structure: { constructor: Child } } = member;\n"
"            const number = findElements(arg, Child);\n"
"            if (number !== undefined) {\n"
"              if (type === StructureType.Slice || number * elementSize === byteSize) {\n"
"                return memory;\n"
"              } else {\n"
"                throw new ArrayLengthMismatch(structure, null, arg);\n"
"              }\n"
"            }\n"
"          }\n"
"        }\n"
"      }\n"
"    }\n"
"    if (dv && byteSize !== undefined) {\n"
"      checkDataViewSize(dv, structure);\n"
"    }\n"
"    return dv;\n"
"  }\n"
"\n"
"  function checkDataView(dv) {\n"
"    if (dv?.[Symbol.toStringTag] !== 'DataView') {\n"
"      throw new TypeMismatch('a DataView', dv);\n"
"    }\n"
"    return dv;\n"
"  }\n"
"\n"
"  function checkDataViewSize(dv, structure) {\n"
"    const { byteSize, type } = structure;\n"
"    const isSizeMatching = type === StructureType.Slice\n"
"    ? dv.byteLength % byteSize === 0\n"
"    : dv.byteLength === byteSize;\n"
"    if (!isSizeMatching) {\n"
"      throw new BufferSizeMismatch(structure, dv);\n"
"    }\n"
"  }\n"
"\n"
"  function setDataView(dv, structure, copy, fixed, handlers) {\n"
"    const { byteSize, type, sentinel } = structure;\n"
"    if (!this[MEMORY]) {\n"
"      const { shapeDefiner } = handlers;\n"
"      checkDataViewSize(dv, structure);\n"
"      const len = dv.byteLength / byteSize;\n"
"      const source = { [MEMORY]: dv };\n"
"      sentinel?.validateData(source, len);\n"
"      if (fixed) {\n"
"        // need to copy when target object is in fixed memory\n"
"        copy = true;\n"
"      }\n"
"      shapeDefiner.call(this, copy ? null : dv, len, fixed);\n"
"      if (copy) {\n"
"        this[COPIER](source);\n"
"      }\n"
"    } else {\n"
"      const byteLength = (type === StructureType.Slice) ? byteSize * this.length : byteSize;\n"
"      if (dv.byteLength !== byteLength) {\n"
"        throw new BufferSizeMismatch(structure, dv, this);\n"
"      }\n"
"      const source = { [MEMORY]: dv };\n"
"      sentinel?.validateData(source, this.length);\n"
"      this[COPIER](source);\n"
"    }\n"
"  }\n"
"\n"
"  function findElements(arg, Child) {\n"
"    // casting to a array/slice\n"
"    const { constructor: Arg } = arg;\n"
"    if (Arg === Child) {\n"
"      // matching object\n"
"      return 1;\n"
"    } else if (Arg.child === Child) {\n"
"      // matching slice/array\n"
"      return arg.length;\n"
"    }\n"
"  }\n"
"\n"
"  function requireDataView(structure, arg, env) {\n"
"    const dv = getDataView(structure, arg, env);\n"
"    if (!dv) {\n"
"      throw new BufferExpected(structure);\n"
"    }\n"
"    return dv;\n"
"  }\n"
"\n"
"  function getTypedArrayClass(member) {\n"
"    const { type: memberType, byteSize } = member;\n"
"    if (memberType === MemberType.Int) {\n"
"      switch (byteSize) {\n"
"        case 1: return Int8Array;\n"
"        case 2: return Int16Array;\n"
"        case 4: return Int32Array;\n"
"        case 8: return BigInt64Array;\n"
"      }\n"
"    } else if (memberType === MemberType.Uint) {\n"
"      switch (byteSize) {\n"
"        case 1: return Uint8Array;\n"
"        case 2: return Uint16Array;\n"
"        case 4: return Uint32Array;\n"
"        case 8: return BigUint64Array;\n"
"      }\n"
"    } else if (memberType === MemberType.Float) {\n"
"      switch (byteSize) {\n"
"        case 4: return Float32Array;\n"
"        case 8: return Float64Array;\n"
"      }\n"
"    } else if (memberType === MemberType.Object) {\n"
"      return member.structure.typedArray;\n"
"    }\n"
"    return null;\n"
"  }\n"
"\n"
"  function isTypedArray(arg, TypedArray) {\n"
"    const tag = arg?.[Symbol.toStringTag];\n"
"    return (!!TypedArray && tag === TypedArray.name);\n"
"  }\n"
"\n"
"  function isCompatibleBuffer(arg, constructor) {\n"
"    const tags = constructor[COMPAT];\n"
"    if (tags) {\n"
"      const tag = arg?.[Symbol.toStringTag];\n"
"      if (tags.includes(tag)) {\n"
"        return true;\n"
"      }\n"
"    }\n"
"    if (constructor.child) {\n"
"      if (findElements(arg, constructor.child) !== undefined) {\n"
"        return true;\n"
"      }\n"
"    }\n"
"    return false;\n"
"  }\n"
"\n"
"  function getCompatibleTags(structure) {\n"
"    const { typedArray } = structure;\n"
"    const tags = [];\n"
"    if (typedArray) {\n"
"      tags.push(typedArray.name);\n"
"      tags.push('DataView');\n"
"      if (typedArray === Uint8Array || typedArray === Int8Array) {\n"
"        tags.push('ArrayBuffer');\n"
"        tags.push('SharedArrayBuffer');\n"
"        if (typedArray === Uint8Array) {\n"
"          tags.push('Uint8ClampedArray');\n"
"        }\n"
"      }\n"
"    }\n"
"    return tags;\n"
"  }\n"
"\n"
"  function getBigIntDescriptor(bitSize) {\n"
"    const getWord = DataView.prototype.getBigUint64;\n"
"    const setWord = DataView.prototype.setBigUint64;\n"
"    const wordCount = Math.ceil(bitSize / 64);\n"
"    return {\n"
"      get: function(offset, littleEndian) {\n"
"        let n = 0n;\n"
"        if (littleEndian) {\n"
"          for (let i = 0, j = offset + (wordCount - 1) * 8; i < wordCount; i++, j -= 8) {\n"
"            const w = getWord.call(this, j, littleEndian);\n"
"            n = (n << 64n) | w;\n"
"          }\n"
"        } else {\n"
"          for (let i = 0, j = offset; i < wordCount; i++, j += 8) {\n"
"            const w = getWord.call(this, j, littleEndian);\n"
"            n = (n << 64n) | w;\n"
"          }\n"
"        }\n"
"        return n;\n"
"      },\n"
"      set: function(offset, value, littleEndian) {\n"
"        let n = value;\n"
"        const mask = 0xFFFFFFFFFFFFFFFFn;\n"
"        if (littleEndian) {\n"
"          for (let i = 0, j = offset; i < wordCount; i++, j += 8) {\n"
"            const w = n & mask;\n"
"            setWord.call(this, j, w, littleEndian);\n"
"            n >>= 64n;\n"
"          }\n"
"        } else {\n"
"          n <<= BigInt(wordCount * 64 - bitSize);\n"
"          for (let i = 0, j = offset + (wordCount - 1) * 8; i < wordCount; i++, j -= 8) {\n"
"            const w = n & mask;\n"
"            setWord.call(this, j, w, littleEndian);\n"
"            n >>= 64n;\n"
"          }\n"
"        }\n"
"        return n;\n"
"      },\n"
"    };\n"
"  }\n"
"\n"
"  function getAlignedIntAccessor(access, member) {\n"
"    const { bitSize, byteSize } = member;\n"
"    if (bitSize < 64) {\n"
"      // actual number of bits needed when stored aligned\n"
"      const typeName = getTypeName({ ...member, bitSize: byteSize * 8 });\n"
"      const get = DataView.prototype[`get${typeName}`];\n"
"      const set = DataView.prototype[`set${typeName}`];\n"
"      const signMask = (bitSize <= 32) ? 2 ** (bitSize - 1) : 2n ** BigInt(bitSize - 1);\n"
"      const valueMask = (bitSize <= 32) ? signMask - 1 : signMask - 1n;\n"
"      if (access === 'get') {\n"
"        return function(offset, littleEndian) {\n"
"          const n = get.call(this, offset, littleEndian);\n"
"          return (n & valueMask) - (n & signMask);\n"
"        };\n"
"      } else {\n"
"        return function(offset, value, littleEndian) {\n"
"          const n = (value < 0) ? signMask | (value & valueMask) : value & valueMask;\n"
"          set.call(this, offset, n, littleEndian);\n"
"        };\n"
"      }\n"
"    } else {\n"
"      // larger than 64 bits\n"
"      const { get, set } = getBigIntDescriptor(bitSize);\n"
"      const signMask = 2n ** BigInt(bitSize - 1);\n"
"      const valueMask = signMask - 1n;\n"
"      if (access === 'get') {\n"
"        return function(offset, littleEndian) {\n"
"          const n = get.call(this, offset, littleEndian);\n"
"          return (n & valueMask) - (n & signMask);\n"
"        };\n"
"      } else {\n"
"        return function(offset, value, littleEndian) {\n"
"          const n = (value < 0) ? signMask | (value & valueMask) : value & valueMask;\n"
"          set.call(this, offset, n, littleEndian);\n"
"        };\n"
"      }\n"
"    }\n"
"  }\n"
"\n"
"  function getAlignedUintAccessor(access, member) {\n"
"    const { bitSize, byteSize } = member;\n"
"    if (bitSize < 64) {\n"
"      // actual number of bits needed when stored aligned\n"
"      const typeName = getTypeName({ ...member, bitSize: byteSize * 8 });\n"
"      const get = DataView.prototype[`get${typeName}`];\n"
"      const set = DataView.prototype[`set${typeName}`];\n"
"      const valueMask = (bitSize <= 32) ? (2 ** bitSize) - 1 : (2n ** BigInt(bitSize)) - 1n;\n"
"      if (access === 'get') {\n"
"        return function(offset, littleEndian) {\n"
"          const n = get.call(this, offset, littleEndian);\n"
"          return n & valueMask;\n"
"        };\n"
"      } else {\n"
"        return function(offset, value, littleEndian) {\n"
"          const n = value & valueMask;\n"
"          set.call(this, offset, n, littleEndian);\n"
"        };\n"
"      }\n"
"    } else {\n"
"      // larger than 64 bits\n"
"      const { get, set } = getBigIntDescriptor(bitSize);\n"
"      const valueMask = (2n ** BigInt(bitSize)) - 1n;\n"
"      if (access === 'get') {\n"
"        return function(offset, littleEndian) {\n"
"          const n = get.call(this, offset, littleEndian);\n"
"          return n & valueMask;\n"
"        };\n"
"      } else {\n"
"        return function(offset, value, littleEndian) {\n"
"          const n = value & valueMask;\n"
"          set.call(this, offset, n, littleEndian);\n"
"        };\n"
"      }\n"
"    }\n"
"  }\n"
"\n"
"  function getUnalignedIntAccessor(access, member) {\n"
"    const { bitSize, bitOffset } = member;\n"
"    const bitPos = bitOffset & 0x07;\n"
"    if (bitPos + bitSize <= 8) {\n"
"      const set = DataView.prototype.setUint8;\n"
"      const get = DataView.prototype.getUint8;\n"
"      // sub-8-bit numbers have real use cases\n"
"      const signMask = 2 ** (bitSize - 1);\n"
"      const valueMask = signMask - 1;\n"
"      if (access === 'get') {\n"
"        return function(offset) {\n"
"          const n = get.call(this, offset);\n"
"          const s = n >>> bitPos;\n"
"          return (s & valueMask) - (s & signMask);\n"
"        };\n"
"      } else {\n"
"        const outsideMask = 0xFF ^ ((valueMask | signMask) << bitPos);\n"
"        return function(offset, value) {\n"
"          let b = get.call(this, offset);\n"
"          const n = (value < 0) ? signMask | (value & valueMask) : value & valueMask;\n"
"          b = (b & outsideMask) | (n << bitPos);\n"
"          set.call(this, offset, b);\n"
"        };\n"
"      }\n"
"    }\n"
"    return getUnalignedNumericAccessor(access, member);\n"
"  }\n"
"\n"
"  function getUnalignedUintAccessor(access, member) {\n"
"    const { bitSize, bitOffset } = member;\n"
"    const bitPos = bitOffset & 0x07;\n"
"    if (bitPos + bitSize <= 8) {\n"
"      const set = DataView.prototype.setUint8;\n"
"      const get = DataView.prototype.getUint8;\n"
"      const valueMask = (2 ** bitSize - 1);\n"
"      if (access === 'get') {\n"
"        return function(offset) {\n"
"          const n = get.call(this, offset);\n"
"          const s = n >>> bitPos;\n"
"          return s & valueMask;\n"
"        };\n"
"      } else {\n"
"        const outsideMask = 0xFF ^ (valueMask << bitPos);\n"
"        return function(offset, value) {\n"
"          const n = get.call(this, offset);\n"
"          const b = (n & outsideMask) | ((value & valueMask) << bitPos);\n"
"          set.call(this, offset, b);\n"
"        };\n"
"      }\n"
"    }\n"
"    return getUnalignedNumericAccessor(access, member);\n"
"  }\n"
"\n"
"  function getAlignedFloatAccessor(access, member) {\n"
"    const { bitSize, byteSize } = member;\n"
"    if (bitSize === 16) {\n"
"      const buf = new DataView(new ArrayBuffer(4));\n"
"      const set = DataView.prototype.setUint16;\n"
"      const get = DataView.prototype.getUint16;\n"
"      if (access === 'get') {\n"
"        return function(offset, littleEndian) {\n"
"          const n = get.call(this, offset, littleEndian);\n"
"          const sign = n >>> 15;\n"
"          const exp = (n & 0x7C00) >> 10;\n"
"          const frac = n & 0x03FF;\n"
"          if (exp === 0) {\n"
"            return (sign) ? -0 : 0;\n"
"          } else if (exp === 0x1F) {\n"
"            if (!frac) {\n"
"              return (sign) ? -Infinity : Infinity;\n"
"            } else {\n"
"              return NaN;\n"
"            }\n"
"          }\n"
"          const n32 = (sign << 31) | ((exp - 15 + 127) << 23) | (frac << 13);\n"
"          buf.setUint32(0, n32, littleEndian);\n"
"          return buf.getFloat32(0, littleEndian);\n"
"        }\n"
"      } else {\n"
"        return function(offset, value, littleEndian) {\n"
"          buf.setFloat32(0, value, littleEndian);\n"
"          const n = buf.getUint32(0, littleEndian);\n"
"          const sign = n >>> 31;\n"
"          const exp = (n & 0x7F800000) >> 23;\n"
"          const frac = n & 0x007FFFFF;\n"
"          const exp16 = (exp - 127 + 15);\n"
"          let n16;\n"
"          if (exp === 0) {\n"
"            n16 = sign << 15;\n"
"          } else if (exp === 0xFF) {\n"
"            n16 = sign << 15 | 0x1F << 10 | (frac ? 1 : 0);\n"
"          } else if (exp16 >= 31) {\n"
"            n16 = sign << 15 | 0x1F << 10;\n"
"          } else {\n"
"            n16 = sign << 15 | exp16 << 10 | (frac >> 13);\n"
"          }\n"
"          set.call(this, offset, n16, littleEndian);\n"
"        }\n"
"      }\n"
"    } else if (bitSize === 80) {\n"
"      const buf = new DataView(new ArrayBuffer(8));\n"
"      const get = function(offset, littleEndian) {\n"
"        const w1 = BigInt(this.getUint32(offset + (littleEndian ? 0 : byteSize - 4), littleEndian));\n"
"        const w2 = BigInt(this.getUint32(offset + (littleEndian ? 4 : byteSize - 8), littleEndian));\n"
"        const w3 = BigInt(this.getUint32(offset + (littleEndian ? 8 : byteSize - 12), littleEndian));\n"
"        return w1 | w2 << 32n | w3 << 64n;\n"
"      };\n"
"      const set = function(offset, value, littleEndian) {\n"
"        const w1 = value & 0xFFFFFFFFn;\n"
"        const w2 = (value >> 32n) & 0xFFFFFFFFn;\n"
"        const w3 = (value >> 64n) & 0xFFFFFFFFn;\n"
"        this.setUint32(offset + (littleEndian ? 0 : byteSize - 4), Number(w1), littleEndian);\n"
"        this.setUint32(offset + (littleEndian ? 4 : byteSize - 8), Number(w2), littleEndian);\n"
"        this.setUint32(offset + (littleEndian ? 8 : byteSize - 12), Number(w3), littleEndian);\n"
"      };\n"
"      if (access === 'get') {\n"
"        return function(offset, littleEndian) {\n"
"          const n = get.call(this, offset, littleEndian);\n"
"          const sign = n >> 79n;\n"
"          const exp = (n & 0x7FFF0000000000000000n) >> 64n;\n"
"          const frac = n & 0x00007FFFFFFFFFFFFFFFn;\n"
"          if (exp === 0n) {\n"
"            return (sign) ? -0 : 0;\n"
"          } else if (exp === 0x7FFFn) {\n"
"            if (!frac) {\n"
"              return (sign) ? -Infinity : Infinity;\n"
"            } else {\n"
"              return NaN;\n"
"            }\n"
"          }\n"
"          const exp64 = exp - 16383n + 1023n;\n"
"          if (exp64 >= 2047n) {\n"
"            return (sign) ? -Infinity : Infinity;\n"
"          }\n"
"          const n64 = (sign << 63n) | (exp64 << 52n) | (frac >> 11n) + BigInt((frac & (2n**11n - 1n)) >= 2n**10n);\n"
"          buf.setBigUint64(0, n64, littleEndian);\n"
"          return buf.getFloat64(0, littleEndian);\n"
"        }\n"
"      } else {\n"
"        return function(offset, value, littleEndian) {\n"
"          buf.setFloat64(0, value, littleEndian);\n"
"          const n = buf.getBigUint64(0, littleEndian);\n"
"          const sign = n >> 63n;\n"
"          const exp = (n & 0x7FF0000000000000n) >> 52n;\n"
"          const frac = n & 0x000FFFFFFFFFFFFFn;\n"
"          let n80;\n"
"          if (exp === 0n) {\n"
"            n80 = sign << 79n | (frac << 11n);\n"
"          } else if (exp === 0x07FFn) {\n"
"            n80 = sign << 79n | 0x7FFFn << 64n | (frac ? 0x00002000000000000000n : 0n) | 0x00008000000000000000n;\n"
"            //                                                 ^ bit 61                       ^ bit 63\n"
"          } else {\n"
"            n80 = sign << 79n | (exp - 1023n + 16383n) << 64n | (frac << 11n) | 0x00008000000000000000n;\n"
"          }\n"
"          set.call(this, offset, n80, littleEndian);\n"
"        }\n"
"      }\n"
"    } else if (bitSize === 128) {\n"
"      const buf = new DataView(new ArrayBuffer(8));\n"
"      const get = function(offset, littleEndian) {\n"
"        const w1 = BigInt(this.getUint32(offset + (littleEndian ? 0 : byteSize - 4), littleEndian));\n"
"        const w2 = BigInt(this.getUint32(offset + (littleEndian ? 4 : byteSize - 8), littleEndian));\n"
"        const w3 = BigInt(this.getUint32(offset + (littleEndian ? 8 : byteSize - 12), littleEndian));\n"
"        const w4 = BigInt(this.getUint32(offset + (littleEndian ? 12 : byteSize - 16), littleEndian));\n"
"        return w1 | w2 << 32n | w3 << 64n | w4 << 96n;\n"
"      };\n"
"      const set = function(offset, value, littleEndian) {\n"
"        const w1 = value & 0xFFFFFFFFn;\n"
"        const w2 = (value >> 32n) & 0xFFFFFFFFn;\n"
"        const w3 = (value >> 64n) & 0xFFFFFFFFn;\n"
"        const w4 = (value >> 96n) & 0xFFFFFFFFn;\n"
"        this.setUint32(offset + (littleEndian ? 0 : byteSize - 4), Number(w1), littleEndian);\n"
"        this.setUint32(offset + (littleEndian ? 4 : byteSize - 8), Number(w2), littleEndian);\n"
"        this.setUint32(offset + (littleEndian ? 8 : byteSize - 12), Number(w3), littleEndian);\n"
"        this.setUint32(offset + (littleEndian ? 12 : byteSize - 16), Number(w4), littleEndian);\n"
"      };\n"
"      if (access === 'get') {\n"
"        return function(offset, littleEndian) {\n"
"          const n = get.call(this, offset, littleEndian);\n"
"          const sign = n >> 127n;\n"
"          const exp = (n & 0x7FFF0000000000000000000000000000n) >> 112n;\n"
"          const frac = n & 0x0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFn;\n"
"          if (exp === 0n) {\n"
"            return (sign) ? -0 : 0;\n"
"          } else if (exp === 0x7FFFn) {\n"
"            if (!frac) {\n"
"              return (sign) ? -Infinity : Infinity;\n"
"            } else {\n"
"              return NaN;\n"
"            }\n"
"          }\n"
"          const exp64 = exp - 16383n + 1023n;\n"
"          if (exp64 >= 2047n) {\n"
"            return (sign) ? -Infinity : Infinity;\n"
"          }\n"
"          const n64 = (sign << 63n) | (exp64 << 52n) | (frac >> 60n) + BigInt((frac & (2n**60n - 1n)) >= 2n**59n);\n"
"          buf.setBigUint64(0, n64, littleEndian);\n"
"          return buf.getFloat64(0, littleEndian);\n"
"        }\n"
"      } else {\n"
"        return function(offset, value, littleEndian) {\n"
"          buf.setFloat64(0, value, littleEndian);\n"
"          const n = buf.getBigUint64(0, littleEndian);\n"
"          const sign = n >> 63n;\n"
"          const exp = (n & 0x7FF0000000000000n) >> 52n;\n"
"          const frac = n & 0x000FFFFFFFFFFFFFn;\n"
"          let n128;\n"
"          if (exp === 0n) {\n"
"            n128 = sign << 127n | (frac << 60n);\n"
"          } else if (exp === 0x07FFn) {\n"
"            n128 = sign << 127n | 0x7FFFn << 112n | (frac ? 1n : 0n);\n"
"          } else {\n"
"            n128 = sign << 127n | (exp - 1023n + 16383n) << 112n | (frac << 60n);\n"
"          }\n"
"          set.call(this, offset, n128, littleEndian);\n"
"        }\n"
"      }\n"
"    }\n"
"  }\n"
"\n"
"  function getUnalignedFloatAccessor(access, member) {\n"
"    return getUnalignedNumericAccessor(access, member);\n"
"  }\n"
"\n"
"  function getUnalignedNumericAccessor(access, member) {\n"
"    // pathological usage scenario--handle it anyway by copying the bitSize into a\n"
"    // temporary buffer, bit-aligning the data\n"
"    const { bitSize, bitOffset } = member;\n"
"    const bitPos = bitOffset & 0x07;\n"
"    const byteSize = [ 1, 2, 4, 8 ].find(b => b * 8 >= bitSize) ?? Math.ceil(bitSize / 64) * 64;\n"
"    const buf = new DataView(new ArrayBuffer(byteSize));\n"
"    if (access === 'get') {\n"
"      const getAligned = getNumericAccessor('get', { ...member, byteSize });\n"
"      const copyBits = getBitAlignFunction(bitPos, bitSize, true);\n"
"      return function(offset, littleEndian) {\n"
"        copyBits(buf, this, offset);\n"
"        return getAligned.call(buf, 0, littleEndian);\n"
"      };\n"
"    } else {\n"
"      const setAligned = getNumericAccessor('set', { ...member, byteSize });\n"
"      const applyBits = getBitAlignFunction(bitPos, bitSize, false);\n"
"      return function(offset, value, littleEndian) {\n"
"        setAligned.call(buf, 0, value, littleEndian);\n"
"        applyBits(this, buf, offset);\n"
"      };\n"
"    }\n"
"  }\n"
"\n"
"  const methodCache = {};\n"
"\n"
"  function cacheMethod(access, member, cb) {\n"
"    const { type, bitOffset, bitSize, structure } = member;\n"
"    const bitPos = bitOffset & 0x07;\n"
"    const typeName = getTypeName(member);\n"
"    const suffix = isByteAligned(member) ? `` : `Bit${bitPos}`;\n"
"    const isInt = type === MemberType.Int || type === MemberType.Uint;\n"
"    let name = `${access}${typeName}${suffix}`;\n"
"    let isSize = false, originalName = name;\n"
"    if (isInt && bitSize === 64) {\n"
"      const zigTypeName = structure?.name;\n"
"      if (zigTypeName === 'usize' || zigTypeName === 'isize') {\n"
"        name += 'Size';\n"
"        isSize = true;\n"
"      }\n"
"    }\n"
"    let fn = methodCache[name];\n"
"    if (!fn) {\n"
"      if (isInt && access === 'set') {\n"
"        // add auto-conversion between number and bigint\n"
"        const Primitive = getPrimitiveClass(member);\n"
"        const set = cb(originalName);\n"
"        fn = function(offset, value, littleEndian) {\n"
"          set.call(this, offset, Primitive(value), littleEndian);\n"
"        };\n"
"      } else if (isSize && access === 'get') {\n"
"        // use number instead of bigint where possible\n"
"        const get = cb(originalName);\n"
"        const min = BigInt(Number.MIN_SAFE_INTEGER);\n"
"        const max = BigInt(Number.MAX_SAFE_INTEGER);\n"
"        fn = function(offset, littleEndian) {\n"
"          const value = get.call(this, offset, littleEndian);\n"
"          if (min <= value && value <= max) {\n"
"            return Number(value);\n"
"          } else {\n"
"            return value;\n"
"          }\n"
"        };\n"
"      } else {\n"
"        fn = cb(name);\n"
"      }\n"
"      if (fn && fn.name !== name) {\n"
"        Object.defineProperty(fn, 'name', { value: name, configurable: true, writable: false });\n"
"      }\n"
"      methodCache[name] = fn;\n"
"    }\n"
"    return fn;\n"
"  }\n"
"\n"
"  function useAllExtendedTypes() {\n"
"    useExtendedBool();\n"
"    useExtendedInt();\n"
"    useExtendedUint();\n"
"    useExtendedFloat();\n"
"  }\n"
"\n"
"  function isReadOnly({ type }) {\n"
"    switch (type) {\n"
"      case MemberType.Type:\n"
"      case MemberType.Comptime:\n"
"      case MemberType.Literal:\n"
"        return true;\n"
"      default:\n"
"        return false;\n"
"    }\n"
"  }\n"
"\n"
"  const factories$1 = {};\n"
"\n"
"  function useVoid() {\n"
"    factories$1[MemberType.Void] = getVoidDescriptor;\n"
"  }\n"
"\n"
"  function useBool() {\n"
"    factories$1[MemberType.Bool] = getBoolDescriptor;\n"
"  }\n"
"\n"
"  function useInt() {\n"
"    factories$1[MemberType.Int] = getIntDescriptor;\n"
"  }\n"
"\n"
"  function useUint() {\n"
"    factories$1[MemberType.Uint] = getUintDescriptor;\n"
"  }\n"
"\n"
"  function useFloat() {\n"
"    factories$1[MemberType.Float] = getFloatDescriptor;\n"
"  }\n"
"\n"
"  function useObject() {\n"
"    factories$1[MemberType.Object] = getObjectDescriptor;\n"
"  }\n"
"\n"
"  function useType() {\n"
"    factories$1[MemberType.Type] = getTypeDescriptor;\n"
"  }\n"
"\n"
"  function useComptime() {\n"
"    factories$1[MemberType.Comptime] = getComptimeDescriptor;\n"
"  }\n"
"\n"
"  function useStatic() {\n"
"    factories$1[MemberType.Static] = getStaticDescriptor;\n"
"  }\n"
"\n"
"  function useLiteral() {\n"
"    factories$1[MemberType.Literal] = getLiteralDescriptor;\n"
"  }\n"
"\n"
"  function useNull() {\n"
"    factories$1[MemberType.Null] = getNullDescriptor;\n"
"  }\n"
"\n"
"  function useUndefined() {\n"
"    factories$1[MemberType.Undefined] = getUndefinedDescriptor;\n"
"  }\n"
"\n"
"  function useUnsupported() {\n"
"    factories$1[MemberType.Unsupported] = getUnsupportedDescriptor;\n"
"  }\n"
"\n"
"  const transformers = {};\n"
"\n"
"  function useEnumerationTransform() {\n"
"    transformers[StructureType.Enum] = transformEnumerationDescriptor;\n"
"  }\n"
"\n"
"  function useErrorSetTransform() {\n"
"    transformers[StructureType.ErrorSet] = transformErrorSetDescriptor;\n"
"  }\n"
"\n"
"  function getDescriptor(member, env) {\n"
"    const f = factories$1[member.type];\n"
"    return f(member, env);\n"
"  }\n"
"\n"
"  function transformDescriptor(descriptor, member) {\n"
"    const { structure } = member;\n"
"    const t = transformers[structure?.type];\n"
"    return (t) ? t(descriptor, structure) : descriptor;\n"
"  }\n"
"\n"
"  function getVoidDescriptor(member, env) {\n"
"    const { bitOffset } = member;\n"
"    return {\n"
"      get: function() {\n"
"        return undefined;\n"
"      },\n"
"      set: (bitOffset !== undefined)\n"
"      ? function(value) {\n"
"        if (value !== undefined) {\n"
"          throw new NotUndefined(member);\n"
"        }\n"
"      }\n"
"      : function(index, value) {\n"
"        if (value !== undefined) {\n"
"          throw new NotUndefined(member);\n"
"        }\n"
"        if (index < 0 || index >= this.length) {\n"
"          throw new OutOfBound(member, index);\n"
"        }\n"
"      },\n"
"    };\n"
"  }\n"
"\n"
"  function getNullDescriptor(member, env) {\n"
"    return {\n"
"      get: function() {\n"
"        return null;\n"
"      },\n"
"    };\n"
"  }\n"
"\n"
"  function getUndefinedDescriptor(member, env) {\n"
"    return {\n"
"      get: function() {\n"
"        return undefined;\n"
"      },\n"
"    };\n"
"  }\n"
"\n"
"  function getUnsupportedDescriptor(member, env) {\n"
"    const throwUnsupported = function() {\n"
"      throw new Unsupported();\n"
"    };\n"
"    return { get: throwUnsupported, set: throwUnsupported };\n"
"  }\n"
"\n"
"\n"
"  function getBoolDescriptor(member, env) {\n"
"    return getDescriptorUsing(member, env, getBoolAccessor)\n"
"  }\n"
"\n"
"  function getIntDescriptor(member, env) {\n"
"    const getDataViewAccessor = addRuntimeCheck(env, getNumericAccessor);\n"
"    const descriptor = getDescriptorUsing(member, env, getDataViewAccessor);\n"
"    return transformDescriptor(descriptor, member);\n"
"  }\n"
"\n"
"  function getUintDescriptor(member, env) {\n"
"    const getDataViewAccessor = addRuntimeCheck(env, getNumericAccessor);\n"
"    const descriptor = getDescriptorUsing(member, env, getDataViewAccessor);\n"
"    return transformDescriptor(descriptor, member);\n"
"  }\n"
"\n"
"  function addRuntimeCheck(env, getDataViewAccessor) {\n"
"    return function (access, member) {\n"
"      const {\n"
"        runtimeSafety = true,\n"
"      } = env;\n"
"      const accessor = getDataViewAccessor(access, member);\n"
"      if (runtimeSafety && access === 'set') {\n"
"        const { min, max } = getIntRange(member);\n"
"        return function(offset, value, littleEndian) {\n"
"          if (value < min || value > max) {\n"
"            throw new Overflow(member, value);\n"
"          }\n"
"          accessor.call(this, offset, value, littleEndian);\n"
"        };\n"
"      }\n"
"      return accessor;\n"
"    };\n"
"  }\n"
"\n"
"  function getFloatDescriptor(member, env) {\n"
"    return getDescriptorUsing(member, env, getNumericAccessor)\n"
"  }\n"
"\n"
"  function transformEnumerationDescriptor(int, structure) {\n"
"    const findEnum = function(value) {\n"
"      const { constructor } = structure;\n"
"      // the enumeration constructor returns the object for the int value\n"
"      const item = constructor(value);\n"
"      if (!item) {\n"
"        throw new EnumExpected(structure, value);\n"
"      }\n"
"      return item\n"
"    };\n"
"    return {\n"
"      get: (int.get.length === 0)\n"
"      ? function getEnum(hint) {\n"
"          const value = int.get.call(this);\n"
"          if (hint === 'number') {\n"
"            return value;\n"
"          }\n"
"          return findEnum(value);\n"
"        }\n"
"      : function getEnumElement(index) {\n"
"          const value = int.get.call(this, index);\n"
"          return findEnum(value);\n"
"        },\n"
"      set: (int.set.length === 1)\n"
"      ? function setEnum(value, hint) {\n"
"          if (hint !== 'number') {\n"
"            const item = findEnum(value);\n"
"            // call Symbol.toPrimitive directly as enum can be bigint or number\n"
"            value = item[Symbol.toPrimitive]();\n"
"          }\n"
"          int.set.call(this, value);\n"
"        }\n"
"      : function setEnumElement(index, value) {\n"
"          const item = findEnum(value);\n"
"          int.set.call(this, index, item[Symbol.toPrimitive]());\n"
"        },\n"
"    };\n"
"  }\n"
"\n"
"  function transformErrorSetDescriptor(int, structure) {\n"
"    const findError = function(value) {\n"
"      const { constructor } = structure;\n"
"      const item = constructor(value);\n"
"      if (!item) {\n"
"        if (value instanceof Error) {\n"
"          throw new NotInErrorSet(structure);\n"
"        } else {\n"
"          throw new ErrorExpected(structure, value);\n"
"        }\n"
"      }\n"
"      return item\n"
"    };\n"
"    return {\n"
"      get: (int.get.length === 0)\n"
"      ? function getError(hint) {\n"
"          const value = int.get.call(this);\n"
"          if (hint === 'number') {\n"
"            return value;\n"
"          }\n"
"          return findError(value);\n"
"        }\n"
"      : function getErrorElement(index) {\n"
"          const value = int.get.call(this, index);\n"
"          return findError(value);\n"
"        },\n"
"      set: (int.set.length === 1)\n"
"      ? function setError(value, hint) {\n"
"          if (hint !== 'number') {\n"
"            const item = findError(value);\n"
"            value = Number(item);\n"
"          }\n"
"          int.set.call(this, value);\n"
"        }\n"
"      : function setError(index, value) {\n"
"          const item = findError(value);\n"
"          value = Number(item);\n"
"          int.set.call(this, index, value);\n"
"        },\n"
"    };\n"
"  }\n"
"\n"
"  function isValueExpected(structure) {\n"
"    switch (structure?.type) {\n"
"      case StructureType.Primitive:\n"
"      case StructureType.ErrorUnion:\n"
"      case StructureType.Optional:\n"
"      case StructureType.Enum:\n"
"      case StructureType.ErrorSet:\n"
"        return true;\n"
"      default:\n"
"        return false;\n"
"    }\n"
"  }\n"
"\n"
"  function getValue(slot) {\n"
"    const object = this[SLOTS][slot] ?? this[VIVIFICATOR](slot);\n"
"    return object[GETTER]();\n"
"  }\n"
"\n"
"  function getObject(slot) {\n"
"    const object = this[SLOTS][slot] ?? this[VIVIFICATOR](slot);\n"
"    return object;\n"
"  }\n"
"\n"
"  function setValue(slot, value) {\n"
"    const object = this[SLOTS][slot] ?? this[VIVIFICATOR](slot);\n"
"    object[SETTER](value);\n"
"  }\n"
"\n"
"  function bindSlot(slot, { get, set }) {\n"
"    if (slot !== undefined) {\n"
"      return {\n"
"        get: function() {\n"
"          return get.call(this, slot);\n"
"        },\n"
"        set: (set)\n"
"        ? function(arg) {\n"
"            return set.call(this, slot, arg);\n"
"          }\n"
"        : undefined,\n"
"      };\n"
"    } else {\n"
"      // array accessors\n"
"      return { get, set };\n"
"    }\n"
"  }\n"
"\n"
"  function getObjectDescriptor(member, env) {\n"
"    const { structure, slot } = member;\n"
"    return bindSlot(slot, {\n"
"      get: isValueExpected(structure) ? getValue : getObject,\n"
"      set: setValue,\n"
"    });\n"
"  }\n"
"\n"
"  function getType(slot) {\n"
"    // unsupported types will have undefined structure\n"
"    const structure = this[SLOTS][slot];\n"
"    return structure?.constructor;\n"
"  }\n"
"\n"
"  function getTypeDescriptor(member, env) {\n"
"    const { slot } = member;\n"
"    return bindSlot(slot, { get: getType });\n"
"  }\n"
"\n"
"  function getComptimeDescriptor(member, env) {\n"
"    const { slot, structure } = member;\n"
"    return bindSlot(slot, {\n"
"      get: isValueExpected(structure) ? getValue : getObject,\n"
"    });\n"
"  }\n"
"\n"
"  function getStaticDescriptor(member, env) {\n"
"    const { slot, structure } = member;\n"
"    return bindSlot(slot, {\n"
"      get: isValueExpected(structure) ? getValue : getObject,\n"
"      set: setValue,\n"
"    });\n"
"  }\n"
"\n"
"  function getLiteral(slot) {\n"
"    const object = this[SLOTS][slot];\n"
"    return object.string;\n"
"  }\n"
"\n"
"  function getLiteralDescriptor(member, env) {\n"
"    const { slot } = member;\n"
"    return bindSlot(slot, { get: getLiteral });\n"
"  }\n"
"\n"
"  function getDescriptorUsing(member, env, getDataViewAccessor) {\n"
"    const {\n"
"      littleEndian = true,\n"
"    } = env;\n"
"    const { bitOffset, byteSize } = member;\n"
"    const getter = getDataViewAccessor('get', member);\n"
"    const setter = getDataViewAccessor('set', member);\n"
"    if (bitOffset !== undefined) {\n"
"      const offset = bitOffset >> 3;\n"
"      return {\n"
"        get: function getValue() {\n"
"            return getter.call(this[MEMORY], offset, littleEndian);\n"
"        },\n"
"        set: function setValue(value) {\n"
"          return setter.call(this[MEMORY], offset, value, littleEndian);\n"
"        }\n"
"      }\n"
"    } else {\n"
"      return {\n"
"        get: function getElement(index) {\n"
"          try {\n"
"            return getter.call(this[MEMORY], index * byteSize, littleEndian);\n"
"          } catch (err) {\n"
"              throw adjustRangeError(member, index, err);\n"
"          }\n"
"        },\n"
"        set: function setElement(index, value) {\n"
"            return setter.call(this[MEMORY], index * byteSize, value, littleEndian);\n"
"        },\n"
"      }\n"
"    }\n"
"  }\n"
"\n"
"  function useAllMemberTypes() {\n"
"    useVoid();\n"
"    useNull();\n"
"    useUndefined();\n"
"    useBool();\n"
"    useInt();\n"
"    useUint();\n"
"    useFloat();\n"
"    useExtendedBool();\n"
"    useExtendedInt();\n"
"    useExtendedUint();\n"
"    useExtendedFloat();\n"
"    useObject();\n"
"    useType();\n"
"    useComptime();\n"
"    useStatic();\n"
"    useLiteral();\n"
"    useUnsupported();\n"
"  }\n"
"\n"
"  function defineProperty(object, name, descriptor) {\n"
"    if (descriptor) {\n"
"      const {\n"
"        set,\n"
"        get,\n"
"        value,\n"
"        enumerable,\n"
"        configurable = true,\n"
"        writable = true,\n"
"      } = descriptor;\n"
"      Object.defineProperty(object, name, (get)\n"
"        ? { get, set, configurable, enumerable }\n"
"        : { value, configurable, enumerable, writable }\n"
"      );\n"
"    }\n"
"  }\n"
"\n"
"  function defineProperties(object, descriptors) {\n"
"    for (const [ name, descriptor ] of Object.entries(descriptors)) {\n"
"      defineProperty(object, name, descriptor);\n"
"    }\n"
"    for (const symbol of Object.getOwnPropertySymbols(descriptors)) {\n"
"      const descriptor = descriptors[symbol];\n"
"      defineProperty(object, symbol, descriptor);\n"
"    }\n"
"  }\n"
"\n"
"  function attachDescriptors(constructor, instanceDescriptors, staticDescriptors, env) {\n"
"    // create prototype for read-only objects\n"
"    const propSetters = {};\n"
"    for (const [ name, descriptor ] of Object.entries(instanceDescriptors)) {\n"
"      if (descriptor?.set) {\n"
"        // save the setters so we can initialize read-only objects\n"
"        if (name !== '$') {\n"
"          propSetters[name] = descriptor.set;\n"
"        }\n"
"      }\n"
"    }\n"
"    const { get, set } = instanceDescriptors.$;\n"
"    defineProperties(constructor.prototype, {\n"
"      [ALL_KEYS]: { value: Object.keys(propSetters) },\n"
"      [SETTER]: { value: set },\n"
"      [GETTER]: { value: get },\n"
"      [PROP_SETTERS]: { value: propSetters },\n"
"      [CONST_TARGET]: { value: null },\n"
"      ...instanceDescriptors,\n"
"    });\n"
"    defineProperties(constructor, staticDescriptors);\n"
"    return constructor;\n"
"  }\n"
"\n"
"  function makeReadOnly() {\n"
"    const descriptors = Object.getOwnPropertyDescriptors(this.constructor.prototype);\n"
"    for (const [ name, descriptor ] of Object.entries(descriptors)) {\n"
"      if (descriptor.set) {\n"
"        descriptor.set = throwReadOnly;\n"
"        Object.defineProperty(this, name, descriptor);\n"
"      }\n"
"    }\n"
"    Object.defineProperty(this, SETTER, { value: throwReadOnly });\n"
"    Object.defineProperty(this, CONST_TARGET, { value: this });\n"
"  }\n"
"\n"
"  function createConstructor(structure, handlers, env) {\n"
"    const {\n"
"      byteSize,\n"
"      align,\n"
"      instance: { members, template },\n"
"      hasPointer,\n"
"    } = structure;\n"
"    const {\n"
"      modifier,\n"
"      initializer,\n"
"      finalizer,\n"
"      alternateCaster,\n"
"      shapeDefiner,\n"
"    } = handlers;\n"
"    const hasSlots = needSlots(members);\n"
"    // comptime fields are stored in the instance template's slots\n"
"    let comptimeFieldSlots;\n"
"    if (template?.[SLOTS]) {\n"
"      const comptimeMembers = members.filter(m => isReadOnly(m));\n"
"      if (comptimeMembers.length > 0) {\n"
"        comptimeFieldSlots = comptimeMembers.map(m => m.slot);\n"
"      }\n"
"    }\n"
"    const cache = new ObjectCache();\n"
"    const constructor = function(arg, options = {}) {\n"
"      const {\n"
"        fixed = false,\n"
"      } = options;\n"
"      const creating = this instanceof constructor;\n"
"      let self, dv;\n"
"      if (creating) {\n"
"        if (arguments.length === 0) {\n"
"          throw new NoInitializer(structure);\n"
"        }\n"
"        self = this;\n"
"        if (hasSlots) {\n"
"          self[SLOTS] = {};\n"
"        }\n"
"        if (shapeDefiner) {\n"
"          // provided by defineSlice(); the slice is different from other structures as it does not have\n"
"          // a fixed size; memory is allocated by the slice initializer based on the argument given\n"
"          initializer.call(self, arg, fixed);\n"
"          dv = self[MEMORY];\n"
"        } else {\n"
"          self[MEMORY] = dv = env.allocateMemory(byteSize, align, fixed);\n"
"        }\n"
"      } else {\n"
"        if (alternateCaster) {\n"
"          // casting from number, string, etc.\n"
"          self = alternateCaster.call(this, arg, options);\n"
"          if (self !== false) {\n"
"            return self;\n"
"          }\n"
"        }\n"
"        // look for buffer\n"
"        dv = requireDataView(structure, arg, env);\n"
"        if (self = cache.find(dv)) {\n"
"          return self;\n"
"        }\n"
"        self = Object.create(constructor.prototype);\n"
"        if (shapeDefiner) {\n"
"          setDataView.call(self, dv, structure, false, false, { shapeDefiner });\n"
"        } else {\n"
"          self[MEMORY] = dv;\n"
"        }\n"
"        if (hasSlots) {\n"
"          self[SLOTS] = {};\n"
"        }\n"
"      }\n"
"      if (comptimeFieldSlots) {\n"
"        for (const slot of comptimeFieldSlots) {\n"
"          self[SLOTS][slot] = template[SLOTS][slot];\n"
"        }\n"
"      }\n"
"      if (modifier) {\n"
"        modifier.call(self);\n"
"      }\n"
"      if (creating) {\n"
"        // initialize object unless it's been done already\n"
"        if (!shapeDefiner) {\n"
"          initializer.call(self, arg);\n"
"        }\n"
"      }\n"
"      if (finalizer) {\n"
"        self = finalizer.call(self);\n"
"      }\n"
"      return cache.save(dv, self);\n"
"    };\n"
"    defineProperty(constructor, CACHE, { value: cache });\n"
"    return constructor;\n"
"  }\n"
"\n"
"  function copyPointer({ source }) {\n"
"    const target = source[SLOTS][0];\n"
"    if (target) {\n"
"      this[TARGET_SETTER](target);\n"
"    }\n"
"  }\n"
"\n"
"  function createPropertyApplier(structure) {\n"
"    const { instance: { template } } = structure;\n"
"    return function(arg, fixed) {\n"
"      const argKeys = Object.keys(arg);\n"
"      const propSetters = this[PROP_SETTERS];\n"
"      const allKeys = this[ALL_KEYS];\n"
"      // don't accept unknown props\n"
"      for (const key of argKeys) {\n"
"        if (!(key in propSetters)) {\n"
"          throw new NoProperty(structure, key);\n"
"        }\n"
"      }\n"
"      // checking each name so that we would see inenumerable initializers as well\n"
"      let normalCount = 0;\n"
"      let normalFound = 0;\n"
"      let normalMissing = 0;\n"
"      let specialFound = 0;\n"
"      for (const key of allKeys) {\n"
"        const set = propSetters[key];\n"
"        if (set.special) {\n"
"          if (key in arg) {\n"
"            specialFound++;\n"
"          }\n"
"        } else {\n"
"          normalCount++;\n"
"          if (key in arg) {\n"
"            normalFound++;\n"
"          } else if (set.required) {\n"
"            normalMissing++;\n"
"          }\n"
"        }\n"
"      }\n"
"      if (normalMissing !== 0 && specialFound === 0) {\n"
"        const missing = allKeys.filter(k => propSetters[k].required && !(k in arg));\n"
"        throw new MissingInitializers(structure, missing);\n"
"      }\n"
"      if (specialFound + normalFound > argKeys.length) {\n"
"        // some props aren't enumerable\n"
"        for (const key of allKeys) {\n"
"          if (key in arg) {\n"
"            if (!argKeys.includes(key)) {\n"
"              argKeys.push(key);\n"
"            }\n"
"          }\n"
"        }\n"
"      }\n"
"      // apply default values unless all properties are initialized\n"
"      if (normalFound < normalCount && specialFound === 0) {\n"
"        if (template) {\n"
"          if (template[MEMORY]) {\n"
"            this[COPIER](template);\n"
"          }\n"
"          this[POINTER_VISITOR]?.(copyPointer, { vivificate: true, source: template });\n"
"        }\n"
"      }\n"
"      for (const key of argKeys) {\n"
"        const set = propSetters[key];\n"
"        set.call(this, arg[key], fixed);\n"
"      }\n"
"      return argKeys.length;\n"
"    };\n"
"  }\n"
"\n"
"  function needSlots(members) {\n"
"    for (const { type } of members) {\n"
"      switch (type) {\n"
"        case MemberType.Object:\n"
"        case MemberType.Comptime:\n"
"        case MemberType.Type:\n"
"        case MemberType.Literal:\n"
"          return true;\n"
"      }\n"
"    }\n"
"    return false;\n"
"  }\n"
"\n"
"  function getSelf() {\n"
"    return this;\n"
"  }\n"
"\n"
"  class ObjectCache {\n"
"    map = new WeakMap();\n"
"\n"
"    find(dv) {\n"
"      return this.map.get(dv);\n"
"    }\n"
"\n"
"    save(dv, object) {\n"
"      this.map.set(dv, object);\n"
"      return object;\n"
"    }\n"
"  }\n"
"\n"
"  const decoders = {};\n"
"  const encoders = {};\n"
"\n"
"  function decodeText(arrays, encoding = 'utf-8') {\n"
"    let decoder = decoders[encoding];\n"
"    if (!decoder) {\n"
"      decoder = decoders[encoding] = new TextDecoder(encoding);\n"
"    }\n"
"    let array;\n"
"    if (Array.isArray(arrays)) {\n"
"      if (arrays.length === 1) {\n"
"        array = arrays[0];\n"
"      } else {\n"
"        let len = 0;\n"
"        for (const a of arrays) {\n"
"          len += a.length;\n"
"        }\n"
"        const { constructor } = arrays[0];\n"
"        array = new constructor(len);\n"
"        let offset = 0;\n"
"        for (const a of arrays) {\n"
"          array.set(a, offset);\n"
"          offset += a.length;\n"
"        }\n"
"      }\n"
"    } else {\n"
"      array = arrays;\n"
"    }\n"
"    return decoder.decode(array);\n"
"  }\n"
"\n"
"  function encodeText(text, encoding = 'utf-8') {\n"
"    switch (encoding) {\n"
"      case 'utf-16': {\n"
"        const { length } = text;\n"
"        const ta = new Uint16Array(length);\n"
"        for (let i = 0; i < length; i++) {\n"
"          ta[i] = text.charCodeAt(i);\n"
"        }\n"
"        return ta;\n"
"      }\n"
"      default: {\n"
"        let encoder = encoders[encoding];\n"
"        if (!encoder) {\n"
"          encoder = encoders[encoding] = new TextEncoder();\n"
"        }\n"
"        return encoder.encode(text);\n"
"      }\n"
"    }\n"
"  }\n"
"\n"
"  function encodeBase64(dv) {\n"
"    /* NODE-ONLY */\n"
"    if (typeof(Buffer) === 'function' && Buffer.prototype instanceof Uint8Array) {\n"
"      return Buffer.from(dv.buffer, dv.byteOffset, dv.byteLength).toString('base64');\n"
"    }\n"
"    /* NODE-ONLY-END */\n"
"    const ta = new Uint8Array(dv.buffer, dv.byteOffset, dv.byteLength);\n"
"    const bstr = String.fromCharCode.apply(null, ta);\n"
"    return btoa(bstr);\n"
"  }\n"
"\n"
"  function decodeBase64(str) {\n"
"    /* NODE-ONLY */\n"
"    if (typeof(Buffer) === 'function' && Buffer.prototype instanceof Uint8Array) {\n"
"      const b = Buffer.from(str, 'base64');\n"
"      return new DataView(b.buffer, b.byteOffset, b.byteLength);\n"
"    }\n"
"    /* NODE-ONLY-END */\n"
"    const bstr = atob(str);\n"
"    const ta = new Uint8Array(bstr.length);\n"
"    for (let i = 0; i < ta.byteLength; i++) {\n"
"      ta[i] = bstr.charCodeAt(i);\n"
"    }\n"
"    return new DataView(ta.buffer);\n"
"  }\n"
"\n"
"  function getValueOf() {\n"
"    return normalizeObject(this, false);\n"
"  }\n"
"\n"
"  function convertToJSON() {\n"
"    return normalizeObject(this, true);\n"
"  }\n"
"\n"
"  const INT_MAX = BigInt(Number.MAX_SAFE_INTEGER);\n"
"  const INT_MIN = BigInt(Number.MIN_SAFE_INTEGER);\n"
"\n"
"  function normalizeObject(object, forJSON) {\n"
"    const error = (forJSON) ? 'return' : 'throw';\n"
"    const resultMap = new Map();\n"
"    const process = function(value) {\n"
"      // handle type (i.e. constructor) like a struct\n"
"      const type = (typeof(value) === 'function') ? StructureType.Struct : value?.constructor?.[TYPE];\n"
"      if (type === undefined) {\n"
"        if (forJSON) {\n"
"          if (typeof(value) === 'bigint' && INT_MIN <= value && value <= INT_MAX) {\n"
"            return Number(value);\n"
"          } else if (value instanceof Error) {\n"
"            return { error: value.message };\n"
"          }\n"
"        }\n"
"        return value;\n"
"      }\n"
"      let result = resultMap.get(value);\n"
"      if (result === undefined) {\n"
"        let entries;\n"
"        switch (type) {\n"
"          case StructureType.Struct:\n"
"          case StructureType.PackedStruct:\n"
"          case StructureType.ExternStruct:\n"
"          case StructureType.TaggedUnion:\n"
"          case StructureType.BareUnion:\n"
"          case StructureType.ExternUnion:\n"
"            entries = value[ENTRIES_GETTER]?.({ error });\n"
"            result = value.constructor[TUPLE] ? [] : {};\n"
"            break;\n"
"          case StructureType.Array:\n"
"          case StructureType.Vector:\n"
"          case StructureType.Slice:\n"
"            entries = value[ENTRIES_GETTER]?.({ error });\n"
"            result = [];\n"
"            break;\n"
"          case StructureType.SinglePointer:\n"
"          case StructureType.SlicePointer:\n"
"          case StructureType.MultiPointer:\n"
"          case StructureType.CPointer:\n"
"            try {\n"
"              result = value['*'];\n"
"            } catch (err) {\n"
"              result = Symbol.for('inaccessible');\n"
"            }\n"
"            break;\n"
"          case StructureType.Enum:\n"
"            result = handleError(() => String(value), { error });\n"
"            break;\n"
"          case StructureType.Opaque:\n"
"            result = {};\n"
"            break;\n"
"          default:\n"
"            result = handleError(() => value.$, { error });\n"
"        }\n"
"        result = process(result);\n"
"        resultMap.set(value, result);\n"
"        if (entries) {\n"
"          for (const [ key, child ] of entries) {\n"
"            result[key] = process(child);\n"
"          }\n"
"        }\n"
"      }\n"
"      return result;\n"
"    };\n"
"    return process(object);\n"
"  }\n"
"\n"
"  function handleError(cb, options = {}) {\n"
"    const { error = 'throw' } = options;\n"
"    try {\n"
"      return cb();\n"
"    } catch (err) {\n"
"      if (error === 'return') {\n"
"        return err;\n"
"      } else {\n"
"        throw err;\n"
"      }\n"
"    }\n"
"  }\n"
"\n"
"  function getDataViewDescriptor(structure, handlers = {}) {\n"
"    return markAsSpecial({\n"
"      get() {\n"
"        return this[MEMORY];\n"
"      },\n"
"      set(dv, fixed) {\n"
"        checkDataView(dv);\n"
"        setDataView.call(this, dv, structure, true, fixed, handlers);\n"
"      },\n"
"    });\n"
"  }\n"
"\n"
"  function getBase64Descriptor(structure, handlers = {}) {\n"
"    return markAsSpecial({\n"
"      get() {\n"
"        return encodeBase64(this.dataView);\n"
"      },\n"
"      set(str, fixed) {\n"
"        if (typeof(str) !== 'string') {\n"
"          throw new TypeMismatch('string', str);\n"
"        }\n"
"        const dv = decodeBase64(str);\n"
"        setDataView.call(this, dv, structure, false, fixed, handlers);\n"
"      }\n"
"    });\n"
"  }\n"
"\n"
"  function getStringDescriptor(structure, handlers = {}) {\n"
"    const { sentinel, instance: { members }} = structure;\n"
"    const { byteSize: charSize } = members[0];\n"
"    return markAsSpecial({\n"
"      get() {\n"
"        const dv = this.dataView;\n"
"        const TypedArray = (charSize === 1) ? Int8Array : Int16Array;\n"
"        const ta = new TypedArray(dv.buffer, dv.byteOffset, this.length);\n"
"        let str = decodeText(ta, `utf-${charSize * 8}`);\n"
"        if (sentinel?.value !== undefined) {\n"
"          if (str.charCodeAt(str.length - 1) === sentinel.value) {\n"
"            str = str.slice(0, -1);\n"
"          }\n"
"        }\n"
"        return str;\n"
"      },\n"
"      set(str, fixed) {\n"
"        if (typeof(str) !== 'string') {\n"
"          throw new TypeMismatch('a string', str);\n"
"        }\n"
"        if (sentinel?.value !== undefined) {\n"
"          if (str.charCodeAt(str.length - 1) !== sentinel.value) {\n"
"            str = str + String.fromCharCode(sentinel.value);\n"
"          }\n"
"        }\n"
"        const ta = encodeText(str, `utf-${charSize * 8}`);\n"
"        const dv = new DataView(ta.buffer);\n"
"        setDataView.call(this, dv, structure, false, fixed, handlers);\n"
"      },\n"
"    });\n"
"  }\n"
"\n"
"  function getTypedArrayDescriptor(structure, handlers = {}) {\n"
"    const { typedArray } = structure;\n"
"    return markAsSpecial({\n"
"      get() {\n"
"        const dv = this.dataView;\n"
"        const length = dv.byteLength / typedArray.BYTES_PER_ELEMENT;\n"
"        return new typedArray(dv.buffer, dv.byteOffset, length);\n"
"      },\n"
"      set(ta, fixed) {\n"
"        if (!isTypedArray(ta, typedArray)) {\n"
"          throw new TypeMismatch(typedArray.name, ta);\n"
"        }\n"
"        const dv = new DataView(ta.buffer, ta.byteOffset, ta.byteLength);\n"
"        setDataView.call(this, dv, structure, true, fixed, handlers);\n"
"      },\n"
"    });\n"
"  }\n"
"\n"
"  function markAsSpecial({ get, set }) {\n"
"    get.special = set.special = true;\n"
"    return { get, set };\n"
"  }\n"
"\n"
"  function definePointer(structure, env) {\n"
"    const {\n"
"      type,\n"
"      byteSize,\n"
"      align,\n"
"      instance: { members: [ member ] },\n"
"      isConst,\n"
"    } = structure;\n"
"    const {\n"
"      runtimeSafety = true,\n"
"    } = env;\n"
"    const { structure: targetStructure } = member;\n"
"    const { type: targetType, sentinel, byteSize: elementSize } = targetStructure;\n"
"    // length for slice can be zero or undefined\n"
"    const hasLengthInMemory = type === StructureType.SlicePointer;\n"
"    const addressSize = (hasLengthInMemory) ? byteSize / 2 : byteSize;\n"
"    const { get: getAddressInMemory, set: setAddressInMemory } = getDescriptor({\n"
"      type: MemberType.Uint,\n"
"      bitOffset: 0,\n"
"      bitSize: addressSize * 8,\n"
"      byteSize: addressSize,\n"
"      structure: { byteSize: addressSize },\n"
"    }, env);\n"
"    const { get: getLengthInMemory, set: setLengthInMemory } = (hasLengthInMemory) ? getDescriptor({\n"
"      type: MemberType.Uint,\n"
"      bitOffset: addressSize * 8,\n"
"      bitSize: addressSize * 8,\n"
"      byteSize: addressSize,\n"
"      structure: { name: 'usize', byteSize: addressSize },\n"
"    }, env) : {};\n"
"    const updateTarget = function(all = true, active = true) {\n"
"      if (all || this[MEMORY][FIXED]) {\n"
"        if (active) {\n"
"          const address = getAddressInMemory.call(this);\n"
"          const length = (hasLengthInMemory)\n"
"          ? getLengthInMemory.call(this)\n"
"          : (sentinel?.isRequired)\n"
"            ? env.findSentinel(address, sentinel.bytes) + 1\n"
"            : 1;\n"
"          if (address !== this[ADDRESS] || length !== this[LENGTH]) {\n"
"            const Target = targetStructure.constructor;\n"
"            const dv = env.findMemory(address, length, Target[SIZE]);\n"
"            const newTarget = (dv) ? Target.call(ENVIRONMENT, dv) : null;\n"
"            this[SLOTS][0] = newTarget;\n"
"            this[ADDRESS] = address;\n"
"            this[LENGTH] = length;\n"
"            if (hasLengthInMemory) {\n"
"              this[MAX_LENGTH] = length;\n"
"            }\n"
"            return newTarget;\n"
"          }\n"
"        } else {\n"
"          return this[SLOTS][0] = undefined;\n"
"        }\n"
"      }\n"
"      return this[SLOTS][0];\n"
"    };\n"
"    const setAddress = function(address) {\n"
"      setAddressInMemory.call(this, address);\n"
"      this[ADDRESS] = address;\n"
"    };\n"
"    const setLength = (hasLengthInMemory || sentinel)\n"
"    ? function(length) {\n"
"        setLengthInMemory?.call?.(this, length);\n"
"        this[LENGTH] = length;\n"
"      }\n"
"    : null;\n"
"    const getTargetObject = function() {\n"
"      const pointer = this[POINTER] ?? this;\n"
"      const target = updateTarget.call(pointer, false);\n"
"      if (!target) {\n"
"        throw new NullPointer();\n"
"      }\n"
"      return (isConst) ? getConstProxy(target) : target;\n"
"    };\n"
"    const setTargetObject = function(arg) {\n"
"      const pointer = this[POINTER] ?? this;\n"
"      // the target sits in fixed memory--apply the change immediately\n"
"      if (arg[MEMORY][FIXED]) {\n"
"        const address = env.getViewAddress(arg[MEMORY]);\n"
"        setAddress.call(this, address);\n"
"        if (hasLengthInMemory) {\n"
"          setLength.call(this, arg.length);\n"
"        }\n"
"      } else {\n"
"        if (pointer[MEMORY][FIXED]) {\n"
"          throw new FixedMemoryTargetRequired(structure, arg);\n"
"        }\n"
"      }\n"
"      pointer[SLOTS][0] = arg;\n"
"      if (hasLengthInMemory) {\n"
"        pointer[MAX_LENGTH] = arg.length;\n"
"      }\n"
"    };\n"
"    const getTarget = isValueExpected(targetStructure)\n"
"    ? function() {\n"
"        const target = getTargetObject.call(this);\n"
"        return target[GETTER]();\n"
"      }\n"
"    : getTargetObject;\n"
"    const setTarget = !isConst\n"
"    ? function(value) {\n"
"        const target = getTargetObject.call(this);\n"
"        return target[SETTER](value);\n"
"      }\n"
"    : throwReadOnly;\n"
"    const getTargetLength = function() {\n"
"      const target = getTargetObject.call(this);\n"
"      return target.length;\n"
"    };\n"
"    const setTargetLength = function(len) {\n"
"      len = len | 0;\n"
"      const target = getTargetObject.call(this);\n"
"      const dv = target[MEMORY];\n"
"      const fixed = dv[FIXED];\n"
"      const bytesAvailable = dv.buffer.byteLength - dv.byteOffset;\n"
"      // determine the maximum length\n"
"      let max;\n"
"      if (!fixed) {\n"
"        if (hasLengthInMemory) {\n"
"          max = this[MAX_LENGTH];\n"
"        } else {\n"
"          max = (bytesAvailable / elementSize) | 0;\n"
"        }\n"
"      }\n"
"      if (len < 0 || len > max) {\n"
"        throw new InvalidSliceLength(len, max);\n"
"      }\n"
"      const byteLength = len * elementSize;\n"
"      const newDV = (byteLength <= bytesAvailable)\n"
"      // can use the same buffer\n"
"      ? env.obtainView(dv.buffer, dv.byteOffset, byteLength)\n"
"      // need to ask V8 for a larger external buffer\n"
"      : env.obtainFixedView(fixed.address, byteLength);\n"
"      const Target = targetStructure.constructor;\n"
"      this[SLOTS][0] = Target.call(ENVIRONMENT, newDV);\n"
"      if (hasLengthInMemory) {\n"
"        setLength?.call(this, len);\n"
"      }\n"
"    };\n"
"    const alternateCaster = function(arg, options) {\n"
"      const Target = targetStructure.constructor;\n"
"      if ((this === ENVIRONMENT || this === PARENT) || arg instanceof constructor) {\n"
"        // casting from buffer to pointer is allowed only if request comes from the runtime\n"
"        // casting from writable to read-only is also allowed\n"
"        return false;\n"
"      } else if (isPointerOf(arg, Target)) {\n"
"        // const/non-const casting\n"
"        return new constructor(Target(arg['*']), options);\n"
"      } else if (isCompatiblePointer(arg, Target, type)) {\n"
"        // casting between C/multi/slice pointers\n"
"        return new constructor(arg);\n"
"      } else if (targetType === StructureType.Slice) {\n"
"        // allow casting to slice through constructor of its pointer\n"
"        return new constructor(Target(arg), options);\n"
"      } else {\n"
"        throw new NoCastingToPointer(structure);\n"
"      }\n"
"    };\n"
"    const finalizer = function() {\n"
"      const handlers = isPointer(targetType) ? {} : proxyHandlers$1;\n"
"      const proxy = new Proxy(this, handlers);\n"
"      // hide the proxy so console wouldn't display a recursive structure\n"
"      Object.defineProperty(this, PROXY, { value: proxy });\n"
"      return proxy;\n"
"    };\n"
"    const initializer = function(arg) {\n"
"      const Target = targetStructure.constructor;\n"
"      if (isPointerOf(arg, Target)) {\n"
"        // initialize with the other pointer'structure target\n"
"        if (!isConst && arg.constructor.const) {\n"
"          throw new ConstantConstraint(structure, arg);\n"
"        }\n"
"        arg = arg[SLOTS][0];\n"
"      } else if (type != StructureType.SinglePointer) {\n"
"        if (isCompatiblePointer(arg, Target, type)) {\n"
"          arg = Target.child(arg[SLOTS][0][MEMORY]);\n"
"        }\n"
"      }\n"
"      if (arg instanceof Target) {\n"
"        const constTarget = arg[CONST_TARGET];\n"
"        if (constTarget) {\n"
"          if (isConst) {\n"
"            arg = constTarget;\n"
"          } else {\n"
"            throw new ReadOnlyTarget(structure);\n"
"          }\n"
"        }\n"
"      } else if (type === StructureType.CPointer && arg instanceof Target.child) {\n"
"        arg = Target(arg[MEMORY]);\n"
"      } else if (isCompatibleBuffer(arg, Target)) {\n"
"        // autocast to target type\n"
"        const dv = getDataView(targetStructure, arg, env);\n"
"        arg = Target(dv);\n"
"      } else if (arg !== undefined && !arg[MEMORY]) {\n"
"        if (type === StructureType.CPointer) {\n"
"          if (typeof(arg) === 'object' && !arg[Symbol.iterator]) {\n"
"            let single = true;\n"
"            // make sure the object doesn't contain special props for the slice\n"
"            const propSetters = Target.prototype[PROP_SETTERS];\n"
"            for (const key of Object.keys(arg)) {\n"
"              const set = propSetters[key];\n"
"              if (set?.special) {\n"
"                single = false;\n"
"                break;\n"
"              }\n"
"            }\n"
"            if (single) {\n"
"              arg = [ arg ];\n"
"            }\n"
"          }\n"
"        }\n"
"        // autovivificate target object\n"
"        const autoObj = new Target(arg, { fixed: !!this[MEMORY][FIXED] });\n"
"        if (runtimeSafety) {\n"
"          // creation of a new slice using a typed array is probably\n"
"          // not what the user wants; it's more likely that the intention\n"
"          // is to point to the typed array but there's a mismatch (e.g. u32 vs i32)\n"
"          if (targetStructure.typedArray) {\n"
"            const tag = arg?.buffer?.[Symbol.toStringTag];\n"
"            if (tag === 'ArrayBuffer' || tag === 'SharedArrayBuffer') {\n"
"              warnImplicitArrayCreation(targetStructure, arg);\n"
"            }\n"
"          }\n"
"        }\n"
"        arg = autoObj;\n"
"      } else if (arg !== undefined) {\n"
"        console.log({ isCompatiblePointer: isCompatiblePointer(arg, Target, type) });\n"
"        throw new InvalidPointerTarget(structure, arg);\n"
"      }\n"
"      this[TARGET_SETTER](arg);\n"
"    };\n"
"    const getTargetPrimitive = (targetType === StructureType.Primitive)\n"
"    ? function(hint) {\n"
"        const target = this[TARGET_GETTER]();\n"
"        return target[Symbol.toPrimitive](hint);\n"
"      }\n"
"    : null;\n"
"    const getSliceOf = (targetType === StructureType.Slice)\n"
"    ? function(begin, end) {\n"
"        const target = this[TARGET_GETTER]();\n"
"        const newTarget = target.slice(begin, end);\n"
"        return new constructor(newTarget);\n"
"      }\n"
"    : null;\n"
"    const getSubarrayOf = (targetType === StructureType.Slice)\n"
"    ? function(begin, end, options) {\n"
"        const target = this[TARGET_GETTER]();\n"
"        const newTarget = target.subarray(begin, end, options);\n"
"        return new constructor(newTarget);\n"
"      }\n"
"    : null;\n"
"    const constructor = structure.constructor = createConstructor(structure, { initializer, alternateCaster, finalizer }, env);\n"
"    const instanceDescriptors = {\n"
"      '*': { get: getTarget, set: setTarget },\n"
"      '$': { get: getProxy, set: initializer },\n"
"      length: { get: getTargetLength, set: setTargetLength },\n"
"      valueOf: { value: getValueOf },\n"
"      toJSON: { value: convertToJSON },\n"
"      delete: { value: deleteTarget },\n"
"      slice: getSliceOf && { value: getSliceOf },\n"
"      subarray: getSubarrayOf && { value: getSubarrayOf },\n"
"      [Symbol.toPrimitive]: getTargetPrimitive && { value: getTargetPrimitive },\n"
"      [TARGET_GETTER]: { value: getTargetObject },\n"
"      [TARGET_SETTER]: { value: setTargetObject },\n"
"      [TARGET_UPDATER]: { value: updateTarget },\n"
"      [ADDRESS_SETTER]: { value: setAddress },\n"
"      [LENGTH_SETTER]: setLength && { value: setLength },\n"
"      [POINTER_VISITOR]: { value: visitPointer },\n"
"      [COPIER]: { value: getMemoryCopier(byteSize) },\n"
"      [WRITE_DISABLER]: { value: makePointerReadOnly },\n"
"      [ADDRESS]: { value: undefined, writable: true },\n"
"      [LENGTH]: setLength && { value: undefined, writable: true },\n"
"    };\n"
"    const staticDescriptors = {\n"
"      child: { get: () => targetStructure.constructor },\n"
"      const: { value: isConst },\n"
"      [ALIGN]: { value: align },\n"
"      [SIZE]: { value: byteSize },\n"
"      [TYPE]: { value: structure.type },\n"
"    };\n"
"    return attachDescriptors(constructor, instanceDescriptors, staticDescriptors);\n"
"  }\n"
"\n"
"  function makePointerReadOnly() {\n"
"    const pointer = this[POINTER];\n"
"    const descriptor = Object.getOwnPropertyDescriptor(pointer.constructor.prototype, '$');\n"
"    descriptor.set = throwReadOnly;\n"
"    Object.defineProperty(pointer, '$', descriptor);\n"
"    Object.defineProperty(pointer, CONST_TARGET, { value: pointer });\n"
"  }\n"
"\n"
"  function deleteTarget() {\n"
"    const target = this[TARGET_GETTER]();\n"
"    target?.delete();\n"
"  }\n"
"\n"
"  function getProxy() {\n"
"    return this[PROXY];\n"
"  }\n"
"\n"
"  function resetPointer({ isActive }) {\n"
"    if (this[SLOTS][0] && !isActive(this)) {\n"
"      this[SLOTS][0] = undefined;\n"
"    }\n"
"  }\n"
"\n"
"  function disablePointer() {\n"
"    const throwError = () => { throw new InaccessiblePointer() };\n"
"    const disabledProp = { get: throwError, set: throwError };\n"
"    const disabledFunc = { value: throwError };\n"
"    defineProperties(this[POINTER], {\n"
"      '*': disabledProp,\n"
"      '$': disabledProp,\n"
"      [GETTER]: disabledFunc,\n"
"      [SETTER]: disabledFunc,\n"
"      [TARGET_GETTER]: disabledFunc,\n"
"    });\n"
"  }\n"
"\n"
"  function visitPointer(fn, options = {}) {\n"
"    const {\n"
"      source,\n"
"      isActive = always,\n"
"      isMutable = always,\n"
"    } = options;\n"
"    fn.call(this, { source, isActive, isMutable });\n"
"  }\n"
"\n"
"  function isPointerOf(arg, Target) {\n"
"    return (arg?.constructor?.child === Target && arg['*']);\n"
"  }\n"
"\n"
"  function isCompatiblePointer(arg, Target, type) {\n"
"    if (type !== StructureType.SinglePointer) {\n"
"      if (arg?.constructor?.child?.child === Target.child && arg['*']) {\n"
"        return true;\n"
"      } else if (type === StructureType.CPointer && isPointerOf(arg, Target.child)) {\n"
"        return true;\n"
"      }\n"
"    }\n"
"    return false;\n"
"  }\n"
"\n"
"  function getConstProxy(target) {\n"
"    let proxy = target[CONST_PROXY];\n"
"    if (!proxy) {\n"
"      Object.defineProperty(target, CONST_PROXY, { value: undefined, configurable: true });\n"
"      proxy = new Proxy(target, constTargetHandlers);\n"
"      Object.defineProperty(target, CONST_PROXY, { value: proxy });\n"
"    }\n"
"    return proxy;\n"
"  }\n"
"\n"
"  const proxyHandlers$1 = {\n"
"    get(pointer, name) {\n"
"      if (name === POINTER) {\n"
"        return pointer;\n"
"      } else if (name in pointer) {\n"
"        return pointer[name];\n"
"      } else {\n"
"        const target = pointer[TARGET_GETTER]();\n"
"        return target[name];\n"
"      }\n"
"    },\n"
"    set(pointer, name, value) {\n"
"      if (name in pointer) {\n"
"        pointer[name] = value;\n"
"      } else {\n"
"        const target = pointer[TARGET_GETTER]();\n"
"        target[name] = value;\n"
"      }\n"
"      return true;\n"
"    },\n"
"    deleteProperty(pointer, name) {\n"
"      if (name in pointer) {\n"
"        delete pointer[name];\n"
"      } else {\n"
"        const target = pointer[TARGET_GETTER]();\n"
"        delete target[name];\n"
"      }\n"
"      return true;\n"
"    },\n"
"    has(pointer, name) {\n"
"      if (name in pointer) {\n"
"        return true;\n"
"      } else {\n"
"        const target = pointer[TARGET_GETTER]();\n"
"        return name in target;\n"
"      }\n"
"    },\n"
"  };\n"
"\n"
"  const constTargetHandlers = {\n"
"    get(target, name) {\n"
"      if (name === CONST_TARGET) {\n"
"        return target;\n"
"      } else {\n"
"        const value = target[name];\n"
"        if (value?.[CONST_TARGET] === null) {\n"
"          return getConstProxy(value);\n"
"        }\n"
"        return value;\n"
"      }\n"
"    },\n"
"    set(target, name, value) {\n"
"      const ptr = target[POINTER];\n"
"      if (ptr && !(name in ptr)) {\n"
"        target[name] = value;\n"
"      } else {\n"
"        throwReadOnly();\n"
"      }\n"
"      return true;\n"
"    }\n"
"  };\n"
"\n"
"  function always() {\n"
"    return true;\n"
"  }\n"
"\n"
"  function never() {\n"
"    return false;\n"
"  }\n"
"\n"
"  function defineVector(structure, env) {\n"
"    const {\n"
"      length,\n"
"      byteSize,\n"
"      align,\n"
"      instance: { members: [ member ] },\n"
"    } = structure;\n"
"    const { bitSize: elementBitSize, structure: elementStructure } = member;\n"
"    const elementDescriptors = {};\n"
"    for (let i = 0, bitOffset = 0; i < length; i++, bitOffset += elementBitSize) {\n"
"      const { get, set } = getDescriptor({ ...member, bitOffset }, env);\n"
"      elementDescriptors[i] = { get, set, configurable: true };\n"
"    }\n"
"    const propApplier = createPropertyApplier(structure);\n"
"    const initializer = function(arg) {\n"
"      if (arg instanceof constructor) {\n"
"        this[COPIER](arg);\n"
"      } else if (arg?.[Symbol.iterator]) {\n"
"        let argLen = arg.length;\n"
"        if (typeof(argLen) !== 'number') {\n"
"          arg = [ ...arg ];\n"
"          argLen = arg.length;\n"
"        }\n"
"        if (argLen !== length) {\n"
"          throw new ArrayLengthMismatch(structure, this, arg);\n"
"        }\n"
"        let i = 0;\n"
"        for (const value of arg) {\n"
"          this[PROP_SETTERS][i++].call(this, value);\n"
"        }\n"
"      } else if (arg && typeof(arg) === 'object') {\n"
"        if (propApplier.call(this, arg) === 0) {\n"
"          throw new InvalidArrayInitializer(structure, arg);\n"
"        }\n"
"      } else if (arg !== undefined) {\n"
"        throw new InvalidArrayInitializer(structure, arg);\n"
"      }\n"
"    };\n"
"    const constructor = structure.constructor = createConstructor(structure, { initializer }, env);\n"
"    const typedArray = structure.typedArray = getTypedArrayClass(member);\n"
"    const instanceDescriptors = {\n"
"      ...elementDescriptors,\n"
"      $: { get: getSelf, set: initializer },\n"
"      length: { value: length },\n"
"      dataView: getDataViewDescriptor(structure),\n"
"      base64: getBase64Descriptor(structure),\n"
"      typedArray: typedArray && getTypedArrayDescriptor(structure),\n"
"      valueOf: { value: getValueOf },\n"
"      toJSON: { value: convertToJSON },\n"
"      entries: { value: getVectorEntries },\n"
"      delete: { value: getDestructor(structure) },\n"
"      [Symbol.iterator]: { value: getVectorIterator },\n"
"      [ENTRIES_GETTER]: { value: getVectorEntries },\n"
"      [COPIER]: { value: getMemoryCopier(byteSize) },\n"
"      [WRITE_DISABLER]: { value: makeReadOnly },\n"
"    };\n"
"    const staticDescriptors = {\n"
"      child: { get: () => elementStructure.constructor },\n"
"      [COMPAT]: { value: getCompatibleTags(structure) },\n"
"      [ALIGN]: { value: align },\n"
"      [SIZE]: { value: byteSize },\n"
"      [TYPE]: { value: structure.type },\n"
"    };\n"
"    return attachDescriptors(constructor, instanceDescriptors, staticDescriptors);\n"
"  }\n"
"\n"
"  function getVectorIterator() {\n"
"    const self = this;\n"
"    const length = this.length;\n"
"    let index = 0;\n"
"    return {\n"
"      next() {\n"
"        let value, done;\n"
"        if (index < length) {\n"
"          const current = index++;\n"
"          value = self[current];\n"
"          done = false;\n"
"        } else {\n"
"          done = true;\n"
"        }\n"
"        return { value, done };\n"
"      },\n"
"    };\n"
"  }\n"
"\n"
"  function getVectorEntriesIterator() {\n"
"    const self = this;\n"
"    const length = this.length;\n"
"    let index = 0;\n"
"    return {\n"
"      next() {\n"
"        let value, done;\n"
"        if (index < length) {\n"
"          const current = index++;\n"
"          value = [ current, self[current] ];\n"
"          done = false;\n"
"        } else {\n"
"          done = true;\n"
"        }\n"
"        return { value, done };\n"
"      },\n"
"    };\n"
"  }\n"
"\n"
"  function getVectorEntries() {\n"
"    return {\n"
"      [Symbol.iterator]: getVectorEntriesIterator.bind(this),\n"
"      length: this.length,\n"
"    };\n"
"  }\n"
"\n"
"  function defineStructShape(structure, env) {\n"
"    const {\n"
"      byteSize,\n"
"      align,\n"
"      instance: { members },\n"
"      isTuple,\n"
"      isIterator,\n"
"      hasPointer,\n"
"    } = structure;\n"
"    const memberDescriptors = {};\n"
"    const fieldMembers = members.filter(m => !!m.name);\n"
"    const backingIntMember = members.find(m => !m.name);\n"
"    for (const member of fieldMembers) {\n"
"      const { get, set } = getDescriptor(member, env);\n"
"      memberDescriptors[member.name] = { get, set, configurable: true, enumerable: true };\n"
"      if (member.isRequired && set) {\n"
"        set.required = true;\n"
"      }\n"
"    }\n"
"    const backingInt = (backingIntMember) ? getDescriptor(backingIntMember, env) : null;\n"
"    const hasObject = !!members.find(m => m.type === MemberType.Object);\n"
"    const propApplier = createPropertyApplier(structure);\n"
"    const initializer = function(arg) {\n"
"      if (arg instanceof constructor) {\n"
"        this[COPIER](arg);\n"
"        if (hasPointer) {\n"
"          this[POINTER_VISITOR](copyPointer, { vivificate: true, source: arg });\n"
"        }\n"
"      } else if (arg && typeof(arg) === 'object') {\n"
"        propApplier.call(this, arg);\n"
"      } else if ((typeof(arg) === 'number' || typeof(arg) === 'bigint') && backingInt) {\n"
"        backingInt.set.call(this, arg);\n"
"      } else if (arg !== undefined) {\n"
"        throw new InvalidInitializer(structure, 'object', arg);\n"
"      }\n"
"    };\n"
"    const constructor = structure.constructor = createConstructor(structure, { initializer }, env);\n"
"    const toPrimitive = (backingInt)\n"
"    ? function(hint) {\n"
"      switch (hint) {\n"
"        case 'string':\n"
"          return Object.prototype.toString.call(this);\n"
"        default:\n"
"          return backingInt.get.call(this);\n"
"      }\n"
"    }\n"
"    : null;\n"
"    const length = (isTuple && members.length > 0)\n"
"    ? parseInt(members[members.length - 1].name) + 1\n"
"    : 0;\n"
"    const getIterator = (isIterator)\n"
"    ? getIteratorIterator\n"
"    : (isTuple)\n"
"      ? getVectorIterator\n"
"      : getStructIterator;\n"
"    const instanceDescriptors = {\n"
"      $: { get: getSelf, set: initializer },\n"
"      dataView: getDataViewDescriptor(structure),\n"
"      base64: getBase64Descriptor(structure),\n"
"      length: isTuple && { value: length },\n"
"      valueOf: { value: getValueOf },\n"
"      toJSON: { value: convertToJSON },\n"
"      delete: { value: getDestructor(env) },\n"
"      entries: isTuple && { value: getVectorEntries },\n"
"      ...memberDescriptors,\n"
"      [Symbol.iterator]: { value: getIterator },\n"
"      [Symbol.toPrimitive]: backingInt && { value: toPrimitive },\n"
"      [ENTRIES_GETTER]: { value: isTuple ? getVectorEntries : getStructEntries },\n"
"      [COPIER]: { value: getMemoryCopier(byteSize) },\n"
"      [VIVIFICATOR]: hasObject && { value: getChildVivificator$1(structure, env) },\n"
"      [POINTER_VISITOR]: hasPointer && { value: getPointerVisitor$1(structure, always) },\n"
"      [WRITE_DISABLER]: { value: makeReadOnly },\n"
"      [PROPS]: { value: fieldMembers.map(m => m.name) },\n"
"    };\n"
"    const staticDescriptors = {\n"
"      [ALIGN]: { value: align },\n"
"      [SIZE]: { value: byteSize },\n"
"      [TYPE]: { value: structure.type },\n"
"      [TUPLE]: { value: isTuple },\n"
"    };\n"
"    return attachDescriptors(constructor, instanceDescriptors, staticDescriptors);\n"
"  }\n"
"\n"
"  function getStructEntries(options) {\n"
"    return {\n"
"      [Symbol.iterator]: getStructEntriesIterator.bind(this, options),\n"
"      length: this[PROPS].length,\n"
"    };\n"
"  }\n"
"\n"
"  function getIteratorIterator() {\n"
"    const self = this;\n"
"    return {\n"
"      next() {\n"
"        const value = self.next();\n"
"        const done = value === null;\n"
"        return { value, done };\n"
"      },\n"
"    };\n"
"  }\n"
"\n"
"  function getStructIterator(options) {\n"
"    const entries = getStructEntries.call(this, options);\n"
"    return entries[Symbol.iterator]();\n"
"  }\n"
"\n"
"  function getStructEntriesIterator(options) {\n"
"    const self = this;\n"
"    const props = this[PROPS];\n"
"    let index = 0;\n"
"    return {\n"
"      next() {\n"
"        let value, done;\n"
"        if (index < props.length) {\n"
"          const current = props[index++];\n"
"          value = [ current, handleError(() => self[current], options) ];\n"
"          done = false;\n"
"        } else {\n"
"          done = true;\n"
"        }\n"
"        return { value, done };\n"
"      },\n"
"    };\n"
"  }\n"
"\n"
"  function getChildVivificator$1(structure, env) {\n"
"    const { instance: { members } } = structure;\n"
"    const objectMembers = {};\n"
"    for (const member of members.filter(m => m.type === MemberType.Object)) {\n"
"      objectMembers[member.slot] = member;\n"
"    }\n"
"    return function vivificateChild(slot) {\n"
"      const member = objectMembers[slot];\n"
"      const { bitOffset, byteSize, structure: { constructor } } = member;\n"
"      const dv = this[MEMORY];\n"
"      const parentOffset = dv.byteOffset;\n"
"      const offset = parentOffset + (bitOffset >> 3);\n"
"      let len = byteSize;\n"
"      if (len === undefined) {\n"
"        if (bitOffset & 7) {\n"
"          throw new NotOnByteBoundary(member);\n"
"        }\n"
"        len = member.bitSize >> 3;\n"
"      }\n"
"      const childDV = env.obtainView(dv.buffer, offset, len);\n"
"      const object = this[SLOTS][slot] = constructor.call(PARENT, childDV);\n"
"      return object;\n"
"    }\n"
"  }\n"
"\n"
"  function getPointerVisitor$1(structure, visitorOptions = {}) {\n"
"    const {\n"
"      isChildActive = always,\n"
"      isChildMutable = always,\n"
"    } = visitorOptions;\n"
"    const { instance: { members } } = structure;\n"
"    const pointerMembers = members.filter(m => m.structure?.hasPointer);\n"
"    return function visitPointers(cb, options = {}) {\n"
"      const {\n"
"        source,\n"
"        vivificate = false,\n"
"        isActive = always,\n"
"        isMutable = always,\n"
"      } = options;\n"
"      const childOptions = {\n"
"        ...options,\n"
"        isActive: (object) => {\n"
"          // make sure parent object is active, then check whether the child is active\n"
"          return isActive(this) && isChildActive.call(this, object);\n"
"        },\n"
"        isMutable: (object) => {\n"
"          return isMutable(this) && isChildMutable.call(this, object);\n"
"        },\n"
"      };\n"
"      for (const { slot } of pointerMembers) {\n"
"        if (source) {\n"
"          // when src is a the struct's template, most slots will likely be empty,\n"
"          // since pointer fields aren't likely to have default values\n"
"          const srcChild = source[SLOTS]?.[slot];\n"
"          if (!srcChild) {\n"
"            continue;\n"
"          }\n"
"          childOptions.source = srcChild;\n"
"        }\n"
"        const child = this[SLOTS][slot] ?? (vivificate ? this[VIVIFICATOR](slot) : null);\n"
"        if (child) {\n"
"          child[POINTER_VISITOR](cb, childOptions);\n"
"        }\n"
"      }\n"
"    };\n"
"  }\n"
"\n"
"  function defineArgStruct(structure, env) {\n"
"    const {\n"
"      byteSize,\n"
"      align,\n"
"      instance: { members },\n"
"      hasPointer,\n"
"    } = structure;\n"
"    const hasObject = !!members.find(m => m.type === MemberType.Object);\n"
"    const argKeys = members.slice(1).map(m => m.name);\n"
"    const argCount = argKeys.length;\n"
"    const constructor = structure.constructor = function(args, name, offset) {\n"
"      const dv = env.allocateMemory(byteSize, align);\n"
"      this[MEMORY] = dv;\n"
"      if (hasObject) {\n"
"        this[SLOTS] = {};\n"
"      }\n"
"      if (args.length !== argCount) {\n"
"        throw new ArgumentCountMismatch(name, argCount - offset, args.length - offset);\n"
"      }\n"
"      for (const [ index, key ] of argKeys.entries()) {\n"
"        try {\n"
"          this[key] = args[index];\n"
"        } catch (err) {\n"
"          throw adjustArgumentError(name, index - offset, argCount - offset, err);\n"
"        }\n"
"      }\n"
"    };\n"
"    const memberDescriptors = {};\n"
"    for (const member of members) {\n"
"      memberDescriptors[member.name] = getDescriptor(member, env);\n"
"    }\n"
"    const { slot: retvalSlot, type: retvalType } = members[0];\n"
"    const isChildMutable = (retvalType === MemberType.Object)\n"
"    ? function(object) {\n"
"        const child = this[VIVIFICATOR](retvalSlot);\n"
"        return object === child;\n"
"      }\n"
"    : function() { return false };\n"
"    defineProperties(constructor.prototype, {\n"
"      ...memberDescriptors,\n"
"      [COPIER]: { value: getMemoryCopier(byteSize) },\n"
"      [VIVIFICATOR]: hasObject && { value: getChildVivificator$1(structure, env) },\n"
"      [POINTER_VISITOR]: hasPointer && { value: getPointerVisitor$1(structure, { isChildMutable }) },\n"
"    });\n"
"    defineProperties(constructor, {\n"
"      [ALIGN]: { value: align },\n"
"      [SIZE]: { value: byteSize },\n"
"    });\n"
"    return constructor;\n"
"  }\n"
"\n"
"  function defineArray(structure, env) {\n"
"    const {\n"
"      length,\n"
"      byteSize,\n"
"      align,\n"
"      instance: { members: [ member ] },\n"
"      hasPointer,\n"
"    } = structure;\n"
"    const { get, set } = getDescriptor(member, env);\n"
"    const hasStringProp = canBeString(member);\n"
"    const propApplier = createPropertyApplier(structure);\n"
"    const initializer = function(arg) {\n"
"      if (arg instanceof constructor) {\n"
"        this[COPIER](arg);\n"
"        if (hasPointer) {\n"
"          this[POINTER_VISITOR](copyPointer, { vivificate: true, source: arg });\n"
"        }\n"
"      } else {\n"
"        if (typeof(arg) === 'string' && hasStringProp) {\n"
"          arg = { string: arg };\n"
"        }\n"
"        if (arg?.[Symbol.iterator]) {\n"
"          arg = transformIterable(arg);\n"
"          if (arg.length !== length) {\n"
"            throw new ArrayLengthMismatch(structure, this, arg);\n"
"          }\n"
"          let i = 0;\n"
"          for (const value of arg) {\n"
"            set.call(this, i++, value);\n"
"          }\n"
"        } else if (arg && typeof(arg) === 'object') {\n"
"          if (propApplier.call(this, arg) === 0) {\n"
"            throw new InvalidArrayInitializer(structure, arg);\n"
"          }\n"
"        } else if (arg !== undefined) {\n"
"          throw new InvalidArrayInitializer(structure, arg);\n"
"        }\n"
"      }\n"
"    };\n"
"    const finalizer = createArrayProxy;\n"
"    const constructor = structure.constructor = createConstructor(structure, { initializer, finalizer }, env);\n"
"    const typedArray = structure.typedArray = getTypedArrayClass(member);\n"
"    const hasObject = member.type === MemberType.Object;\n"
"    const instanceDescriptors = {\n"
"      $: { get: getProxy, set: initializer },\n"
"      length: { value: length },\n"
"      dataView: getDataViewDescriptor(structure),\n"
"      base64: getBase64Descriptor(structure),\n"
"      string: hasStringProp && getStringDescriptor(structure),\n"
"      typedArray: typedArray && getTypedArrayDescriptor(structure),\n"
"      get: { value: get },\n"
"      set: { value: set },\n"
"      entries: { value: getArrayEntries },\n"
"      valueOf: { value: getValueOf },\n"
"      toJSON: { value: convertToJSON },\n"
"      delete: { value: getDestructor(env) },\n"
"      [Symbol.iterator]: { value: getArrayIterator },\n"
"      [ENTRIES_GETTER]: { value: getArrayEntries },\n"
"      [COPIER]: { value: getMemoryCopier(byteSize) },\n"
"      [VIVIFICATOR]: hasObject && { value: getChildVivificator(structure, env) },\n"
"      [POINTER_VISITOR]: hasPointer && { value: getPointerVisitor() },\n"
"      [WRITE_DISABLER]: { value: makeArrayReadOnly },\n"
"    };\n"
"    const staticDescriptors = {\n"
"      child: { get: () => member.structure.constructor },\n"
"      [COMPAT]: { value: getCompatibleTags(structure) },\n"
"      [ALIGN]: { value: align },\n"
"      [SIZE]: { value: byteSize },\n"
"      [TYPE]: { value: structure.type },\n"
"    };\n"
"    return attachDescriptors(constructor, instanceDescriptors, staticDescriptors);\n"
"  }\n"
"\n"
"  function createArrayProxy() {\n"
"    const proxy = new Proxy(this, proxyHandlers);\n"
"    // hide the proxy so console wouldn't display a recursive structure\n"
"    Object.defineProperty(this, PROXY, { value: proxy });\n"
"    return proxy;\n"
"  }\n"
"\n"
"  function makeArrayReadOnly() {\n"
"    makeReadOnly.call(this);\n"
"    Object.defineProperty(this, 'set', { value: throwReadOnly });\n"
"    const get = this.get;\n"
"    const getReadOnly = function(index) {\n"
"      const element = get.call(this, index);\n"
"      if (element?.[CONST_TARGET] === null) {\n"
"        element[WRITE_DISABLER]?.();\n"
"      }\n"
"      return element;\n"
"    };\n"
"    Object.defineProperty(this, 'get', { value: getReadOnly });\n"
"  }\n"
"\n"
"  function canBeString(member) {\n"
"    return member.type === MemberType.Uint && [ 8, 16 ].includes(member.bitSize);\n"
"  }\n"
"\n"
"  function getArrayIterator() {\n"
"    const self = this[ARRAY] ?? this;\n"
"    const length = this.length;\n"
"    let index = 0;\n"
"    return {\n"
"      next() {\n"
"        let value, done;\n"
"        if (index < length) {\n"
"          const current = index++;\n"
"          value = self.get(current);\n"
"          done = false;\n"
"        } else {\n"
"          done = true;\n"
"        }\n"
"        return { value, done };\n"
"      },\n"
"    };\n"
"  }\n"
"\n"
"  function getArrayEntriesIterator(options) {\n"
"    const self = this[ARRAY] ?? this;\n"
"    const length = this.length;\n"
"    let index = 0;\n"
"    return {\n"
"      next() {\n"
"        let value, done;\n"
"        if (index < length) {\n"
"          const current = index++;\n"
"          value = [ current, handleError(() => self.get(current), options) ];\n"
"          done = false;\n"
"        } else {\n"
"          done = true;\n"
"        }\n"
"        return { value, done };\n"
"      },\n"
"    };\n"
"  }\n"
"\n"
"  function getArrayEntries(options) {\n"
"    return {\n"
"      [Symbol.iterator]: getArrayEntriesIterator.bind(this, options),\n"
"      length: this.length,\n"
"    };\n"
"  }\n"
"\n"
"  function getChildVivificator(structure, env) {\n"
"    const { instance: { members: [ member ]} } = structure;\n"
"    const { byteSize, structure: elementStructure } = member;\n"
"    return function getChild(index) {\n"
"      const { constructor } = elementStructure;\n"
"      const dv = this[MEMORY];\n"
"      const parentOffset = dv.byteOffset;\n"
"      const offset = parentOffset + byteSize * index;\n"
"      const childDV = env.obtainView(dv.buffer, offset, byteSize);\n"
"      const object = this[SLOTS][index] = constructor.call(PARENT, childDV);\n"
"      return object;\n"
"    };\n"
"  }\n"
"\n"
"  function getPointerVisitor(structure) {\n"
"    return function visitPointers(cb, options = {}) {\n"
"      const {\n"
"        source,\n"
"        vivificate = false,\n"
"        isActive = always,\n"
"        isMutable = always,\n"
"      } = options;\n"
"      const childOptions = {\n"
"        ...options,\n"
"        isActive: () => isActive(this),\n"
"        isMutable: () => isMutable(this),\n"
"      };\n"
"      for (let i = 0, len = this.length; i < len; i++) {\n"
"        // no need to check for empty slots, since that isn't possible\n"
"        if (source) {\n"
"          childOptions.source = source?.[SLOTS][i];\n"
"        }\n"
"        const child = this[SLOTS][i] ?? (vivificate ? this[VIVIFICATOR](i) : null);\n"
"        if (child) {\n"
"          child[POINTER_VISITOR](cb, childOptions);\n"
"        }\n"
"      }\n"
"    };\n"
"  }\n"
"\n"
"  function transformIterable(arg) {\n"
"    if (typeof(arg.length) === 'number') {\n"
"      // it's an array of sort\n"
"      return arg;\n"
"    }\n"
"    const iterator = arg[Symbol.iterator]();\n"
"    const first = iterator.next();\n"
"    const length = first.value?.length;\n"
"    if (typeof(length) === 'number' && Object.keys(first.value).join() === 'length') {\n"
"      // return generator with length attached\n"
"      return Object.assign((function*() {\n"
"        let result;\n"
"        while (!(result = iterator.next()).done) {\n"
"          yield result.value;\n"
"        }\n"
"      })(), { length });\n"
"    } else {\n"
"      const array = [];\n"
"      let result = first;\n"
"      while (!result.done) {\n"
"        array.push(result.value);\n"
"        result = iterator.next();\n"
"      }\n"
"      return array;\n"
"    }\n"
"  }\n"
"\n"
"  const proxyHandlers = {\n"
"    get(array, name) {\n"
"      const index = (typeof(name) === 'symbol') ? 0 : name|0;\n"
"      if (index !== 0 || index == name) {\n"
"        return array.get(index);\n"
"      } else {\n"
"        switch (name) {\n"
"          case 'get':\n"
"            if (!array[ELEMENT_GETTER]) {\n"
"              array[ELEMENT_GETTER] = array.get.bind(array);\n"
"            }\n"
"            return array[ELEMENT_GETTER];\n"
"          case 'set':\n"
"            if (!array[ELEMENT_SETTER]) {\n"
"              array[ELEMENT_SETTER] = array.set.bind(array);\n"
"            }\n"
"            return array[ELEMENT_SETTER];\n"
"          case ARRAY:\n"
"            return array;\n"
"          default:\n"
"            return array[name];\n"
"        }\n"
"      }\n"
"    },\n"
"    set(array, name, value) {\n"
"      const index = (typeof(name) === 'symbol') ? 0 : name|0;\n"
"      if (index !== 0 || index == name) {\n"
"        array.set(index, value);\n"
"      } else {\n"
"        switch (name) {\n"
"          case 'get':\n"
"            array[ELEMENT_GETTER] = value;\n"
"            break;\n"
"          case 'set':\n"
"            array[ELEMENT_SETTER] = value;\n"
"            break;\n"
"          default:\n"
"            array[name] = value;\n"
"        }\n"
"      }\n"
"      return true;\n"
"    },\n"
"    deleteProperty(array, name) {\n"
"      const index = (typeof(name) === 'symbol') ? 0 : name|0;\n"
"      if (index !== 0 || index == name) {\n"
"        return false;\n"
"      } else {\n"
"        switch (name) {\n"
"          case 'get':\n"
"            delete array[ELEMENT_GETTER];\n"
"            break;\n"
"          case 'set':\n"
"            delete array[ELEMENT_SETTER];\n"
"            break;\n"
"          default:\n"
"            delete array[name];\n"
"        }\n"
"        return true;\n"
"      }\n"
"    },\n"
"    has(array, name) {\n"
"      const index = (typeof(name) === 'symbol') ? 0 : name|0;\n"
"      if (index !== 0 || index == name) {\n"
"        return (index >= 0 && index < array.length);\n"
"      } else {\n"
"        return array[name];\n"
"      }\n"
"    },\n"
"    ownKeys(array) {\n"
"      const keys = [];\n"
"      for (let i = 0, len = array.length; i < len; i++) {\n"
"        keys.push(`${i}`);\n"
"      }\n"
"      keys.push('length', PROXY);\n"
"      return keys;\n"
"    },\n"
"    getOwnPropertyDescriptor(array, name) {\n"
"      const index = (typeof(name) === 'symbol') ? 0 : name|0;\n"
"      if (index !== 0 || index == name) {\n"
"        if (index >= 0 && index < array.length) {\n"
"          return { value: array.get(index), enumerable: true, writable: true, configurable: true };\n"
"        }\n"
"      } else {\n"
"        return Object.getOwnPropertyDescriptor(array, name);\n"
"      }\n"
"    },\n"
"  };\n"
"\n"
"  function defineEnumerationShape(structure, env) {\n"
"    const {\n"
"      byteSize,\n"
"      align,\n"
"      instance: {\n"
"        members: [ member ],\n"
"      },\n"
"    } = structure;\n"
"    const { get, set } = getDescriptor(member, env);\n"
"    const expected = [ 'string', 'number', 'tagged union' ];\n"
"    const propApplier = createPropertyApplier(structure);\n"
"    const initializer = function(arg) {\n"
"      if (arg && typeof(arg) === 'object') {\n"
"        if (propApplier.call(this, arg) === 0) {\n"
"          throw new InvalidInitializer(structure, expected, arg);\n"
"        }\n"
"      } else if (arg !== undefined) {\n"
"        set.call(this, arg);\n"
"      }\n"
"    };\n"
"    const alternateCaster = function(arg) {\n"
"      if (typeof(arg)  === 'string' || typeof(arg) === 'number' || typeof(arg) === 'bigint') {\n"
"        let item = constructor[arg];\n"
"        if (!item) {\n"
"          if (constructor[MORE] && typeof(arg) !== 'string') {\n"
"            // create the item on-the-fly when enum is non-exhaustive\n"
"            item = new constructor(undefined);\n"
"            set.call(item, arg, 'number');\n"
"            appendEnumeration(constructor, `${arg}`, item);\n"
"          }\n"
"        }\n"
"        return item;\n"
"      } else if (arg instanceof constructor) {\n"
"        return arg;\n"
"      } else if (arg?.[TAG] instanceof constructor) {\n"
"        // a tagged union, return the active tag\n"
"        return arg[TAG];\n"
"      } else if (!getDataView(structure, arg, env)) {\n"
"        throw new InvalidInitializer(structure, expected, arg);\n"
"      } else {\n"
"        return false;\n"
"      }\n"
"    };\n"
"    const constructor = structure.constructor = createConstructor(structure, { initializer, alternateCaster }, env);\n"
"    const typedArray = structure.typedArray = getTypedArrayClass(member);\n"
"    const toPrimitive = function(hint) {\n"
"      switch (hint) {\n"
"        case 'string':\n"
"        case 'default':\n"
"          return this.$[NAME];\n"
"        default:\n"
"          return get.call(this, 'number');\n"
"      }\n"
"    };\n"
"    const instanceDescriptors = {\n"
"      $: { get, set },\n"
"      dataView: getDataViewDescriptor(structure),\n"
"      base64: getBase64Descriptor(structure),\n"
"      typedArray: typedArray && getTypedArrayDescriptor(structure),\n"
"      valueOf: { value: getValueOf },\n"
"      toString: { value: getValueOf },\n"
"      toJSON: { value: convertToJSON },\n"
"      delete: { value: getDestructor(env) },\n"
"      [Symbol.toPrimitive]: { value: toPrimitive },\n"
"      [COPIER]: { value: getMemoryCopier(byteSize) },\n"
"      [WRITE_DISABLER]: { value: makeReadOnly },\n"
"    };\n"
"    const staticDescriptors = {\n"
"      [ALIGN]: { value: align },\n"
"      [SIZE]: { value: byteSize },\n"
"      [TYPE]: { value: structure.type },\n"
"    };\n"
"    return attachDescriptors(constructor, instanceDescriptors, staticDescriptors);\n"
"  }\n"
"  function appendEnumeration(enumeration, name, item) {\n"
"    if (name !== undefined) {\n"
"      // enum can have static variables\n"
"      if (item instanceof enumeration) {\n"
"        // attach name to item so tagged union code can quickly find it\n"
"        defineProperties(item, { [NAME]: { value: name } });\n"
"        // call toPrimitive directly since enum can be bigint or number\n"
"        const index = item[Symbol.toPrimitive]();\n"
"        defineProperties(enumeration, {\n"
"          [index]: { value: item },\n"
"          [name]: { value: item },\n"
"        });\n"
"      }\n"
"    } else {\n"
"      // non-exhaustive enum\n"
"      defineProperties(enumeration, { [MORE]: { value: true } });\n"
"    }\n"
"  }\n"
"\n"
"  let currentGlobalSet;\n"
"  let currentErrorClass;\n"
"\n"
"  function defineErrorSet(structure, env) {\n"
"    const {\n"
"      name,\n"
"      byteSize,\n"
"      align,\n"
"      instance: { members: [ member ] },\n"
"    } = structure;\n"
"    if (!currentErrorClass) {\n"
"      currentErrorClass = class ZigError extends ZigErrorBase {};\n"
"      currentGlobalSet = defineErrorSet({ ...structure, name: 'anyerror' }, env);\n"
"    }\n"
"    if (currentGlobalSet && name === 'anyerror') {\n"
"      structure.constructor = currentGlobalSet;\n"
"      structure.typedArray = getTypedArrayClass(member);\n"
"      return currentGlobalSet;\n"
"    }\n"
"    const errorClass = currentErrorClass;\n"
"    const { get, set } = getDescriptor(member, env);\n"
"    const expected = [ 'string', 'number' ];\n"
"    const propApplier = createPropertyApplier(structure);\n"
"    const initializer = function(arg) {\n"
"      if (arg instanceof constructor[CLASS]) {\n"
"        set.call(this, arg);\n"
"      } else if (arg && typeof(arg) === 'object' && !isErrorJSON(arg)) {\n"
"        if (propApplier.call(this, arg) === 0) {\n"
"          throw new InvalidInitializer(structure, expected, arg);\n"
"        }\n"
"      } else if (arg !== undefined) {\n"
"        set.call(this, arg);\n"
"      }\n"
"    };\n"
"    const alternateCaster = function(arg) {\n"
"      if (typeof(arg) === 'number' || typeof(arg) === 'string') {\n"
"        return constructor[arg];\n"
"      } else if (arg instanceof constructor[CLASS]) {\n"
"        return constructor[Number(arg)];\n"
"      } else if (isErrorJSON(arg)) {\n"
"        return constructor[`Error: ${arg.error}`];\n"
"      } else if (!getDataView(structure, arg, env)) {\n"
"        throw new InvalidInitializer(structure, expected, arg);\n"
"      } else {\n"
"        return false;\n"
"      }\n"
"    };\n"
"    // items are inserted when static members get attached in static.js\n"
"    const constructor = structure.constructor = createConstructor(structure, { initializer, alternateCaster }, env);\n"
"    const typedArray = structure.typedArray = getTypedArrayClass(member);\n"
"    const instanceDescriptors = {\n"
"      $: { get, set },\n"
"      dataView: getDataViewDescriptor(structure),\n"
"      base64: getBase64Descriptor(structure),\n"
"      typedArray: typedArray && getTypedArrayDescriptor(structure),\n"
"      valueOf: { value: getValueOf },\n"
"      toJSON: { value: convertToJSON },\n"
"      delete: { value: getDestructor(env) },\n"
"      [COPIER]: { value: getMemoryCopier(byteSize) },\n"
"      [WRITE_DISABLER]: { value: makeReadOnly },\n"
"    };\n"
"    const staticDescriptors = {\n"
"      [ALIGN]: { value: align },\n"
"      [SIZE]: { value: byteSize },\n"
"      [CLASS]: { value: errorClass },\n"
"      // the PROPS array is normally set in static.js; it needs to be set here for anyerror\n"
"      // so we can add names to it as error sets are defined\n"
"      [PROPS]: (name === 'anyerror') ? { value: [] } : undefined,\n"
"      [TYPE]: { value: structure.type },\n"
"    };\n"
"    return attachDescriptors(constructor, instanceDescriptors, staticDescriptors);\n"
"  }\n"
"  function appendErrorSet(errorSet, name, es) {\n"
"    // our Zig export code places error set instance into the static template, which we can't\n"
"    // use since all errors need to have the same parent class; here we get the error number\n"
"    // and create the actual error object if hasn't been created already for an earlier set\n"
"    const number = es[GETTER]('number');\n"
"    let error = currentGlobalSet[number];\n"
"    if (!error) {\n"
"      const errorClass = errorSet[CLASS];\n"
"      error = new errorClass(name, number);\n"
"    }\n"
"    const string = String(error);\n"
"    const descriptors = {\n"
"      [number]: { value: error },\n"
"      [string]: { value: error },\n"
"      [name]: { value: error },\n"
"    };\n"
"    defineProperties(errorSet, descriptors);\n"
"    defineProperties(currentGlobalSet, descriptors);\n"
"    // add name to prop list\n"
"    currentGlobalSet[PROPS].push(name);\n"
"  }\n"
"\n"
"  function resetGlobalErrorSet() {\n"
"    currentErrorClass = currentGlobalSet = undefined;\n"
"  }\n"
"\n"
"  class ZigErrorBase extends Error {\n"
"    constructor(name, number) {\n"
"      super(deanimalizeErrorName(name));\n"
"      this.number = number;\n"
"      this.stack = undefined;\n"
"    }\n"
"\n"
"    [Symbol.toPrimitive](hint) {\n"
"      switch (hint) {\n"
"        case 'string':\n"
"        case 'default':\n"
"          return Error.prototype.toString.call(this, hint);\n"
"        default:\n"
"          return this.number;\n"
"      }\n"
"    }\n"
"\n"
"    toJSON() {\n"
"      return { error: this.message };\n"
"    }\n"
"  }\n"
"\n"
"  function defineErrorUnion(structure, env) {\n"
"    const {\n"
"      byteSize,\n"
"      align,\n"
"      instance: { members },\n"
"      hasPointer,\n"
"    } = structure;\n"
"    const { get: getValue, set: setValue } = getDescriptor(members[0], env);\n"
"    const { get: getError, set: setError } = getDescriptor(members[1], env);\n"
"    const get = function() {\n"
"      const errNum = getError.call(this, 'number');\n"
"      if (errNum) {\n"
"        throw getError.call(this);\n"
"      } else {\n"
"        return getValue.call(this);\n"
"      }\n"
"    };\n"
"    const isValueVoid = members[0].type === MemberType.Void;\n"
"    const errorSet = members[1].structure.constructor;\n"
"    const isChildActive = function() {\n"
"      return !getError.call(this, 'number');\n"
"    };\n"
"    const clearValue = function() {\n"
"      this[RESETTER]();\n"
"      this[POINTER_VISITOR]?.(resetPointer);\n"
"    };\n"
"    const hasObject = !!members.find(m => m.type === MemberType.Object);\n"
"    const propApplier = createPropertyApplier(structure);\n"
"    const initializer = function(arg) {\n"
"      if (arg instanceof constructor) {\n"
"        this[COPIER](arg);\n"
"        if (hasPointer) {\n"
"          if (isChildActive.call(this)) {\n"
"            this[POINTER_VISITOR](copyPointer, { vivificate: true, source: arg });\n"
"          }\n"
"        }\n"
"      } else if (arg instanceof errorSet[CLASS] && errorSet(arg)) {\n"
"        setError.call(this, arg);\n"
"        clearValue.call(this);\n"
"      } else if (arg !== undefined || isValueVoid) {\n"
"        try {\n"
"          // call setValue() first, in case it throws\n"
"          setValue.call(this, arg);\n"
"          setError.call(this, 0, 'number');\n"
"        } catch (err) {\n"
"          if (arg instanceof Error) {\n"
"            // we give setValue a chance to see if the error is actually an acceptable value\n"
"            // now is time to throw an error\n"
"            throw new NotInErrorSet(structure);\n"
"          } else if (isErrorJSON(arg)) {\n"
"            setError.call(this, arg);\n"
"            clearValue.call(this);\n"
"          } else if (arg && typeof(arg) === 'object') {\n"
"            if (propApplier.call(this, arg) === 0) {\n"
"              throw err;\n"
"            }\n"
"          } else {\n"
"            throw err;\n"
"          }\n"
"        }\n"
"      }\n"
"    };\n"
"    const constructor = structure.constructor = createConstructor(structure, { initializer }, env);\n"
"    const { bitOffset: valueBitOffset, byteSize: valueByteSize } = members[0];\n"
"    const instanceDescriptors = {\n"
"      '$': { get, set: initializer },\n"
"      dataView: getDataViewDescriptor(structure),\n"
"      base64: getBase64Descriptor(structure),\n"
"      valueOf: { value: getValueOf },\n"
"      toJSON: { value: convertToJSON },\n"
"      delete: { value: getDestructor(env) },\n"
"      [COPIER]: { value: getMemoryCopier(byteSize) },\n"
"      [RESETTER]: { value: getMemoryResetter(valueBitOffset / 8, valueByteSize) },\n"
"      [VIVIFICATOR]: hasObject && { value: getChildVivificator$1(structure, env) },\n"
"      [POINTER_VISITOR]: hasPointer && { value: getPointerVisitor$1(structure, { isChildActive }) },\n"
"      [WRITE_DISABLER]: { value: makeReadOnly },\n"
"    };\n"
"    const staticDescriptors = {\n"
"      [ALIGN]: { value: align },\n"
"      [SIZE]: { value: byteSize },\n"
"      [TYPE]: { value: structure.type },\n"
"    };\n"
"    return attachDescriptors(constructor, instanceDescriptors, staticDescriptors);\n"
"  }\n"
"\n"
"  function defineOpaque(structure, env) {\n"
"    const {\n"
"      byteSize,\n"
"      align,\n"
"      isIterator,\n"
"    } = structure;\n"
"    const initializer = function() {\n"
"      throw new CreatingOpaque(structure);\n"
"    };\n"
"    const valueAccessor = function() {\n"
"      throw new AccessingOpaque(structure);\n"
"    };\n"
"    const toPrimitive = function(hint) {\n"
"      const { name } = structure;\n"
"      return `[opaque ${name}]`;\n"
"    };\n"
"    const constructor = structure.constructor = createConstructor(structure, { initializer }, env);\n"
"    const getIterator = (isIterator) ? getIteratorIterator : null;\n"
"    const instanceDescriptors = {\n"
"      $: { get: valueAccessor, set: valueAccessor },\n"
"      dataView: getDataViewDescriptor(structure),\n"
"      valueOf: { value: getValueOf },\n"
"      toJSON: { value: convertToJSON },\n"
"      delete: { value: getDestructor(env) },\n"
"      [Symbol.iterator]: getIterator && { value: getIterator },\n"
"      [Symbol.toPrimitive]: { value: toPrimitive },\n"
"      [COPIER]: { value: getMemoryCopier(byteSize) },\n"
"    };\n"
"    const staticDescriptors = {\n"
"      [COMPAT]: { value: getCompatibleTags(structure) },\n"
"      [ALIGN]: { value: align },\n"
"      [SIZE]: { value: byteSize },\n"
"      [TYPE]: { value: structure.type },\n"
"    };\n"
"    return attachDescriptors(constructor, instanceDescriptors, staticDescriptors);\n"
"  }\n"
"\n"
"  function defineOptional(structure, env) {\n"
"    const {\n"
"      byteSize,\n"
"      align,\n"
"      instance: { members },\n"
"      hasPointer,\n"
"    } = structure;\n"
"    const { get: getValue, set: setValue } = getDescriptor(members[0], env);\n"
"    // NOTE: getPresent returns a uint now\n"
"    const { get: getPresent, set: setPresent } = getDescriptor(members[1], env);\n"
"    const hasPresentFlag = !(members[0].bitSize > 0 && members[0].bitOffset === members[1].bitOffset);\n"
"    const get = function() {\n"
"      const present = getPresent.call(this);\n"
"      if (present) {\n"
"        return getValue.call(this);\n"
"      } else {\n"
"        this[POINTER_VISITOR]?.(resetPointer);\n"
"        return null;\n"
"      }\n"
"    };\n"
"    const isValueVoid = members[0].type === MemberType.Void;\n"
"    const isChildActive = function () {\n"
"      return !!getPresent.call(this);\n"
"    };\n"
"    const initializer = function(arg) {\n"
"      if (arg instanceof constructor) {\n"
"        this[COPIER](arg);\n"
"        if (hasPointer) {\n"
"          // don't bother copying pointers when it's empty\n"
"          if (isChildActive.call(arg)) {\n"
"            this[POINTER_VISITOR](copyPointer, { vivificate: true, source: arg });\n"
"          }\n"
"        }\n"
"      } else if (arg === null) {\n"
"        setPresent.call(this, 0);\n"
"        this[RESETTER]?.();\n"
"        // clear references so objects can be garbage-collected\n"
"        this[POINTER_VISITOR]?.(resetPointer);\n"
"      } else if (arg !== undefined || isValueVoid) {\n"
"        // call setValue() first, in case it throws\n"
"        setValue.call(this, arg);\n"
"        if (hasPresentFlag || !this[MEMORY][FIXED]) {\n"
"          // since setValue() wouldn't write address into memory when the pointer is in\n"
"          // relocatable memory, we need to use setPresent() in order to write something\n"
"          // non-zero there so that we know the field is populated\n"
"          setPresent.call(this, 1);\n"
"        }\n"
"      }\n"
"    };\n"
"    const constructor = structure.constructor = createConstructor(structure, { initializer }, env);\n"
"    const { bitOffset: valueBitOffset, byteSize: valueByteSize } = members[0];\n"
"    const hasObject = !!members.find(m => m.type === MemberType.Object);\n"
"    const instanceDescriptors = {\n"
"      $: { get, set: initializer },\n"
"      dataView: getDataViewDescriptor(structure),\n"
"      base64: getBase64Descriptor(structure),\n"
"      valueOf: { value: getValueOf },\n"
"      toJSON: { value: convertToJSON },\n"
"      delete: { value: getDestructor(env) },\n"
"      [COPIER]: { value: getMemoryCopier(byteSize) },\n"
"      // no need to reset the value when it's a pointer, since setPresent() would null out memory used by the pointer\n"
"      [RESETTER]: !hasPointer && { value: getMemoryResetter(valueBitOffset / 8, valueByteSize) },\n"
"      [VIVIFICATOR]: hasObject && { value: getChildVivificator$1(structure, env) },\n"
"      [POINTER_VISITOR]: hasPointer && { value: getPointerVisitor$1(structure, { isChildActive }) },\n"
"      [WRITE_DISABLER]: { value: makeReadOnly },\n"
"    };\n"
"    const staticDescriptors = {\n"
"      [ALIGN]: { value: align },\n"
"      [SIZE]: { value: byteSize },\n"
"      [TYPE]: { value: structure.type },\n"
"    };\n"
"    return attachDescriptors(constructor, instanceDescriptors, staticDescriptors);\n"
"  }\n"
"\n"
"  function definePrimitive(structure, env) {\n"
"    const {\n"
"      byteSize,\n"
"      align,\n"
"      instance: { members: [ member ] },\n"
"    } = structure;\n"
"    const { get, set } = getDescriptor(member, env);\n"
"    const propApplier = createPropertyApplier(structure);\n"
"    const initializer = function(arg) {\n"
"      if (arg instanceof constructor) {\n"
"        this[COPIER](arg);\n"
"      } else {\n"
"        if (arg && typeof(arg) === 'object') {\n"
"          if (propApplier.call(this, arg) === 0) {\n"
"            const type = getPrimitiveType(member);\n"
"            throw new InvalidInitializer(structure, type, arg);\n"
"          }\n"
"        } else if (arg !== undefined) {\n"
"          set.call(this, arg);\n"
"        }\n"
"      }\n"
"    };\n"
"    const constructor = structure.constructor = createConstructor(structure, { initializer }, env);\n"
"    const typedArray = structure.typedArray = getTypedArrayClass(member);\n"
"    const instanceDescriptors = {\n"
"      $: { get, set },\n"
"      dataView: getDataViewDescriptor(structure),\n"
"      base64: getBase64Descriptor(structure),\n"
"      typedArray: typedArray && getTypedArrayDescriptor(structure),\n"
"      valueOf: { value: getValueOf },\n"
"      toJSON: { value: convertToJSON },\n"
"      delete: { value: getDestructor(env) },\n"
"      [Symbol.toPrimitive]: { value: get },\n"
"      [COPIER]: { value: getMemoryCopier(byteSize) },\n"
"      [WRITE_DISABLER]: { value: makeReadOnly },\n"
"    };\n"
"    const staticDescriptors = {\n"
"      [COMPAT]: { value: getCompatibleTags(structure) },\n"
"      [ALIGN]: { value: align },\n"
"      [SIZE]: { value: byteSize },\n"
"      [TYPE]: { value: structure.type },\n"
"      [PRIMITIVE]: { value: member.type },\n"
"    };\n"
"    return attachDescriptors(constructor, instanceDescriptors, staticDescriptors);\n"
"  }\n"
"\n"
"  function defineSlice(structure, env) {\n"
"    const {\n"
"      type,\n"
"      align,\n"
"      instance: {\n"
"        members: [ member ],\n"
"      },\n"
"      hasPointer,\n"
"    } = structure;\n"
"    const { get, set } = getDescriptor(member, env);\n"
"    const { byteSize: elementSize, structure: elementStructure } = member;\n"
"    const sentinel = getSentinel(structure, env);\n"
"    if (sentinel) {\n"
"      // zero-terminated strings aren't expected to be commonly used\n"
"      // so we're not putting this prop into the standard structure\n"
"      structure.sentinel = sentinel;\n"
"    }\n"
"    const hasStringProp = canBeString(member);\n"
"    const shapeDefiner = function(dv, length, fixed = false) {\n"
"      if (!dv) {\n"
"        dv = env.allocateMemory(length * elementSize, align, fixed);\n"
"      }\n"
"      this[MEMORY] = dv;\n"
"      this[LENGTH] = length;\n"
"      if (type === StructureType.Slice) {\n"
"        this[MAX_LENGTH] = length;\n"
"      }\n"
"    };\n"
"    const shapeChecker = function(arg, length) {\n"
"      if (length !== this[LENGTH]) {\n"
"        throw new ArrayLengthMismatch(structure, this, arg);\n"
"      }\n"
"    };\n"
"    // the initializer behave differently depending on whether it's called by the\n"
"    // constructor or by a member setter (i.e. after object's shape has been established)\n"
"    const propApplier = createPropertyApplier(structure);\n"
"    const initializer = function(arg, fixed = false) {\n"
"      if (arg instanceof constructor) {\n"
"        if (!this[MEMORY]) {\n"
"          shapeDefiner.call(this, null, arg.length, fixed);\n"
"        } else {\n"
"          shapeChecker.call(this, arg, arg.length);\n"
"        }\n"
"        this[COPIER](arg);\n"
"        if (hasPointer) {\n"
"          this[POINTER_VISITOR](copyPointer, { vivificate: true, source: arg });\n"
"        }\n"
"      } else if (typeof(arg) === 'string' && hasStringProp) {\n"
"        initializer.call(this, { string: arg }, fixed);\n"
"      } else if (arg?.[Symbol.iterator]) {\n"
"        arg = transformIterable(arg);\n"
"        if (!this[MEMORY]) {\n"
"          shapeDefiner.call(this, null, arg.length, fixed);\n"
"        } else {\n"
"          shapeChecker.call(this, arg, arg.length);\n"
"        }\n"
"        let i = 0;\n"
"        for (const value of arg) {\n"
"          sentinel?.validateValue(value, i, arg.length);\n"
"          set.call(this, i++, value);\n"
"        }\n"
"      } else if (typeof(arg) === 'number') {\n"
"        if (!this[MEMORY] && arg >= 0 && isFinite(arg)) {\n"
"          shapeDefiner.call(this, null, arg);\n"
"        } else {\n"
"          throw new InvalidArrayInitializer(structure, arg, !this[MEMORY]);\n"
"        }\n"
"      } else if (arg && typeof(arg) === 'object') {\n"
"        if (propApplier.call(this, arg, fixed) === 0) {\n"
"          throw new InvalidArrayInitializer(structure, arg);\n"
"        }\n"
"      } else if (arg !== undefined) {\n"
"        throw new InvalidArrayInitializer(structure, arg);\n"
"      }\n"
"    };\n"
"    const getLength = function() {\n"
"      return this[LENGTH];\n"
"    };\n"
"    const adjustIndex = function(index, len) {\n"
"      index = index | 0;\n"
"      if (index < 0) {\n"
"        index = len + index;\n"
"        if (index < 0) {\n"
"          index = 0;\n"
"        }\n"
"      } else {\n"
"        if (index > len) {\n"
"          index = len;\n"
"        }\n"
"      }\n"
"      return index;\n"
"    };\n"
"    function getSubArrayView(begin, end) {\n"
"      begin = (begin === undefined) ? 0 : adjustIndex(begin, this.length);\n"
"      end = (end === undefined) ? this.length : adjustIndex(end, this.length);\n"
"      const offset = begin * elementSize;\n"
"      const len = (end * elementSize) - offset;\n"
"      return env.obtainView(this[MEMORY].buffer, offset, len);\n"
"    }\n"
"    function getSubarrayOf(begin, end) {\n"
"      const dv = getSubArrayView.call(this, begin, end);\n"
"      return constructor(dv);\n"
"    }  const getSliceOf = function(begin, end, options = {}) {\n"
"      const {\n"
"        fixed = false\n"
"      } = options;\n"
"      const source = { [MEMORY]: getSubArrayView.call(this, begin, end) };\n"
"      const dest = constructor(env.allocateMemory(source[MEMORY].byteLength, align, fixed));\n"
"      copier.call(dest, source);\n"
"      return dest;\n"
"    };\n"
"    const finalizer = createArrayProxy;\n"
"    const copier = getMemoryCopier(elementSize, true);\n"
"    const constructor = structure.constructor = createConstructor(structure, { initializer, shapeDefiner, finalizer }, env);\n"
"    const typedArray = structure.typedArray = getTypedArrayClass(member);\n"
"    const hasObject = member.type === MemberType.Object;\n"
"    const shapeHandlers = { shapeDefiner };\n"
"    const instanceDescriptors = {\n"
"      $: { get: getProxy, set: initializer },\n"
"      length: { get: getLength },\n"
"      dataView: getDataViewDescriptor(structure, shapeHandlers),\n"
"      base64: getBase64Descriptor(structure, shapeHandlers),\n"
"      string: hasStringProp && getStringDescriptor(structure, shapeHandlers),\n"
"      typedArray: typedArray && getTypedArrayDescriptor(structure, shapeHandlers),\n"
"      get: { value: get },\n"
"      set: { value: set },\n"
"      entries: { value: getArrayEntries },\n"
"      slice: { value: getSliceOf },\n"
"      subarray: { value: getSubarrayOf },\n"
"      valueOf: { value: getValueOf },\n"
"      toJSON: { value: convertToJSON },\n"
"      delete: { value: getDestructor(env) },\n"
"      [Symbol.iterator]: { value: getArrayIterator },\n"
"      [ENTRIES_GETTER]: { value: getArrayEntries },\n"
"      [COPIER]: { value: copier },\n"
"      [VIVIFICATOR]: hasObject && { value: getChildVivificator(structure, env) },\n"
"      [POINTER_VISITOR]: hasPointer && { value: getPointerVisitor() },\n"
"      [WRITE_DISABLER]: { value: makeArrayReadOnly },\n"
"    };\n"
"    const staticDescriptors = {\n"
"      child: { get: () => elementStructure.constructor },\n"
"      [COMPAT]: { value: getCompatibleTags(structure) },\n"
"      [ALIGN]: { value: align },\n"
"      [SIZE]: { value: elementSize },\n"
"      [TYPE]: { value: structure.type },\n"
"    };\n"
"    return attachDescriptors(constructor, instanceDescriptors, staticDescriptors);\n"
"  }\n"
"\n"
"  function getSentinel(structure, env) {\n"
"    const {\n"
"      runtimeSafety = true,\n"
"    } = env;\n"
"    const {\n"
"      byteSize,\n"
"      instance: { members: [ member, sentinel ], template },\n"
"    } = structure;\n"
"    if (!sentinel) {\n"
"      return;\n"
"    }\n"
"    const { get: getSentinelValue } = getDescriptor(sentinel, env);\n"
"    const value = getSentinelValue.call(template, 0);\n"
"    const { get } = getDescriptor(member, env);\n"
"    const { isRequired } = member;\n"
"    const validateValue = (isRequired)\n"
"    ? (runtimeSafety)\n"
"      ? function(v, i, l) {\n"
"        if (v === value && i !== l - 1) {\n"
"          throw new MisplacedSentinel(structure, v, i, l);\n"
"        } else if (v !== value && i === l - 1) {\n"
"          throw new MissingSentinel(structure, value, i, l);\n"
"        }\n"
"      } : function(v, i, l) {\n"
"        if (v !== value && i === l - 1) {\n"
"          throw new MissingSentinel(structure, value, l);\n"
"        }\n"
"      }\n"
"    : function() {};\n"
"    const validateData = (isRequired)\n"
"    ? (runtimeSafety)\n"
"      ? function(source, len) {\n"
"          for (let i = 0; i < len; i++) {\n"
"            const v = get.call(source, i);\n"
"            if (v === value && i !== len - 1) {\n"
"              throw new MisplacedSentinel(structure, value, i, len);\n"
"            } else if (v !== value && i === len - 1) {\n"
"              throw new MissingSentinel(structure, value, len);\n"
"            }\n"
"          }\n"
"        }\n"
"      : function(source, len) {\n"
"          if (len * byteSize === source[MEMORY].byteLength) {\n"
"            const i = len - 1;\n"
"            const v = get.call(source, i);\n"
"            if (v !== value) {\n"
"              throw new MissingSentinel(structure, value, len);\n"
"            }\n"
"          }\n"
"      }\n"
"    : function () {};\n"
"    const bytes = template[MEMORY];\n"
"    return { value, bytes, validateValue, validateData, isRequired };\n"
"  }\n"
"\n"
"  function defineUnionShape(structure, env) {\n"
"    const {\n"
"      type,\n"
"      byteSize,\n"
"      align,\n"
"      instance: { members, template },\n"
"      isIterator,\n"
"      hasPointer,\n"
"    } = structure;\n"
"    const { runtimeSafety } = env;\n"
"    const isTagged = (type === StructureType.TaggedUnion);\n"
"    const exclusion = (isTagged || (type === StructureType.BareUnion && runtimeSafety));\n"
"    const memberDescriptors = {};\n"
"    const memberInitializers = {};\n"
"    const memberValueGetters = {};\n"
"    const valueMembers = (exclusion) ? members.slice(0, -1) : members;\n"
"    const selectorMember = (exclusion) ? members[members.length - 1] : null;\n"
"    const { get: getSelector, set: setSelector } = (exclusion) ? getDescriptor(selectorMember, env) : {};\n"
"    const getActiveField = (isTagged)\n"
"    ? function() {\n"
"        const item = getSelector.call(this);\n"
"        return item[NAME];\n"
"      }\n"
"    : function() {\n"
"        const index = getSelector.call(this);\n"
"        return valueMembers[index].name;\n"
"      };\n"
"    const setActiveField = (isTagged)\n"
"    ? function(name) {\n"
"        const { constructor } = selectorMember.structure;\n"
"        setSelector.call(this, constructor[name]);\n"
"      }\n"
"    : function(name) {\n"
"        const index = valueMembers.findIndex(m => m.name === name);\n"
"        setSelector.call(this, index);\n"
"      };\n"
"    for (const member of valueMembers) {\n"
"      const { name } = member;\n"
"      const { get: getValue, set: setValue } = getDescriptor(member, env);\n"
"      const get = (exclusion)\n"
"      ? function() {\n"
"          const currentName = getActiveField.call(this);\n"
"          if (name !== currentName) {\n"
"            if (isTagged) {\n"
"              // tagged union allows inactive member to be queried\n"
"              return null;\n"
"            } else {\n"
"              // whereas bare union does not, since the condition is not detectable\n"
"              // when runtime safety is off\n"
"              throw new InactiveUnionProperty(structure, name, currentName);\n"
"            }\n"
"          }\n"
"          this[POINTER_VISITOR]?.(resetPointer);\n"
"          return getValue.call(this);\n"
"        }\n"
"      : getValue;\n"
"      const set = (exclusion && setValue)\n"
"      ? function(value) {\n"
"          const currentName = getActiveField.call(this);\n"
"          if (name !== currentName) {\n"
"            throw new InactiveUnionProperty(structure, name, currentName);\n"
"          }\n"
"          setValue.call(this, value);\n"
"        }\n"
"      : setValue;\n"
"      const init = (exclusion && setValue)\n"
"      ? function(value) {\n"
"          setActiveField.call(this, name);\n"
"          setValue.call(this, value);\n"
"          this[POINTER_VISITOR]?.(resetPointer);\n"
"        }\n"
"      : setValue;\n"
"      memberDescriptors[name] = { get, set, configurable: true, enumerable: true };\n"
"      memberInitializers[name] = init;\n"
"      memberValueGetters[name] = getValue;\n"
"    }\n"
"    const hasDefaultMember = !!valueMembers.find(m => !m.isRequired);\n"
"    const memberKeys = Object.keys(memberDescriptors);\n"
"    const propApplier = createPropertyApplier(structure);\n"
"    const initializer = function(arg) {\n"
"      if (arg instanceof constructor) {\n"
"        /* WASM-ONLY-END */\n"
"        this[COPIER](arg);\n"
"        if (hasPointer) {\n"
"          this[POINTER_VISITOR](copyPointer, { vivificate: true, source: arg });\n"
"        }\n"
"      } else if (arg && typeof(arg) === 'object') {\n"
"        let found = 0;\n"
"        for (const key of memberKeys) {\n"
"          if (key in arg) {\n"
"            found++;\n"
"          }\n"
"        }\n"
"        if (found > 1) {\n"
"          throw new MultipleUnionInitializers(structure);\n"
"        }\n"
"        if (propApplier.call(this, arg) === 0 && !hasDefaultMember) {\n"
"          throw new MissingUnionInitializer(structure, arg, exclusion);\n"
"        }\n"
"      } else if (arg !== undefined) {\n"
"        throw new InvalidInitializer(structure, 'object with a single property', arg);\n"
"      }\n"
"    };\n"
"    // non-tagged union as marked as not having pointers--if there're actually\n"
"    // members with pointers, we need to disable them\n"
"    const pointerMembers = members.filter(m => m.structure?.hasPointer);\n"
"    const hasInaccessiblePointer = !hasPointer && (pointerMembers.length > 0);\n"
"    const modifier = (hasInaccessiblePointer && !env.comptime)\n"
"    ? function() {\n"
"        // make pointer access throw\n"
"        this[POINTER_VISITOR](disablePointer, { vivificate: true });\n"
"      }\n"
"    : undefined;\n"
"    const constructor = structure.constructor = createConstructor(structure, { modifier, initializer }, env);\n"
"    const fieldDescriptor = (isTagged)\n"
"    ? {\n"
"        // for tagged union,  only the active field\n"
"        get() { return [ getActiveField.call(this) ] }\n"
"      }\n"
"    : {\n"
"        // for bare and extern union, all members are included\n"
"        value: valueMembers.map(m => m.name)\n"
"      };\n"
"    const isChildActive = (isTagged)\n"
"    ? function(child) {\n"
"        const name = getActiveField.call(this);\n"
"        const active = memberValueGetters[name].call(this);\n"
"        return child === active;\n"
"      }\n"
"    : never;\n"
"    const toPrimitive = (isTagged)\n"
"    ? function(hint) {\n"
"      switch (hint) {\n"
"        case 'string':\n"
"        case 'default':\n"
"          return getActiveField.call(this);\n"
"        default:\n"
"          return getSelector.call(this, 'number');\n"
"      }\n"
"    }\n"
"    : null;\n"
"    const getTagClass = function() { return selectorMember.structure.constructor };\n"
"    const getIterator = (isIterator) ? getIteratorIterator : getUnionIterator;\n"
"    const hasAnyPointer = hasPointer || hasInaccessiblePointer;\n"
"    const hasObject = !!members.find(m => m?.type === MemberType.Object);\n"
"    const instanceDescriptors = {\n"
"      $: { get: getSelf, set: initializer, configurable: true },\n"
"      dataView: getDataViewDescriptor(structure),\n"
"      base64: getBase64Descriptor(structure),\n"
"      valueOf: { value: getValueOf },\n"
"      toJSON: { value: convertToJSON },\n"
"      delete: { value: getDestructor(env) },\n"
"      ...memberDescriptors,\n"
"      [Symbol.iterator]: { value: getIterator },\n"
"      [Symbol.toPrimitive]: isTagged && { value: toPrimitive },\n"
"      [ENTRIES_GETTER]: { value: getUnionEntries },\n"
"      [COPIER]: { value: getMemoryCopier(byteSize) },\n"
"      [TAG]: isTagged && { get: getSelector, configurable: true },\n"
"      [VIVIFICATOR]: hasObject && { value: getChildVivificator$1(structure, env) },\n"
"      [POINTER_VISITOR]: hasAnyPointer && { value: getPointerVisitor$1(structure, { isChildActive }) },\n"
"      [PROP_GETTERS]: { value: memberValueGetters },\n"
"      [WRITE_DISABLER]: { value: makeReadOnly },\n"
"      [PROPS]: fieldDescriptor,\n"
"    };\n"
"    const staticDescriptors = {\n"
"      tag: isTagged && { get: getTagClass },\n"
"      [ALIGN]: { value: align },\n"
"      [SIZE]: { value: byteSize },\n"
"      [TYPE]: { value: structure.type },\n"
"    };\n"
"    attachDescriptors(constructor, instanceDescriptors, staticDescriptors);\n"
"    // replace regular setters with ones that change the active field\n"
"    const setters = constructor.prototype[PROP_SETTERS];\n"
"    for (const [ name, init ] of Object.entries(memberInitializers)) {\n"
"      if (init) {\n"
"        setters[name] = init;\n"
"      }\n"
"    }\n"
"  }\n"
"  function getUnionEntries(options) {\n"
"    return {\n"
"      [Symbol.iterator]: getUnionEntriesIterator.bind(this, options),\n"
"      length: this[PROPS].length,\n"
"    };\n"
"  }\n"
"\n"
"  function getUnionIterator(options) {\n"
"    const entries = getUnionEntries.call(this, options);\n"
"    return entries[Symbol.iterator]();\n"
"  }\n"
"\n"
"  function getUnionEntriesIterator(options) {\n"
"    const self = this;\n"
"    const props = this[PROPS];\n"
"    const getters = this[PROP_GETTERS];\n"
"    let index = 0;\n"
"    return {\n"
"      next() {\n"
"        let value, done;\n"
"        if (index < props.length) {\n"
"          const current = props[index++];\n"
"          // get value of prop with no check\n"
"          value = [ current, handleError(() => getters[current].call(self), options) ];\n"
"          done = false;\n"
"        } else {\n"
"          done = true;\n"
"        }\n"
"        return { value, done };\n"
"      },\n"
"    };\n"
"  }\n"
"\n"
"  function defineVariadicStruct(structure, env) {\n"
"    const {\n"
"      byteSize,\n"
"      align,\n"
"      instance: { members },\n"
"    } = structure;\n"
"    const hasObject = !!members.find(m => m.type === MemberType.Object);\n"
"    const argMembers = members.slice(1);\n"
"    const argCount = argMembers.length;\n"
"    const argKeys = argMembers.map(m => m.name);\n"
"    const maxSlot = members.map(m => m.slot).sort().pop();\n"
"    const constructor = structure.constructor = function(args, name, offset) {\n"
"      if (args.length < argCount) {\n"
"        throw new ArgumentCountMismatch(name, `at least ${argCount - offset}`, args.length - offset);\n"
"      }\n"
"      // calculate the actual size of the struct based on arguments given\n"
"      let totalByteSize = byteSize;\n"
"      const varArgs = args.slice(argCount);\n"
"      const offsets = {};\n"
"      for (const [ index, arg ] of varArgs.entries()) {\n"
"        const dv = arg[MEMORY];\n"
"        let argAlign = arg.constructor[ALIGN];\n"
"        if (!dv || !argAlign) {\n"
"          const err = new InvalidVariadicArgument();\n"
"          throw adjustArgumentError(name, index - offset, argCount - offset, err);\n"
"        }\n"
"        const offset = offsets[index] = (totalByteSize + argAlign - 1) & ~(argAlign - 1);\n"
"        totalByteSize = offset + dv.byteLength;\n"
"      }\n"
"      const attrs = new ArgAttributes(args.length);\n"
"      const dv = env.allocateMemory(totalByteSize);\n"
"      this[MEMORY] = dv;\n"
"      this[SLOTS] = {};\n"
"      for (const [ index, key ] of argKeys.entries()) {\n"
"        try {\n"
"          this[key] = args[index];\n"
"        } catch (err) {\n"
"          throw adjustArgumentError(name, index - offset, argCount - offset, err);\n"
"        }\n"
"      }\n"
"      // set attributes of retval and fixed args\n"
"      for (const [ index, { bitOffset, byteSize, type, structure: { align } } ] of argMembers.entries()) {\n"
"        attrs.set(index, bitOffset / 8, byteSize, align, type);\n"
"      }\n"
"      // create additional child objects and copy arguments into them\n"
"      for (const [ index, arg ] of varArgs.entries()) {\n"
"        const slot = maxSlot + index + 1;\n"
"        const { byteLength } = arg[MEMORY];\n"
"        const offset = offsets[index];\n"
"        const childDV = env.obtainView(dv.buffer, offset, byteLength);\n"
"        const child = this[SLOTS][slot] = arg.constructor.call(PARENT, childDV);\n"
"        child.$ = arg;\n"
"        // set attributes\n"
"        attrs.set(argCount + index, offset, byteLength, arg.constructor[ALIGN], arg.constructor[PRIMITIVE]);\n"
"      }\n"
"      this[ATTRIBUTES] = attrs;\n"
"    };\n"
"    const memberDescriptors = {};\n"
"    for (const member of members) {\n"
"      memberDescriptors[member.name] = getDescriptor(member, env);\n"
"    }\n"
"    const { slot: retvalSlot, type: retvalType } = members[0];\n"
"    const isChildMutable = (retvalType === MemberType.Object)\n"
"    ? function(object) {\n"
"        const child = this[VIVIFICATOR](retvalSlot);\n"
"        return object === child;\n"
"      }\n"
"    : function() { return false };\n"
"    const visitPointers = function(cb, options = {}) {\n"
"      const {\n"
"        vivificate = false,\n"
"        isActive = always,\n"
"        isMutable = always,\n"
"      } = options;\n"
"      const childOptions = {\n"
"        ...options,\n"
"        isActive,\n"
"        isMutable: (object) => isMutable(this) && isChildMutable.call(this, object),\n"
"      };\n"
"      if (vivificate && retvalType === MemberType.Object) {\n"
"        this[VIVIFICATOR](retvalSlot);\n"
"      }\n"
"      for (const child of Object.values(this[SLOTS])) {\n"
"        child?.[POINTER_VISITOR]?.(cb, childOptions);\n"
"      }\n"
"    };\n"
"    const ArgAttributes = function(length) {\n"
"      this[MEMORY] = env.allocateMemory(length * 8, 4);\n"
"      this.length = length;\n"
"      this.littleEndian = env.littleEndian;\n"
"    };\n"
"    const setAttributes = function(index, offset, size, align, type) {\n"
"      const dv = this[MEMORY];\n"
"      const le = env.littleEndian;\n"
"      dv.setUint16(index * 8, offset, le);\n"
"      dv.setUint16(index * 8 + 2, size, le);\n"
"      dv.setUint16(index * 8 + 4, align, le);\n"
"      dv.setUint8(index * 8 + 6, type == MemberType.Float);\n"
"      dv.setUint8(index * 8 + 7, type == MemberType.Int);\n"
"    };\n"
"    defineProperties(ArgAttributes.prototype, {\n"
"      set: { value: setAttributes },\n"
"      [COPIER]: { value: getMemoryCopier(4, true) },\n"
"      [ALIGN]: { value: 4 },\n"
"    });\n"
"    defineProperties(constructor.prototype, {\n"
"      ...memberDescriptors,\n"
"      [COPIER]: { value: getMemoryCopier(undefined, true) },\n"
"      [VIVIFICATOR]: hasObject && { value: getChildVivificator$1(structure, env) },\n"
"      [POINTER_VISITOR]: { value: visitPointers },\n"
"    });\n"
"    defineProperties(constructor, {\n"
"      [SIZE]: { value: byteSize },\n"
"    });\n"
"    return constructor;\n"
"  }\n"
"\n"
"  const factories = Array(Object.values(StructureType).length);\n"
"\n"
"  function usePrimitive() {\n"
"    factories[StructureType.Primitive] = definePrimitive;\n"
"  }\n"
"\n"
"  function useArray() {\n"
"    factories[StructureType.Array] = defineArray;\n"
"  }\n"
"\n"
"  function useStruct() {\n"
"    factories[StructureType.Struct] = defineStructShape;\n"
"  }\n"
"\n"
"  function usePackedStruct() {\n"
"    factories[StructureType.PackedStruct] = defineStructShape;\n"
"  }\n"
"\n"
"  function useExternStruct() {\n"
"    factories[StructureType.ExternStruct] = defineStructShape;\n"
"  }\n"
"\n"
"  function useArgStruct() {\n"
"    factories[StructureType.ArgStruct] = defineArgStruct;\n"
"  }\n"
"\n"
"  function useVariadicStruct() {\n"
"    factories[StructureType.VariadicStruct] = defineVariadicStruct;\n"
"  }\n"
"\n"
"  function useExternUnion() {\n"
"    factories[StructureType.ExternUnion] = defineUnionShape;\n"
"  }\n"
"\n"
"  function useBareUnion() {\n"
"    factories[StructureType.BareUnion] = defineUnionShape;\n"
"  }\n"
"\n"
"  function useTaggedUnion() {\n"
"    factories[StructureType.TaggedUnion] = defineUnionShape;\n"
"  }\n"
"\n"
"  function useErrorUnion() {\n"
"    factories[StructureType.ErrorUnion] = defineErrorUnion;\n"
"  }\n"
"\n"
"  function useErrorSet() {\n"
"    factories[StructureType.ErrorSet] = defineErrorSet;\n"
"    useErrorSetTransform();\n"
"  }\n"
"\n"
"  function useEnum() {\n"
"    factories[StructureType.Enum] = defineEnumerationShape;\n"
"    useEnumerationTransform();\n"
"  }\n"
"\n"
"  function useOptional() {\n"
"    factories[StructureType.Optional] = defineOptional;\n"
"  }\n"
"\n"
"  function useSinglePointer() {\n"
"    factories[StructureType.SinglePointer] = definePointer;\n"
"    useUint();\n"
"  }\n"
"\n"
"  function useSlicePointer() {\n"
"    factories[StructureType.SlicePointer] = definePointer;\n"
"    useUint();\n"
"  }\n"
"\n"
"  function useMultiPointer() {\n"
"    factories[StructureType.MultiPointer] = definePointer;\n"
"    useUint();\n"
"  }\n"
"\n"
"  function useCPointer() {\n"
"    factories[StructureType.CPointer] = definePointer;\n"
"    useUint();\n"
"  }\n"
"\n"
"  function useSlice() {\n"
"    factories[StructureType.Slice] = defineSlice;\n"
"  }\n"
"\n"
"  function useVector() {\n"
"    factories[StructureType.Vector] = defineVector;\n"
"  }\n"
"\n"
"  function useOpaque() {\n"
"    factories[StructureType.Opaque] = defineOpaque;\n"
"  }\n"
"\n"
"  function getStructureFactory(type) {\n"
"    const f = factories[type];\n"
"    return f;\n"
"  }\n"
"\n"
"  function findAllObjects(structures, SLOTS) {\n"
"    const list = [];\n"
"    const found = new Map();\n"
"    const find = (object) => {\n"
"      if (!object || found.get(object)) {\n"
"        return;\n"
"      }\n"
"      found.set(object, true);\n"
"      list.push(object);\n"
"      if (object[SLOTS]) {\n"
"        for (const child of Object.values(object[SLOTS])) {\n"
"          find(child);\n"
"        }\n"
"      }\n"
"    };\n"
"    for (const structure of structures) {\n"
"      find(structure.instance.template);\n"
"      find(structure.static.template);\n"
"    }\n"
"    return list;\n"
"  }\n"
"\n"
"  function useAllStructureTypes() {\n"
"    usePrimitive();\n"
"    useArray();\n"
"    useStruct();\n"
"    useExternStruct();\n"
"    usePackedStruct();\n"
"    useArgStruct();\n"
"    useVariadicStruct();\n"
"    useExternUnion();\n"
"    useBareUnion();\n"
"    useTaggedUnion();\n"
"    useErrorUnion();\n"
"    useErrorSet();\n"
"    useEnum();\n"
"    useOptional();\n"
"    useSinglePointer();\n"
"    useSlicePointer();\n"
"    useMultiPointer();\n"
"    useCPointer();\n"
"    useSlice();\n"
"    useVector();\n"
"    useOpaque();\n"
"  }\n"
"\n"
"  function addMethods(s, env) {\n"
"    const add = (target, { methods }, pushThis) => {\n"
"      const descriptors = {};\n"
"      const re = /^(get|set)\\s+([\\s\\S]+)/;\n"
"      for (const method of methods) {\n"
"        const f = env.createCaller(method, pushThis);\n"
"        const m = re.exec(f.name);\n"
"        if (m) {\n"
"          // getter/setter\n"
"          const type = m[1], propName = m[2];\n"
"          const argRequired = (type === 'get') ? 0 : 1;\n"
"          const argCount = getArgumentCount(method, pushThis);\n"
"          // need to match arg count, since instance methods also show up as static methods\n"
"          if (argCount === argRequired) {\n"
"            let descriptor = descriptors[propName];\n"
"            if (!descriptor) {\n"
"              descriptor = descriptors[propName] = { configurable: true, enumerable: true };\n"
"            }\n"
"            descriptor[type] = f;\n"
"          }\n"
"        } else {\n"
"          descriptors[f.name] = { value: f, configurable: true, writable: true };\n"
"        }\n"
"      }\n"
"      defineProperties(target, descriptors);\n"
"    };\n"
"    add(s.constructor, s.static, false);\n"
"    add(s.constructor.prototype, s.instance, true);\n"
"  }\n"
"\n"
"  function getArgumentCount(method, pushThis) {\n"
"    const { argStruct: { instance: { members } } } = method;\n"
"    return members.length - (pushThis ? 2 : 1);\n"
"  }\n"
"\n"
"  function addStaticMembers(structure, env) {\n"
"    const {\n"
"      type,\n"
"      constructor,\n"
"      static: { members, template },\n"
"    } = structure;\n"
"    const descriptors = {};\n"
"    for (const member of members) {\n"
"      descriptors[member.name] = getDescriptor(member, env);\n"
"    }\n"
"    defineProperties(constructor, {\n"
"      valueOf: { value: getValueOf },\n"
"      toJSON: { value: convertToJSON },\n"
"      ...descriptors,\n"
"      [Symbol.iterator]: { value: getStructIterator },\n"
"      [ENTRIES_GETTER]: { value: getStructEntries },\n"
"      // static variables are objects stored in the static template's slots\n"
"      [SLOTS]: template && { value: template[SLOTS] },\n"
"      // anyerror would have props already\n"
"      [PROPS]: !constructor[PROPS] && { value: members.map(m => m.name) },\n"
"    });\n"
"    if (type === StructureType.Enum) {\n"
"      for (const { name, slot } of members) {\n"
"        appendEnumeration(constructor, name, constructor[SLOTS][slot]);\n"
"      }\n"
"    } else if (type === StructureType.ErrorSet) {\n"
"      for (const { name, slot } of members) {\n"
"        appendErrorSet(constructor, name, constructor[SLOTS][slot]);\n"
"      }\n"
"    }\n"
"  }\n"
"\n"
"  class Environment {\n"
"    context;\n"
"    contextStack = [];\n"
"    consolePending = [];\n"
"    consoleTimeout = 0;\n"
"    viewMap = new WeakMap();\n"
"    emptyBuffer = new ArrayBuffer(0);\n"
"    abandoned = false;\n"
"    released = false;\n"
"    littleEndian = true;\n"
"    wordSize = 4;\n"
"    runtimeSafety = true;\n"
"    comptime = false;\n"
"    /* COMPTIME-ONLY */\n"
"    slots = {};\n"
"    structures = [];\n"
"    /* COMPTIME-ONLY-END */\n"
"    /* RUNTIME-ONLY */\n"
"    variables = [];\n"
"    /* RUNTIME-ONLY-END */\n"
"    imports;\n"
"    console = globalThis.console;\n"
"\n"
"\n"
"    startContext() {\n"
"      if (this.context) {\n"
"        this.contextStack.push(this.context);\n"
"      }\n"
"      this.context = new CallContext();\n"
"    }\n"
"\n"
"    endContext() {\n"
"      this.context = this.contextStack.pop();\n"
"    }\n"
"\n"
"    allocateMemory(len, align = 0, fixed = false) {\n"
"      if (fixed) {\n"
"        return this.allocateFixedMemory(len, align);\n"
"      } else {\n"
"        return this.allocateRelocMemory(len, align);\n"
"      }\n"
"    }\n"
"\n"
"    allocateFixedMemory(len, align) {\n"
"      const address = (len) ? this.allocateExternMemory(len, align) : 0;\n"
"      const dv = this.obtainFixedView(address, len);\n"
"      dv[FIXED].align = align;\n"
"      return dv;\n"
"    }\n"
"\n"
"    freeFixedMemory(address, len, align) {\n"
"      if (len) {\n"
"        this.freeExternMemory(address, len, align);\n"
"      }\n"
"    }\n"
"\n"
"    obtainFixedView(address, len) {\n"
"      let dv;\n"
"      if (address && len) {\n"
"        dv = this.obtainExternView(address, len);\n"
"      } else {\n"
"        // pointer to nothing\n"
"        let entry = this.viewMap.get(this.emptyBuffer);\n"
"        if (!entry) {\n"
"          this.viewMap.set(this.emptyBuffer, entry = {});\n"
"        }\n"
"        const key = `${address}:0`;\n"
"        dv = entry[key];\n"
"        if (!dv) {\n"
"          dv = entry[key] = new DataView(this.emptyBuffer);\n"
"          dv[FIXED] = { address, len: 0 };\n"
"        }\n"
"      }\n"
"      return dv;\n"
"    }\n"
"\n"
"    releaseFixedView(dv) {\n"
"      const { address, len, align } = dv[FIXED];\n"
"      // only allocated memory would have align attached\n"
"      if (align !== undefined) {\n"
"        this.freeFixedMemory(address, len, align);\n"
"        dv[FIXED] = null;\n"
"      }\n"
"    }\n"
"\n"
"    allocateRelocMemory(len, align) {\n"
"      return this.obtainView(new ArrayBuffer(len), 0, len);\n"
"    }\n"
"\n"
"    registerMemory(dv, targetDV = null, targetAlign = undefined) {\n"
"      const { memoryList } = this.context;\n"
"      const address = this.getViewAddress(dv);\n"
"      const index = findMemoryIndex(memoryList, address);\n"
"      memoryList.splice(index, 0, { address, dv, len: dv.byteLength, targetDV, targetAlign });\n"
"      return address;\n"
"    }\n"
"\n"
"    unregisterMemory(address) {\n"
"      const { memoryList } = this.context;\n"
"      const index = findMemoryIndex(memoryList, address);\n"
"      const prev = memoryList[index - 1];\n"
"      if (prev?.address === address) {\n"
"        memoryList.splice(index - 1, 1);\n"
"      }\n"
"    }\n"
"\n"
"    findMemory(address, count, size) {\n"
"      if (isInvalidAddress(address)) {\n"
"        if (!count) {\n"
"          address = 0;\n"
"        } else {\n"
"          return null;\n"
"        }\n"
"      } else if (!address && count) {\n"
"        return null;\n"
"      }\n"
"      let len = count * (size ?? 0);\n"
"      // check for null address (=== can't be used since address can be both number and bigint)\n"
"      if (this.context) {\n"
"        const { memoryList } = this.context;\n"
"        const index = findMemoryIndex(memoryList, address);\n"
"        const entry = memoryList[index - 1];\n"
"        if (entry?.address === address && entry.len === len) {\n"
"          return entry.targetDV ?? entry.dv;\n"
"        } else if (entry?.address <= address && address < add(entry.address, entry.len)) {\n"
"          const offset = Number(address - entry.address);\n"
"          const targetDV = entry.targetDV ?? entry.dv;\n"
"          const isOpaque = size === undefined;\n"
"          if (isOpaque) {\n"
"            len = targetDV.byteLength - offset;\n"
"          }\n"
"          const dv = this.obtainView(targetDV.buffer, targetDV.byteOffset + offset, len);\n"
"          if (isOpaque) {\n"
"            // opaque structure--need to save the alignment\n"
"            dv[ALIGN] = entry.targetAlign;\n"
"          }\n"
"          return dv;\n"
"        }\n"
"      }\n"
"      // not found in any of the buffers we've seen--assume it's fixed memory\n"
"      return this.obtainFixedView(address, len);\n"
"    }\n"
"\n"
"    getViewAddress(dv) {\n"
"      const fixed = dv[FIXED];\n"
"      if (fixed) {\n"
"        return fixed.address;\n"
"      } else {\n"
"        const address = this.getBufferAddress(dv.buffer);\n"
"        return add(address, dv.byteOffset);\n"
"      }\n"
"    }\n"
"\n"
"    findViewAt(buffer, offset, len) {\n"
"      let entry = this.viewMap.get(buffer);\n"
"      let existing;\n"
"      if (entry) {\n"
"        if (entry instanceof DataView) {\n"
"          // only one view created thus far--see if that's the matching one\n"
"          if (entry.byteOffset === offset && entry.byteLength === len) {\n"
"            existing = entry;\n"
"          } else {\n"
"            // no, need to replace the entry with a hash keyed by `offset:len`\n"
"            const prev = entry;\n"
"            const prevKey = `${prev.byteOffset}:${prev.byteLength}`;\n"
"            entry = { [prevKey]: prev };\n"
"            this.viewMap.set(buffer, entry);\n"
"          }\n"
"        } else {\n"
"          existing = entry[`${offset}:${len}`];\n"
"        }\n"
"      }\n"
"      return { existing, entry };\n"
"    }\n"
"\n"
"    obtainView(buffer, offset, len) {\n"
"      const { existing, entry } = this.findViewAt(buffer, offset, len);\n"
"      let dv;\n"
"      if (existing) {\n"
"        return existing;\n"
"      } else if (entry) {\n"
"        dv = entry[`${offset}:${len}`] = new DataView(buffer, offset, len);\n"
"      } else {\n"
"        // just one view of this buffer for now\n"
"        this.viewMap.set(buffer, dv = new DataView(buffer, offset, len));\n"
"      }\n"
"      const fixed = buffer[FIXED];\n"
"      if (fixed) {\n"
"        // attach address to view of fixed buffer\n"
"        dv[FIXED] = { address: add(fixed.address, offset), len };\n"
"      }\n"
"      return dv;\n"
"    }\n"
"\n"
"    registerView(dv) {\n"
"      if (!dv[FIXED]) {\n"
"        const { buffer, byteOffset, byteLength } = dv;\n"
"        const { existing, entry } = this.findViewAt(buffer, byteOffset, byteLength);\n"
"        if (existing) {\n"
"          // return existing view instead of this one\n"
"          return existing;\n"
"        } else if (entry) {\n"
"          entry[`${byteOffset}:${byteLength}`] = dv;\n"
"        } else {\n"
"          this.viewMap.set(buffer, dv);\n"
"        }\n"
"      }\n"
"      return dv;\n"
"    }\n"
"\n"
"    captureView(address, len, copy) {\n"
"      if (copy) {\n"
"        // copy content into reloctable memory\n"
"        const dv = this.allocateRelocMemory(len, 0);\n"
"        if (len > 0) {\n"
"          this.copyBytes(dv, address, len);\n"
"        }\n"
"        return dv;\n"
"      } else {\n"
"        // link into fixed memory\n"
"        return this.obtainFixedView(address, len);\n"
"      }\n"
"    }\n"
"\n"
"    castView(address, len, copy, structure) {\n"
"      const { constructor, hasPointer } = structure;\n"
"      const dv = this.captureView(address, len, copy);\n"
"      const object = constructor.call(ENVIRONMENT, dv);\n"
"      if (hasPointer) {\n"
"        // acquire targets of pointers\n"
"        this.updatePointerTargets(object);\n"
"      }\n"
"      if (copy) {\n"
"        object[WRITE_DISABLER]();\n"
"      }\n"
"      return object;\n"
"    }\n"
"\n"
"    /* COMPTIME-ONLY */\n"
"    readSlot(target, slot) {\n"
"      const slots = target ? target[SLOTS] : this.slots;\n"
"      return slots?.[slot];\n"
"    }\n"
"\n"
"    writeSlot(target, slot, value) {\n"
"      const slots = target ? target[SLOTS] : this.slots;\n"
"      if (slots) {\n"
"        slots[slot] = value;\n"
"      }\n"
"    }\n"
"\n"
"    createTemplate(dv) {\n"
"      return {\n"
"        [MEMORY]: dv,\n"
"        [SLOTS]: {}\n"
"      };\n"
"    }\n"
"\n"
"    beginStructure(def) {\n"
"      const {\n"
"        type,\n"
"        name,\n"
"        length,\n"
"        byteSize,\n"
"        align,\n"
"        isConst,\n"
"        isTuple,\n"
"        isIterator,\n"
"        hasPointer,\n"
"      } = def;\n"
"      return {\n"
"        constructor: null,\n"
"        typedArray: null,\n"
"        type,\n"
"        name,\n"
"        length,\n"
"        byteSize,\n"
"        align,\n"
"        isConst,\n"
"        isTuple,\n"
"        isIterator,\n"
"        hasPointer,\n"
"        instance: {\n"
"          members: [],\n"
"          methods: [],\n"
"          template: null,\n"
"        },\n"
"        static: {\n"
"          members: [],\n"
"          methods: [],\n"
"          template: null,\n"
"        },\n"
"      };\n"
"    }\n"
"\n"
"    attachMember(structure, member, isStatic = false) {\n"
"      const target = (isStatic) ? structure.static : structure.instance;\n"
"      target.members.push(member);\n"
"    }\n"
"\n"
"    attachMethod(structure, method, isStaticOnly = false) {\n"
"      structure.static.methods.push(method);\n"
"      if (!isStaticOnly) {\n"
"        structure.instance.methods.push(method);\n"
"      }\n"
"    }\n"
"\n"
"    attachTemplate(structure, template, isStatic = false) {\n"
"      const target = (isStatic) ? structure.static : structure.instance;\n"
"      target.template = template;\n"
"    }\n"
"\n"
"    endStructure(structure) {\n"
"      this.structures.push(structure);\n"
"      this.finalizeStructure(structure);\n"
"    }\n"
"\n"
"    defineFactoryArgStruct() {\n"
"      useBool();\n"
"      useObject();\n"
"      useArgStruct();\n"
"      const options = this.beginStructure({\n"
"        type: StructureType.Struct,\n"
"        name: 'Options',\n"
"        byteSize: 2,\n"
"        hasPointer: false,\n"
"      });\n"
"      this.attachMember(options, {\n"
"        type: MemberType.Bool,\n"
"        name: 'omitFunctions',\n"
"        bitOffset: 0,\n"
"        bitSize: 1,\n"
"        byteSize: 1,\n"
"      });\n"
"      this.attachMember(options, {\n"
"        type: MemberType.Bool,\n"
"        name: 'omitVariables',\n"
"        bitOffset: 8,\n"
"        bitSize: 1,\n"
"        byteSize: 1,\n"
"      });\n"
"      this.finalizeShape(options);\n"
"      const structure = this.beginStructure({\n"
"        type: StructureType.ArgStruct,\n"
"        name: 'ArgFactory',\n"
"        byteSize: 2,\n"
"        hasPointer: false,\n"
"      });\n"
"      this.attachMember(structure, {\n"
"        type: MemberType.Void,\n"
"        name: 'retval',\n"
"        bitOffset: 0,\n"
"        bitSize: 0,\n"
"        byteSize: 0\n"
"      });\n"
"      this.attachMember(structure, {\n"
"        type: MemberType.Object,\n"
"        name: '0',\n"
"        bitOffset: 0,\n"
"        bitSize: 16,\n"
"        byteSize: 2,\n"
"        slot: 0,\n"
"        structure: options,\n"
"      });\n"
"      this.finalizeShape(structure);\n"
"      return structure.constructor;\n"
"    }\n"
"\n"
"    acquireStructures(options) {\n"
"      const {\n"
"        omitFunctions = false,\n"
"        omitVariables = isElectron(),\n"
"      } = options;\n"
"      resetGlobalErrorSet();\n"
"      const thunkId = this.getFactoryThunk();\n"
"      const ArgStruct = this.defineFactoryArgStruct();\n"
"      const args = new ArgStruct([ { omitFunctions, omitVariables } ]);\n"
"      this.comptime = true;\n"
"      this.invokeThunk(thunkId, args);\n"
"      this.comptime = false;\n"
"    }\n"
"\n"
"    getRootModule() {\n"
"      const root = this.structures[this.structures.length - 1];\n"
"      return root.constructor;\n"
"    }\n"
"\n"
"    hasMethods() {\n"
"      // all methods are static, so there's no need to check instance methods\n"
"      return !!this.structures.find(s => s.static.methods.length > 0);\n"
"    }\n"
"\n"
"    exportStructures() {\n"
"      this.acquireDefaultPointers();\n"
"      this.prepareObjectsForExport();\n"
"      const { structures, runtimeSafety, littleEndian } = this;\n"
"      return {\n"
"        structures,\n"
"        options: { runtimeSafety, littleEndian },\n"
"        keys: { MEMORY, SLOTS, CONST_TARGET },\n"
"      };\n"
"    }\n"
"\n"
"    prepareObjectsForExport() {\n"
"      const objects = findAllObjects(this.structures, SLOTS);\n"
"      const list = [];\n"
"      for (const object of objects) {\n"
"        if (object[MEMORY]?.[FIXED]) {\n"
"          // replace fixed memory\n"
"          const dv = object[MEMORY];\n"
"          const address = this.getViewAddress(dv);\n"
"          const offset = this.getMemoryOffset(address);\n"
"          const len = dv.byteLength;\n"
"          const relocDV = this.captureView(address, len, true);\n"
"          relocDV.reloc = offset;\n"
"          object[MEMORY] = relocDV;\n"
"          list.push({ offset, len, owner: object, replaced: false });\n"
"        }\n"
"      }\n"
"      // larger memory blocks come first\n"
"      list.sort((a, b) => b.len - a.len);\n"
"      for (const a of list) {\n"
"        if (!a.replaced) {\n"
"          for (const b of list) {\n"
"            if (a !== b && !b.replaced) {\n"
"              if (a.offset <= b.offset && b.offset < a.offset + a.len) {\n"
"                // B is inside A--replace it with a view of A's buffer\n"
"                const dv = a.owner[MEMORY];\n"
"                const pos = b.offset - a.offset + dv.byteOffset;\n"
"                const newDV = this.obtainView(dv.buffer, pos, b.len);\n"
"                newDV.reloc = b.offset;\n"
"                b.owner[MEMORY] = newDV;\n"
"                b.replaced = true;\n"
"              }\n"
"            }\n"
"          }\n"
"        }\n"
"      }\n"
"    }\n"
"\n"
"    useStructures() {\n"
"      const module = this.getRootModule();\n"
"      // add fixed memory object to list so they can be unlinked\n"
"      const objects = findAllObjects(this.structures, SLOTS);\n"
"      for (const object of objects) {\n"
"        if (object[MEMORY]?.[FIXED]) {\n"
"          this.variables.push({ object });\n"
"        }\n"
"      }\n"
"      // clear comptime-only variables\n"
"      this.slots = {};\n"
"      this.structures = [];\n"
"      module.__zigar = this.getSpecialExports();\n"
"      return module;\n"
"    }\n"
"    /* COMPTIME-ONLY-END */\n"
"\n"
"    finalizeShape(structure) {\n"
"      const f = getStructureFactory(structure.type);\n"
"      const constructor = f(structure, this);\n"
"      if (typeof(constructor) === 'function') {\n"
"        defineProperties(constructor, {\n"
"          name: { value: structure.name, configurable: true },\n"
"        });\n"
"        if (!constructor.prototype.hasOwnProperty(Symbol.toStringTag)) {\n"
"          defineProperties(constructor.prototype, {\n"
"            [Symbol.toStringTag]: { value: structure.name, configurable: true },\n"
"          });\n"
"        }\n"
"      }\n"
"    }\n"
"\n"
"    finalizeStructure(structure) {\n"
"      addStaticMembers(structure, this);\n"
"      addMethods(structure, this);\n"
"    }\n"
"\n"
"    createCaller(method, useThis) {\n"
"      const { name, argStruct, thunkId } = method;\n"
"      const { constructor } = argStruct;\n"
"      const self = this;\n"
"      let f;\n"
"      if (useThis) {\n"
"        f = function(...args) {\n"
"          return self.invokeThunk(thunkId, new constructor([ this, ...args ], name, 1));\n"
"        };\n"
"      } else {\n"
"        f = function(...args) {\n"
"          return self.invokeThunk(thunkId, new constructor(args, name, 0));\n"
"        };\n"
"      }\n"
"      Object.defineProperty(f, 'name', { value: name });\n"
"      return f;\n"
"    }\n"
"\n"
"    /* RUNTIME-ONLY */\n"
"    recreateStructures(structures, options) {\n"
"      Object.assign(this, options);\n"
"      const insertObjects = (dest, placeholders) => {\n"
"        for (const [ slot, placeholder ] of Object.entries(placeholders)) {\n"
"          dest[slot] = createObject(placeholder);\n"
"        }\n"
"        return dest;\n"
"      };\n"
"      const createObject = (placeholder) => {\n"
"        const { memory, structure, actual } = placeholder;\n"
"        if (memory) {\n"
"          if (actual) {\n"
"            return actual;\n"
"          } else {\n"
"            const { array, offset, length } = memory;\n"
"            const dv = this.obtainView(array.buffer, offset, length);\n"
"            const { constructor } = structure;\n"
"            const { reloc, const: isConst } = placeholder;\n"
"            const object = placeholder.actual = constructor.call(ENVIRONMENT, dv);\n"
"            if (isConst) {\n"
"              object[WRITE_DISABLER]?.();\n"
"            }\n"
"            if (placeholder.slots) {\n"
"              insertObjects(object[SLOTS], placeholder.slots);\n"
"            }\n"
"            if (reloc !== undefined) {\n"
"              // need to replace dataview with one pointing to fixed memory later,\n"
"              // when the VM is up and running\n"
"              this.variables.push({ reloc, object });\n"
"            }\n"
"            return object;\n"
"          }\n"
"        } else {\n"
"          return structure;\n"
"        }\n"
"      };\n"
"      resetGlobalErrorSet();\n"
"      const objectPlaceholders = new Map();\n"
"      for (const structure of structures) {\n"
"        // recreate the actual template using the provided placeholder\n"
"        for (const scope of [ structure.instance, structure.static ]) {\n"
"          if (scope.template) {\n"
"            const placeholder = scope.template;\n"
"            const template = scope.template = {};\n"
"            if (placeholder.memory) {\n"
"              const { array, offset, length } = placeholder.memory;\n"
"              template[MEMORY] = this.obtainView(array.buffer, offset, length);\n"
"            }\n"
"            if (placeholder.slots) {\n"
"              // defer creation of objects until shapes of structures are finalized\n"
"              const slots = template[SLOTS] = {};\n"
"              objectPlaceholders.set(slots, placeholder.slots);\n"
"            }\n"
"          }\n"
"        }\n"
"        this.finalizeShape(structure);\n"
"      }\n"
"      // insert objects into template slots\n"
"      for (const [ slots, placeholders ] of objectPlaceholders) {\n"
"        insertObjects(slots, placeholders);\n"
"      }\n"
"      // add static members, methods, etc.\n"
"      for (const structure of structures) {\n"
"        this.finalizeStructure(structure);\n"
"      }\n"
"    }\n"
"\n"
"    linkVariables(writeBack) {\n"
"      const pointers = [];\n"
"      for (const { object, reloc } of this.variables) {\n"
"        this.linkObject(object, reloc, writeBack);\n"
"        const getter = object[TARGET_GETTER];\n"
"        if (getter && object[SLOTS][0]) {\n"
"          pointers.push(object);\n"
"        }\n"
"      }\n"
"      // save locations of pointer targets\n"
"      for (const pointer of pointers) {\n"
"        const target = pointer[TARGET_GETTER]();\n"
"        const address = this.getViewAddress(target[MEMORY]);\n"
"        pointer[ADDRESS_SETTER](address);\n"
"        pointer[LENGTH_SETTER]?.(target.length);\n"
"      }\n"
"    }\n"
"\n"
"    linkObject(object, reloc, writeBack) {\n"
"      if (object[MEMORY][FIXED]) {\n"
"        return;\n"
"      }\n"
"      const dv = object[MEMORY];\n"
"      const address = this.recreateAddress(reloc);\n"
"      const fixedDV = this.obtainFixedView(address, dv.byteLength);\n"
"      if (writeBack) {\n"
"        const dest = Object.create(object.constructor.prototype);\n"
"        dest[MEMORY] = fixedDV;\n"
"        dest[COPIER](object);\n"
"      }\n"
"      object[MEMORY] = fixedDV;\n"
"      const linkChildren = (object) => {\n"
"        if (object[SLOTS]) {\n"
"          for (const child of Object.values(object[SLOTS])) {\n"
"            if (child) {\n"
"              const childDV = child[MEMORY];\n"
"              if (childDV.buffer === dv.buffer) {\n"
"                const offset = childDV.byteOffset - dv.byteOffset;\n"
"                child[MEMORY] = this.obtainView(fixedDV.buffer, offset, childDV.byteLength);\n"
"                linkChildren(child);\n"
"              }\n"
"            }\n"
"          }\n"
"        }\n"
"      };\n"
"      linkChildren(object);\n"
"    }\n"
"\n"
"    unlinkVariables() {\n"
"      for (const { object } of this.variables) {\n"
"        this.unlinkObject(object);\n"
"      }\n"
"    }\n"
"\n"
"    unlinkObject(object) {\n"
"      if (!object[MEMORY][FIXED]) {\n"
"        return;\n"
"      }\n"
"      const dv = object[MEMORY];\n"
"      const relocDV = this.allocateMemory(dv.byteLength);\n"
"      const dest = Object.create(object.constructor.prototype);\n"
"      dest[MEMORY] = relocDV;\n"
"      dest[COPIER](object);\n"
"      object[MEMORY] = relocDV;\n"
"    }\n"
"\n"
"    releaseFunctions() {\n"
"      const throwError = () => { throw new Error(`Module was abandoned`) };\n"
"      for (const name of Object.keys(this.imports)) {\n"
"        if (this[name]) {\n"
"          this[name] = throwError;\n"
"        }\n"
"      }\n"
"    }\n"
"\n"
"    getSpecialExports() {\n"
"      const check = (v) => {\n"
"        if (v === undefined) throw new Error('Not a Zig type');\n"
"        return v;\n"
"      };\n"
"      return {\n"
"        init: (...args) => this.init(...args),\n"
"        abandon: () => this.abandon(),\n"
"        released: () => this.released,\n"
"        connect: (c) => this.console = c,\n"
"        sizeOf: (T) => check(T[SIZE]),\n"
"        alignOf: (T) => check(T[ALIGN]),\n"
"        typeOf: (T) => getStructureName(check(T[TYPE])),\n"
"      };\n"
"    }\n"
"\n"
"    abandon() {\n"
"      if (!this.abandoned) {\n"
"        this.releaseFunctions();\n"
"        this.unlinkVariables();\n"
"        this.abandoned = true;\n"
"      }\n"
"    }\n"
"\n"
"    updatePointerAddresses(args) {\n"
"      // first, collect all the pointers\n"
"      const pointerMap = new Map();\n"
"      const bufferMap = new Map();\n"
"      const potentialClusters = [];\n"
"      const callback = function({ isActive }) {\n"
"        if (isActive(this)) {\n"
"          // bypass proxy\n"
"          const pointer = this[POINTER];\n"
"          if (!pointerMap.get(pointer)) {\n"
"            const target = pointer[SLOTS][0];\n"
"            if (target) {\n"
"              pointerMap.set(pointer, target);\n"
"              // only relocatable targets need updating\n"
"              const dv = target[MEMORY];\n"
"              if (!dv[FIXED]) {\n"
"                // see if the buffer is shared with other objects\n"
"                const other = bufferMap.get(dv.buffer);\n"
"                if (other) {\n"
"                  const array = Array.isArray(other) ? other : [ other ];\n"
"                  const index = findSortedIndex(array, dv.byteOffset, t => t[MEMORY].byteOffset);\n"
"                  array.splice(index, 0, target);\n"
"                  if (!Array.isArray(other)) {\n"
"                    bufferMap.set(dv.buffer, array);\n"
"                    potentialClusters.push(array);\n"
"                  }\n"
"                } else {\n"
"                  bufferMap.set(dv.buffer, target);\n"
"                }\n"
"                // scan pointers in target\n"
"                target[POINTER_VISITOR]?.(callback);\n"
"              }\n"
"            }\n"
"          }\n"
"        }\n"
"      };\n"
"      args[POINTER_VISITOR](callback);\n"
"      // find targets that overlap each other\n"
"      const clusters = this.findTargetClusters(potentialClusters);\n"
"      const clusterMap = new Map();\n"
"      for (const cluster of clusters) {\n"
"        for (const target of cluster.targets) {\n"
"          clusterMap.set(target, cluster);\n"
"        }\n"
"      }\n"
"      // process the pointers\n"
"      for (const [ pointer, target ] of pointerMap) {\n"
"        const cluster = clusterMap.get(target);\n"
"        const address = this.getTargetAddress(target, cluster) ?? this.getShadowAddress(target, cluster);\n"
"        // update the pointer\n"
"        pointer[ADDRESS_SETTER](address);\n"
"        pointer[LENGTH_SETTER]?.(target.length);\n"
"      }\n"
"    }\n"
"\n"
"    findTargetClusters(potentialClusters) {\n"
"      const clusters = [];\n"
"      for (const targets of potentialClusters) {\n"
"        let prevTarget = null, prevStart = 0, prevEnd = 0;\n"
"        let currentCluster = null;\n"
"        for (const target of targets) {\n"
"          const dv = target[MEMORY];\n"
"          const { byteOffset: start, byteLength } = dv;\n"
"          const end = start + byteLength;\n"
"          let forward = true;\n"
"          if (prevTarget) {\n"
"            if (prevEnd > start) {\n"
"              // the previous target overlaps this one\n"
"              if (!currentCluster) {\n"
"                currentCluster = {\n"
"                  targets: [ prevTarget ],\n"
"                  start: prevStart,\n"
"                  end: prevEnd,\n"
"                  address: undefined,\n"
"                  misaligned: undefined,\n"
"                };\n"
"                clusters.push(currentCluster);\n"
"              }\n"
"              currentCluster.targets.push(target);\n"
"              if (end > prevEnd) {\n"
"                // set cluster end offset to include this one\n"
"                currentCluster.end = end;\n"
"              } else {\n"
"                // the previous target contains this one\n"
"                forward = false;\n"
"              }\n"
"            } else {\n"
"              currentCluster = null;\n"
"            }\n"
"          }\n"
"          if (forward) {\n"
"            prevTarget = target;\n"
"            prevStart = start;\n"
"            prevEnd = end;\n"
"          }\n"
"        }\n"
"      }\n"
"      return clusters;\n"
"    }\n"
"\n"
"    createClusterShadow(cluster) {\n"
"      const { start, end, targets } = cluster;\n"
"      // look for largest align\n"
"      let maxAlign = 0, maxAlignOffset;\n"
"      for (const target of targets) {\n"
"        const dv = target[MEMORY];\n"
"        const offset = dv.byteOffset;\n"
"        const align = target.constructor[ALIGN] ?? dv[ALIGN];\n"
"        if (maxAlign === undefined || align > maxAlign) {\n"
"          maxAlign = align;\n"
"          maxAlignOffset = offset;\n"
"        }\n"
"      }\n"
"      // ensure the shadow buffer is large enough to accommodate necessary adjustments\n"
"      const len = end - start;\n"
"      const unalignedShadowDV = this.allocateShadowMemory(len + maxAlign, 1);\n"
"      const unalignedAddress = this.getViewAddress(unalignedShadowDV);\n"
"      const maxAlignAddress = getAlignedAddress(add(unalignedAddress, maxAlignOffset - start), maxAlign);\n"
"      const shadowAddress = add(maxAlignAddress, start - maxAlignOffset);\n"
"      const shadowOffset = unalignedShadowDV.byteOffset + Number(shadowAddress - unalignedAddress);\n"
"      const shadowDV = new DataView(unalignedShadowDV.buffer, shadowOffset, len);\n"
"      // make sure that other pointers are correctly aligned also\n"
"      for (const target of targets) {\n"
"        const dv = target[MEMORY];\n"
"        const offset = dv.byteOffset;\n"
"        if (offset !== maxAlignOffset) {\n"
"          const align = target.constructor[ALIGN] ?? dv[ALIGN];\n"
"          if (isMisaligned(add(shadowAddress, offset - start), align)) {\n"
"            throw new AlignmentConflict(align, maxAlign);\n"
"          }\n"
"        }\n"
"      }\n"
"      // placeholder object type\n"
"      const prototype = {\n"
"        [COPIER]: getMemoryCopier(len)\n"
"      };\n"
"      const source = Object.create(prototype);\n"
"      const shadow = Object.create(prototype);\n"
"      source[MEMORY] = new DataView(targets[0][MEMORY].buffer, Number(start), len);\n"
"      shadow[MEMORY] = shadowDV;\n"
"      shadow[ATTRIBUTES] = {\n"
"        address: unalignedAddress,\n"
"        len: unalignedShadowDV.byteLength,\n"
"        align: 1,\n"
"      };\n"
"      return this.addShadow(shadow, source, 1);\n"
"    }\n"
"    /* RUNTIME-ONLY-END */\n"
"\n"
"    getShadowAddress(target, cluster) {\n"
"      if (cluster) {\n"
"        const dv = target[MEMORY];\n"
"        if (cluster.address === undefined) {\n"
"          const shadow = this.createClusterShadow(cluster);\n"
"          cluster.address = this.getViewAddress(shadow[MEMORY]);\n"
"        }\n"
"        return add(cluster.address, dv.byteOffset - cluster.start);\n"
"      } else {\n"
"        const shadow = this.createShadow(target);\n"
"        return this.getViewAddress(shadow[MEMORY]);\n"
"      }\n"
"    }\n"
"\n"
"    createShadow(object) {\n"
"      const dv = object[MEMORY];\n"
"      // use the alignment of the structure; in the case of an opaque pointer's target,\n"
"      // try to the alignment specified when the memory was allocated\n"
"      const align = object.constructor[ALIGN] ?? dv[ALIGN];\n"
"      const shadow = Object.create(object.constructor.prototype);\n"
"      const shadowDV = shadow[MEMORY] = this.allocateShadowMemory(dv.byteLength, align);\n"
"      shadow[ATTRIBUTES] = {\n"
"        address: this.getViewAddress(shadowDV),\n"
"        len: shadowDV.byteLength,\n"
"        align,\n"
"      };\n"
"      return this.addShadow(shadow, object, align);\n"
"    }\n"
"\n"
"    addShadow(shadow, object, align) {\n"
"      let { shadowMap } = this.context;\n"
"      if (!shadowMap) {\n"
"        shadowMap = this.context.shadowMap = new Map();\n"
"      }\n"
"      shadowMap.set(shadow, object);\n"
"      this.registerMemory(shadow[MEMORY], object[MEMORY], align);\n"
"      return shadow;\n"
"    }\n"
"\n"
"    removeShadow(dv) {\n"
"      const { shadowMap } = this.context;\n"
"      if (shadowMap) {\n"
"        for (const [ shadow ] of shadowMap) {\n"
"          if (shadow[MEMORY] === dv) {\n"
"            shadowMap.delete(shadow);\n"
"            break;\n"
"          }\n"
"        }\n"
"      }\n"
"    }\n"
"\n"
"    updateShadows() {\n"
"      const { shadowMap } = this.context;\n"
"      if (!shadowMap) {\n"
"        return;\n"
"      }\n"
"      for (const [ shadow, object ] of shadowMap) {\n"
"        shadow[COPIER](object);\n"
"      }\n"
"    }\n"
"\n"
"    updateShadowTargets() {\n"
"      const { shadowMap } = this.context;\n"
"      if (!shadowMap) {\n"
"        return;\n"
"      }\n"
"      for (const [ shadow, object ] of shadowMap) {\n"
"        object[COPIER](shadow);\n"
"      }\n"
"    }\n"
"\n"
"    releaseShadows() {\n"
"      const { shadowMap } = this.context;\n"
"      if (!shadowMap) {\n"
"        return;\n"
"      }\n"
"      for (const [ shadow ] of shadowMap) {\n"
"        const { address, len, align } = shadow[ATTRIBUTES];\n"
"        this.freeShadowMemory(address, len, align);\n"
"      }\n"
"    }\n"
"\n"
"    updatePointerTargets(args) {\n"
"      const pointerMap = new Map();\n"
"      const callback = function({ isActive, isMutable }) {\n"
"        // bypass proxy\n"
"        const pointer = this[POINTER];\n"
"        if (!pointerMap.get(pointer)) {\n"
"          pointerMap.set(pointer, true);\n"
"          const writable = !pointer.constructor.const;\n"
"          const currentTarget = pointer[SLOTS][0];\n"
"          const newTarget = (!currentTarget || isMutable(this))\n"
"          ? pointer[TARGET_UPDATER](true, isActive(this))\n"
"          : currentTarget;\n"
"          // update targets of pointers in original target (which could have been altered)\n"
"          currentTarget?.[POINTER_VISITOR]?.(callback, { vivificate: true, isMutable: () => writable });\n"
"          if (newTarget !== currentTarget) {\n"
"            // acquire targets of pointers in new target\n"
"            newTarget?.[POINTER_VISITOR]?.(callback, { vivificate: true, isMutable: () => writable });\n"
"          }\n"
"        }\n"
"      };\n"
"      args[POINTER_VISITOR](callback, { vivificate: true });\n"
"    }\n"
"\n"
"    writeToConsole(dv) {\n"
"      const { console } = this;\n"
"      try {\n"
"        // make copy of array, in case incoming buffer is pointing to stack memory\n"
"        const array = new Uint8Array(dv.buffer, dv.byteOffset, dv.byteLength).slice();\n"
"        // send text up to the last newline character\n"
"        const index = array.lastIndexOf(0x0a);\n"
"        if (index === -1) {\n"
"          this.consolePending.push(array);\n"
"        } else {\n"
"          const beginning = array.subarray(0, index);\n"
"          const remaining = array.subarray(index + 1);\n"
"          const list = [ ...this.consolePending, beginning ];\n"
"          console.log(decodeText(list));\n"
"          this.consolePending = (remaining.length > 0) ? [ remaining ] : [];\n"
"        }\n"
"        clearTimeout(this.consoleTimeout);\n"
"        if (this.consolePending.length > 0) {\n"
"          this.consoleTimeout = setTimeout(() => {\n"
"            console.log(decodeText(this.consolePending));\n"
"            this.consolePending = [];\n"
"          }, 250);\n"
"        }\n"
"        /* c8 ignore next 3 */\n"
"      } catch (err) {\n"
"        console.error(err);\n"
"      }\n"
"    }\n"
"\n"
"    flushConsole() {\n"
"      if (this.consolePending.length > 0) {\n"
"        console.log(decodeText(this.consolePending));\n"
"        this.consolePending = [];\n"
"        clearTimeout(this.consoleTimeout);\n"
"      }\n"
"    }\n"
"\n"
"    /* COMPTIME-ONLY */\n"
"    acquireDefaultPointers() {\n"
"      for (const structure of this.structures) {\n"
"        const { constructor, hasPointer, instance: { template } } = structure;\n"
"        if (hasPointer && template && template[MEMORY]) {\n"
"          // create a placeholder for retrieving default pointers\n"
"          const placeholder = Object.create(constructor.prototype);\n"
"          placeholder[MEMORY] = template[MEMORY];\n"
"          placeholder[SLOTS] = template[SLOTS];\n"
"          this.updatePointerTargets(placeholder);\n"
"        }\n"
"      }\n"
"    }\n"
"    /* COMPTIME-ONLY-END */\n"
"  }\n"
"\n"
"  class CallContext {\n"
"    pointerProcessed = new Map();\n"
"    memoryList = [];\n"
"    shadowMap = null;\n"
"  }\n"
"\n"
"  function findSortedIndex(array, value, cb) {\n"
"    let low = 0;\n"
"    let high = array.length;\n"
"    if (high === 0) {\n"
"      return 0;\n"
"    }\n"
"    while (low < high) {\n"
"      const mid = Math.floor((low + high) / 2);\n"
"      const value2 = cb(array[mid]);\n"
"      if (value2 <= value) {\n"
"        low = mid + 1;\n"
"      } else {\n"
"        high = mid;\n"
"      }\n"
"    }\n"
"    return high;\n"
"  }\n"
"\n"
"  function findMemoryIndex(array, address) {\n"
"    return findSortedIndex(array, address, m => m.address);\n"
"  }\n"
"\n"
"  function isMisaligned(address, align) {\n"
"    if (align === undefined) {\n"
"      return false;\n"
"    }\n"
"    if (typeof(address) === 'bigint') {\n"
"      address = Number(address & 0xFFFFFFFFn);\n"
"    }\n"
"    const mask = align - 1;\n"
"    return (address & mask) !== 0;\n"
"  }\n"
"\n"
"  function getAlignedAddress(address, align) {\n"
"    let mask;\n"
"    if (typeof(address) === 'bigint') {\n"
"      align = BigInt(align);\n"
"      mask = ~(align - 1n);\n"
"    } else {\n"
"      mask = ~(align - 1);\n"
"    }\n"
"    return (address & mask) + align;\n"
"  }\n"
"\n"
"  function add(address, len) {\n"
"    return address + ((typeof(address) === 'bigint') ? BigInt(len) : len);\n"
"  }\n"
"\n"
"  function isInvalidAddress(address) {\n"
"    if (typeof(address) === 'bigint') {\n"
"      return address === 0xaaaaaaaaaaaaaaaan;\n"
"    } else {\n"
"      return address === 0xaaaaaaaa;\n"
"    }\n"
"  }\n"
"\n"
"  function isElectron() {\n"
"    return typeof(process) === 'object'\n"
"        && typeof(process?.versions) === 'object'\n"
"        && !!process.versions?.electron;\n"
"  }\n"
"\n"
"  class NodeEnvironment extends Environment {\n"
"    // C code will patch in these functions:\n"
"    imports = {\n"
"      loadModule: null,\n"
"      getBufferAddress: null,\n"
"      allocateExternMemory: null,\n"
"      freeExternMemory: null,\n"
"      obtainExternBuffer: null,\n"
"      copyBytes: null,\n"
"      findSentinel: null,\n"
"      defineStructures: null,\n"
"      getFactoryThunk: null,\n"
"      runThunk: null,\n"
"      runVariadicThunk: null,\n"
"      getMemoryOffset: null,\n"
"      recreateAddress: null,\n"
"    };\n"
"    wordSize = [ 'arm64', 'ppc64', 'x64', 's390x' ].includes(process.arch) ? 8 : 4;\n"
"\n"
"    async init() {\n"
"      return;\n"
"    }\n"
"\n"
"    allocateRelocMemory(len, align) {\n"
"      // allocate extra memory for alignment purpose when align is larger than the default\n"
"      const extra = (align > this.wordSize * 2 && this.getBufferAddress) ? align : 0;\n"
"      const buffer = new ArrayBuffer(len + extra);\n"
"      let offset = 0;\n"
"      if (extra) {\n"
"        const address = this.getBufferAddress(buffer);\n"
"        const aligned = getAlignedAddress(address, align);\n"
"        offset = aligned - address;\n"
"      }\n"
"      return this.obtainView(buffer, Number(offset), len);\n"
"    }\n"
"\n"
"    allocateHostMemory(len, align) {\n"
"      const dv = this.allocateRelocMemory(len, align);\n"
"      this.registerMemory(dv);\n"
"      return dv;\n"
"    }\n"
"\n"
"    freeHostMemory(address, len, align) {\n"
"      // no freeing actually occurs--memory will await garbage collection\n"
"      this.unregisterMemory(address);\n"
"    }\n"
"\n"
"    allocateShadowMemory(len, align) {\n"
"      // Node can read into JavaScript memory space so we can keep shadows there\n"
"      return this.allocateRelocMemory(len, align);\n"
"    }\n"
"\n"
"    freeShadowMemory(address, len, align) {\n"
"      // nothing needs to happen\n"
"    }\n"
"\n"
"    obtainExternView(address, len) {\n"
"      const buffer = this.obtainExternBuffer(address, len);\n"
"      buffer[FIXED] = { address, len };\n"
"      return this.obtainView(buffer, 0, len);\n"
"    }\n"
"\n"
"    getTargetAddress(target, cluster) {\n"
"      const dv = target[MEMORY];\n"
"      if (cluster) {\n"
"        // pointer is pointing to buffer with overlapping views\n"
"        if (cluster.misaligned === undefined) {\n"
"          const address = this.getBufferAddress(dv.buffer);\n"
"          // ensure that all pointers are properly aligned\n"
"          for (const target of cluster.targets) {\n"
"            const offset = target[MEMORY].byteOffset;\n"
"            const align = target.constructor[ALIGN];\n"
"            const viewAddress = add(address, offset);\n"
"            if (isMisaligned(viewAddress, align)) {\n"
"              cluster.misaligned = true;\n"
"              break;\n"
"            }\n"
"          }\n"
"          if (cluster.misaligned === undefined)  {\n"
"            cluster.misaligned = false;\n"
"            cluster.address = address;\n"
"          }\n"
"        }\n"
"        if (!cluster.misaligned) {\n"
"          return add(cluster.address, dv.byteOffset);\n"
"        }\n"
"      } else {\n"
"        const align = target.constructor[ALIGN];\n"
"        const address = this.getViewAddress(dv);\n"
"        if (!isMisaligned(address, align)) {\n"
"          this.registerMemory(dv);\n"
"          return address;\n"
"        }\n"
"      }\n"
"      // need shadowing\n"
"    }\n"
"\n"
"    invokeThunk(thunkId, args) {\n"
"      let err;\n"
"      // create an object where information concerning pointers can be stored\n"
"      this.startContext();\n"
"      const attrs = args[ATTRIBUTES];\n"
"      if (args[POINTER_VISITOR]) {\n"
"        // copy addresses of garbage-collectible objects into memory\n"
"        this.updatePointerAddresses(args);\n"
"        this.updateShadows();\n"
"        err = (attrs)\n"
"        ? this.runVariadicThunk(thunkId, args[MEMORY], attrs[MEMORY])\n"
"        : this.runThunk(thunkId, args[MEMORY]);\n"
"        // create objects that pointers point to\n"
"        this.updateShadowTargets();\n"
"        this.updatePointerTargets(args);\n"
"        this.releaseShadows();\n"
"      } else {\n"
"        // don't need to do any of that if there're no pointers\n"
"        err = (attrs)\n"
"        ? this.runVariadicThunk(thunkId, args[MEMORY], attrs[MEMORY])\n"
"        : this.runThunk(thunkId, args[MEMORY]);\n"
"      }\n"
"      // restore the previous context if there's one\n"
"      this.endContext();\n"
"      if (!this.context) {\n"
"        this.flushConsole();\n"
"      }\n"
"      // errors returned by exported Zig functions are normally written into the\n"
"      // argument object and get thrown when we access its retval property (a zig error union)\n"
"      // error strings returned by the thunk are due to problems in the thunking process\n"
"      // (i.e. bugs in export.zig)\n"
"      if (err) {\n"
"        throw new ZigError(err);\n"
"      }\n"
"      return args.retval;\n"
"    }\n"
"  }\n"
"\n"
"  useAllMemberTypes();\n"
"  useAllStructureTypes();\n"
"  useAllExtendedTypes();\n"
"\n"
"  exports.Environment = NodeEnvironment;\n"
"\n"
"  return exports;\n"
"\n"
"})({}))"

