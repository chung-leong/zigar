const std = @import("std");

pub const target = std.os.linux;

pub fn with(comptime substitutes: anytype) type {
	return struct {
		pub const syscall0 = if (@hasDecl(substitutes, "syscall0")) substitutes.syscall0 else if (@hasDecl(std.os.linux, "syscall0")) std.os.linux.syscall0 else null;
		pub const syscall1 = if (@hasDecl(substitutes, "syscall1")) substitutes.syscall1 else if (@hasDecl(std.os.linux, "syscall1")) std.os.linux.syscall1 else null;
		pub const syscall2 = if (@hasDecl(substitutes, "syscall2")) substitutes.syscall2 else if (@hasDecl(std.os.linux, "syscall2")) std.os.linux.syscall2 else null;
		pub const syscall3 = if (@hasDecl(substitutes, "syscall3")) substitutes.syscall3 else if (@hasDecl(std.os.linux, "syscall3")) std.os.linux.syscall3 else null;
		pub const syscall4 = if (@hasDecl(substitutes, "syscall4")) substitutes.syscall4 else if (@hasDecl(std.os.linux, "syscall4")) std.os.linux.syscall4 else null;
		pub const syscall5 = if (@hasDecl(substitutes, "syscall5")) substitutes.syscall5 else if (@hasDecl(std.os.linux, "syscall5")) std.os.linux.syscall5 else null;
		pub const syscall6 = if (@hasDecl(substitutes, "syscall6")) substitutes.syscall6 else if (@hasDecl(std.os.linux, "syscall6")) std.os.linux.syscall6 else null;
		pub const syscall7 = if (@hasDecl(substitutes, "syscall7")) substitutes.syscall7 else if (@hasDecl(std.os.linux, "syscall7")) std.os.linux.syscall7 else null;
		pub const restore = if (@hasDecl(substitutes, "restore")) substitutes.restore else if (@hasDecl(std.os.linux, "restore")) std.os.linux.restore else null;
		pub const restore_rt = if (@hasDecl(substitutes, "restore_rt")) substitutes.restore_rt else if (@hasDecl(std.os.linux, "restore_rt")) std.os.linux.restore_rt else null;
		pub const socketcall = if (@hasDecl(substitutes, "socketcall")) substitutes.socketcall else if (@hasDecl(std.os.linux, "socketcall")) std.os.linux.socketcall else null;
		pub const syscall_pipe = if (@hasDecl(substitutes, "syscall_pipe")) substitutes.syscall_pipe else if (@hasDecl(std.os.linux, "syscall_pipe")) std.os.linux.syscall_pipe else null;
		pub const syscall_fork = if (@hasDecl(substitutes, "syscall_fork")) substitutes.syscall_fork else if (@hasDecl(std.os.linux, "syscall_fork")) std.os.linux.syscall_fork else null;
		pub const ARCH = if (@hasDecl(substitutes, "ARCH")) substitutes.ARCH else if (@hasDecl(std.os.linux, "ARCH")) std.os.linux.ARCH else null;
		pub const Elf_Symndx = if (@hasDecl(substitutes, "Elf_Symndx")) substitutes.Elf_Symndx else if (@hasDecl(std.os.linux, "Elf_Symndx")) std.os.linux.Elf_Symndx else null;
		pub const F = if (@hasDecl(substitutes, "F")) substitutes.F else if (@hasDecl(std.os.linux, "F")) std.os.linux.F else null;
		pub const Flock = if (@hasDecl(substitutes, "Flock")) substitutes.Flock else if (@hasDecl(std.os.linux, "Flock")) std.os.linux.Flock else null;
		pub const HWCAP = if (@hasDecl(substitutes, "HWCAP")) substitutes.HWCAP else if (@hasDecl(std.os.linux, "HWCAP")) std.os.linux.HWCAP else null;
		pub const LOCK = if (@hasDecl(substitutes, "LOCK")) substitutes.LOCK else if (@hasDecl(std.os.linux, "LOCK")) std.os.linux.LOCK else null;
		pub const MMAP2_UNIT = if (@hasDecl(substitutes, "MMAP2_UNIT")) substitutes.MMAP2_UNIT else if (@hasDecl(std.os.linux, "MMAP2_UNIT")) std.os.linux.MMAP2_UNIT else null;
		pub const REG = if (@hasDecl(substitutes, "REG")) substitutes.REG else if (@hasDecl(std.os.linux, "REG")) std.os.linux.REG else null;
		pub const SC = if (@hasDecl(substitutes, "SC")) substitutes.SC else if (@hasDecl(std.os.linux, "SC")) std.os.linux.SC else null;
		pub const Stat = if (@hasDecl(substitutes, "Stat")) substitutes.Stat else if (@hasDecl(std.os.linux, "Stat")) std.os.linux.Stat else null;
		pub const VDSO = if (@hasDecl(substitutes, "VDSO")) substitutes.VDSO else if (@hasDecl(std.os.linux, "VDSO")) std.os.linux.VDSO else null;
		pub const blkcnt_t = if (@hasDecl(substitutes, "blkcnt_t")) substitutes.blkcnt_t else if (@hasDecl(std.os.linux, "blkcnt_t")) std.os.linux.blkcnt_t else null;
		pub const blksize_t = if (@hasDecl(substitutes, "blksize_t")) substitutes.blksize_t else if (@hasDecl(std.os.linux, "blksize_t")) std.os.linux.blksize_t else null;
		pub const clone = if (@hasDecl(substitutes, "clone")) substitutes.clone else if (@hasDecl(std.os.linux, "clone")) std.os.linux.clone else null;
		pub const dev_t = if (@hasDecl(substitutes, "dev_t")) substitutes.dev_t else if (@hasDecl(std.os.linux, "dev_t")) std.os.linux.dev_t else null;
		pub const ino_t = if (@hasDecl(substitutes, "ino_t")) substitutes.ino_t else if (@hasDecl(std.os.linux, "ino_t")) std.os.linux.ino_t else null;
		pub const mcontext_t = if (@hasDecl(substitutes, "mcontext_t")) substitutes.mcontext_t else if (@hasDecl(std.os.linux, "mcontext_t")) std.os.linux.mcontext_t else null;
		pub const mode_t = if (@hasDecl(substitutes, "mode_t")) substitutes.mode_t else if (@hasDecl(std.os.linux, "mode_t")) std.os.linux.mode_t else null;
		pub const msghdr = if (@hasDecl(substitutes, "msghdr")) substitutes.msghdr else if (@hasDecl(std.os.linux, "msghdr")) std.os.linux.msghdr else null;
		pub const msghdr_const = if (@hasDecl(substitutes, "msghdr_const")) substitutes.msghdr_const else if (@hasDecl(std.os.linux, "msghdr_const")) std.os.linux.msghdr_const else null;
		pub const nlink_t = if (@hasDecl(substitutes, "nlink_t")) substitutes.nlink_t else if (@hasDecl(std.os.linux, "nlink_t")) std.os.linux.nlink_t else null;
		pub const off_t = if (@hasDecl(substitutes, "off_t")) substitutes.off_t else if (@hasDecl(std.os.linux, "off_t")) std.os.linux.off_t else null;
		pub const time_t = if (@hasDecl(substitutes, "time_t")) substitutes.time_t else if (@hasDecl(std.os.linux, "time_t")) std.os.linux.time_t else null;
		pub const timeval = if (@hasDecl(substitutes, "timeval")) substitutes.timeval else if (@hasDecl(std.os.linux, "timeval")) std.os.linux.timeval else null;
		pub const timezone = if (@hasDecl(substitutes, "timezone")) substitutes.timezone else if (@hasDecl(std.os.linux, "timezone")) std.os.linux.timezone else null;
		pub const ucontext_t = if (@hasDecl(substitutes, "ucontext_t")) substitutes.ucontext_t else if (@hasDecl(std.os.linux, "ucontext_t")) std.os.linux.ucontext_t else null;
		pub const user_desc = if (@hasDecl(substitutes, "user_desc")) substitutes.user_desc else if (@hasDecl(std.os.linux, "user_desc")) std.os.linux.user_desc else null;
		pub const getcontext = if (@hasDecl(substitutes, "getcontext")) substitutes.getcontext else if (@hasDecl(std.os.linux, "getcontext")) std.os.linux.getcontext else null;
		pub const tls = if (@hasDecl(substitutes, "tls")) substitutes.tls else if (@hasDecl(std.os.linux, "tls")) std.os.linux.tls else null;
		pub const pie = if (@hasDecl(substitutes, "pie")) substitutes.pie else if (@hasDecl(std.os.linux, "pie")) std.os.linux.pie else null;
		pub const BPF = if (@hasDecl(substitutes, "BPF")) substitutes.BPF else if (@hasDecl(std.os.linux, "BPF")) std.os.linux.BPF else null;
		pub const IOCTL = if (@hasDecl(substitutes, "IOCTL")) substitutes.IOCTL else if (@hasDecl(std.os.linux, "IOCTL")) std.os.linux.IOCTL else null;
		pub const SECCOMP = if (@hasDecl(substitutes, "SECCOMP")) substitutes.SECCOMP else if (@hasDecl(std.os.linux, "SECCOMP")) std.os.linux.SECCOMP else null;
		pub const syscalls = if (@hasDecl(substitutes, "syscalls")) substitutes.syscalls else if (@hasDecl(std.os.linux, "syscalls")) std.os.linux.syscalls else null;
		pub const SYS = if (@hasDecl(substitutes, "SYS")) substitutes.SYS else if (@hasDecl(std.os.linux, "SYS")) std.os.linux.SYS else null;
		pub const MAP = if (@hasDecl(substitutes, "MAP")) substitutes.MAP else if (@hasDecl(std.os.linux, "MAP")) std.os.linux.MAP else null;
		pub const O = if (@hasDecl(substitutes, "O")) substitutes.O else if (@hasDecl(std.os.linux, "O")) std.os.linux.O else null;
		pub const IO_Uring = if (@hasDecl(substitutes, "IO_Uring")) substitutes.IO_Uring else if (@hasDecl(std.os.linux, "IO_Uring")) std.os.linux.IO_Uring else null;
		pub const SubmissionQueue = if (@hasDecl(substitutes, "SubmissionQueue")) substitutes.SubmissionQueue else if (@hasDecl(std.os.linux, "SubmissionQueue")) std.os.linux.SubmissionQueue else null;
		pub const CompletionQueue = if (@hasDecl(substitutes, "CompletionQueue")) substitutes.CompletionQueue else if (@hasDecl(std.os.linux, "CompletionQueue")) std.os.linux.CompletionQueue else null;
		pub const io_uring_prep_nop = if (@hasDecl(substitutes, "io_uring_prep_nop")) substitutes.io_uring_prep_nop else if (@hasDecl(std.os.linux, "io_uring_prep_nop")) std.os.linux.io_uring_prep_nop else null;
		pub const io_uring_prep_fsync = if (@hasDecl(substitutes, "io_uring_prep_fsync")) substitutes.io_uring_prep_fsync else if (@hasDecl(std.os.linux, "io_uring_prep_fsync")) std.os.linux.io_uring_prep_fsync else null;
		pub const io_uring_prep_rw = if (@hasDecl(substitutes, "io_uring_prep_rw")) substitutes.io_uring_prep_rw else if (@hasDecl(std.os.linux, "io_uring_prep_rw")) std.os.linux.io_uring_prep_rw else null;
		pub const io_uring_prep_read = if (@hasDecl(substitutes, "io_uring_prep_read")) substitutes.io_uring_prep_read else if (@hasDecl(std.os.linux, "io_uring_prep_read")) std.os.linux.io_uring_prep_read else null;
		pub const io_uring_prep_write = if (@hasDecl(substitutes, "io_uring_prep_write")) substitutes.io_uring_prep_write else if (@hasDecl(std.os.linux, "io_uring_prep_write")) std.os.linux.io_uring_prep_write else null;
		pub const io_uring_prep_readv = if (@hasDecl(substitutes, "io_uring_prep_readv")) substitutes.io_uring_prep_readv else if (@hasDecl(std.os.linux, "io_uring_prep_readv")) std.os.linux.io_uring_prep_readv else null;
		pub const io_uring_prep_writev = if (@hasDecl(substitutes, "io_uring_prep_writev")) substitutes.io_uring_prep_writev else if (@hasDecl(std.os.linux, "io_uring_prep_writev")) std.os.linux.io_uring_prep_writev else null;
		pub const io_uring_prep_read_fixed = if (@hasDecl(substitutes, "io_uring_prep_read_fixed")) substitutes.io_uring_prep_read_fixed else if (@hasDecl(std.os.linux, "io_uring_prep_read_fixed")) std.os.linux.io_uring_prep_read_fixed else null;
		pub const io_uring_prep_write_fixed = if (@hasDecl(substitutes, "io_uring_prep_write_fixed")) substitutes.io_uring_prep_write_fixed else if (@hasDecl(std.os.linux, "io_uring_prep_write_fixed")) std.os.linux.io_uring_prep_write_fixed else null;
		pub const __io_uring_prep_poll_mask = if (@hasDecl(substitutes, "__io_uring_prep_poll_mask")) substitutes.__io_uring_prep_poll_mask else if (@hasDecl(std.os.linux, "__io_uring_prep_poll_mask")) std.os.linux.__io_uring_prep_poll_mask else null;
		pub const io_uring_prep_accept = if (@hasDecl(substitutes, "io_uring_prep_accept")) substitutes.io_uring_prep_accept else if (@hasDecl(std.os.linux, "io_uring_prep_accept")) std.os.linux.io_uring_prep_accept else null;
		pub const io_uring_prep_connect = if (@hasDecl(substitutes, "io_uring_prep_connect")) substitutes.io_uring_prep_connect else if (@hasDecl(std.os.linux, "io_uring_prep_connect")) std.os.linux.io_uring_prep_connect else null;
		pub const io_uring_prep_epoll_ctl = if (@hasDecl(substitutes, "io_uring_prep_epoll_ctl")) substitutes.io_uring_prep_epoll_ctl else if (@hasDecl(std.os.linux, "io_uring_prep_epoll_ctl")) std.os.linux.io_uring_prep_epoll_ctl else null;
		pub const io_uring_prep_recv = if (@hasDecl(substitutes, "io_uring_prep_recv")) substitutes.io_uring_prep_recv else if (@hasDecl(std.os.linux, "io_uring_prep_recv")) std.os.linux.io_uring_prep_recv else null;
		pub const io_uring_prep_send = if (@hasDecl(substitutes, "io_uring_prep_send")) substitutes.io_uring_prep_send else if (@hasDecl(std.os.linux, "io_uring_prep_send")) std.os.linux.io_uring_prep_send else null;
		pub const io_uring_prep_recvmsg = if (@hasDecl(substitutes, "io_uring_prep_recvmsg")) substitutes.io_uring_prep_recvmsg else if (@hasDecl(std.os.linux, "io_uring_prep_recvmsg")) std.os.linux.io_uring_prep_recvmsg else null;
		pub const io_uring_prep_sendmsg = if (@hasDecl(substitutes, "io_uring_prep_sendmsg")) substitutes.io_uring_prep_sendmsg else if (@hasDecl(std.os.linux, "io_uring_prep_sendmsg")) std.os.linux.io_uring_prep_sendmsg else null;
		pub const io_uring_prep_openat = if (@hasDecl(substitutes, "io_uring_prep_openat")) substitutes.io_uring_prep_openat else if (@hasDecl(std.os.linux, "io_uring_prep_openat")) std.os.linux.io_uring_prep_openat else null;
		pub const io_uring_prep_close = if (@hasDecl(substitutes, "io_uring_prep_close")) substitutes.io_uring_prep_close else if (@hasDecl(std.os.linux, "io_uring_prep_close")) std.os.linux.io_uring_prep_close else null;
		pub const io_uring_prep_timeout = if (@hasDecl(substitutes, "io_uring_prep_timeout")) substitutes.io_uring_prep_timeout else if (@hasDecl(std.os.linux, "io_uring_prep_timeout")) std.os.linux.io_uring_prep_timeout else null;
		pub const io_uring_prep_timeout_remove = if (@hasDecl(substitutes, "io_uring_prep_timeout_remove")) substitutes.io_uring_prep_timeout_remove else if (@hasDecl(std.os.linux, "io_uring_prep_timeout_remove")) std.os.linux.io_uring_prep_timeout_remove else null;
		pub const io_uring_prep_link_timeout = if (@hasDecl(substitutes, "io_uring_prep_link_timeout")) substitutes.io_uring_prep_link_timeout else if (@hasDecl(std.os.linux, "io_uring_prep_link_timeout")) std.os.linux.io_uring_prep_link_timeout else null;
		pub const io_uring_prep_poll_add = if (@hasDecl(substitutes, "io_uring_prep_poll_add")) substitutes.io_uring_prep_poll_add else if (@hasDecl(std.os.linux, "io_uring_prep_poll_add")) std.os.linux.io_uring_prep_poll_add else null;
		pub const io_uring_prep_poll_remove = if (@hasDecl(substitutes, "io_uring_prep_poll_remove")) substitutes.io_uring_prep_poll_remove else if (@hasDecl(std.os.linux, "io_uring_prep_poll_remove")) std.os.linux.io_uring_prep_poll_remove else null;
		pub const io_uring_prep_poll_update = if (@hasDecl(substitutes, "io_uring_prep_poll_update")) substitutes.io_uring_prep_poll_update else if (@hasDecl(std.os.linux, "io_uring_prep_poll_update")) std.os.linux.io_uring_prep_poll_update else null;
		pub const io_uring_prep_fallocate = if (@hasDecl(substitutes, "io_uring_prep_fallocate")) substitutes.io_uring_prep_fallocate else if (@hasDecl(std.os.linux, "io_uring_prep_fallocate")) std.os.linux.io_uring_prep_fallocate else null;
		pub const io_uring_prep_statx = if (@hasDecl(substitutes, "io_uring_prep_statx")) substitutes.io_uring_prep_statx else if (@hasDecl(std.os.linux, "io_uring_prep_statx")) std.os.linux.io_uring_prep_statx else null;
		pub const io_uring_prep_cancel = if (@hasDecl(substitutes, "io_uring_prep_cancel")) substitutes.io_uring_prep_cancel else if (@hasDecl(std.os.linux, "io_uring_prep_cancel")) std.os.linux.io_uring_prep_cancel else null;
		pub const io_uring_prep_shutdown = if (@hasDecl(substitutes, "io_uring_prep_shutdown")) substitutes.io_uring_prep_shutdown else if (@hasDecl(std.os.linux, "io_uring_prep_shutdown")) std.os.linux.io_uring_prep_shutdown else null;
		pub const io_uring_prep_renameat = if (@hasDecl(substitutes, "io_uring_prep_renameat")) substitutes.io_uring_prep_renameat else if (@hasDecl(std.os.linux, "io_uring_prep_renameat")) std.os.linux.io_uring_prep_renameat else null;
		pub const io_uring_prep_unlinkat = if (@hasDecl(substitutes, "io_uring_prep_unlinkat")) substitutes.io_uring_prep_unlinkat else if (@hasDecl(std.os.linux, "io_uring_prep_unlinkat")) std.os.linux.io_uring_prep_unlinkat else null;
		pub const io_uring_prep_mkdirat = if (@hasDecl(substitutes, "io_uring_prep_mkdirat")) substitutes.io_uring_prep_mkdirat else if (@hasDecl(std.os.linux, "io_uring_prep_mkdirat")) std.os.linux.io_uring_prep_mkdirat else null;
		pub const io_uring_prep_symlinkat = if (@hasDecl(substitutes, "io_uring_prep_symlinkat")) substitutes.io_uring_prep_symlinkat else if (@hasDecl(std.os.linux, "io_uring_prep_symlinkat")) std.os.linux.io_uring_prep_symlinkat else null;
		pub const io_uring_prep_linkat = if (@hasDecl(substitutes, "io_uring_prep_linkat")) substitutes.io_uring_prep_linkat else if (@hasDecl(std.os.linux, "io_uring_prep_linkat")) std.os.linux.io_uring_prep_linkat else null;
		pub const io_uring_prep_provide_buffers = if (@hasDecl(substitutes, "io_uring_prep_provide_buffers")) substitutes.io_uring_prep_provide_buffers else if (@hasDecl(std.os.linux, "io_uring_prep_provide_buffers")) std.os.linux.io_uring_prep_provide_buffers else null;
		pub const io_uring_prep_remove_buffers = if (@hasDecl(substitutes, "io_uring_prep_remove_buffers")) substitutes.io_uring_prep_remove_buffers else if (@hasDecl(std.os.linux, "io_uring_prep_remove_buffers")) std.os.linux.io_uring_prep_remove_buffers else null;
		pub const elf_aux_maybe = if (@hasDecl(substitutes, "elf_aux_maybe")) substitutes.elf_aux_maybe else if (@hasDecl(std.os.linux, "elf_aux_maybe")) std.os.linux.elf_aux_maybe else null;
		pub const getauxval = if (@hasDecl(substitutes, "getauxval")) substitutes.getauxval else if (@hasDecl(std.os.linux, "getauxval")) std.os.linux.getauxval else null;
		pub const getErrno = if (@hasDecl(substitutes, "getErrno")) substitutes.getErrno else if (@hasDecl(std.os.linux, "getErrno")) std.os.linux.getErrno else null;
		pub const dup = if (@hasDecl(substitutes, "dup")) substitutes.dup else if (@hasDecl(std.os.linux, "dup")) std.os.linux.dup else null;
		pub const dup2 = if (@hasDecl(substitutes, "dup2")) substitutes.dup2 else if (@hasDecl(std.os.linux, "dup2")) std.os.linux.dup2 else null;
		pub const dup3 = if (@hasDecl(substitutes, "dup3")) substitutes.dup3 else if (@hasDecl(std.os.linux, "dup3")) std.os.linux.dup3 else null;
		pub const chdir = if (@hasDecl(substitutes, "chdir")) substitutes.chdir else if (@hasDecl(std.os.linux, "chdir")) std.os.linux.chdir else null;
		pub const fchdir = if (@hasDecl(substitutes, "fchdir")) substitutes.fchdir else if (@hasDecl(std.os.linux, "fchdir")) std.os.linux.fchdir else null;
		pub const chroot = if (@hasDecl(substitutes, "chroot")) substitutes.chroot else if (@hasDecl(std.os.linux, "chroot")) std.os.linux.chroot else null;
		pub const execve = if (@hasDecl(substitutes, "execve")) substitutes.execve else if (@hasDecl(std.os.linux, "execve")) std.os.linux.execve else null;
		pub const fork = if (@hasDecl(substitutes, "fork")) substitutes.fork else if (@hasDecl(std.os.linux, "fork")) std.os.linux.fork else null;
		pub const vfork = if (@hasDecl(substitutes, "vfork")) substitutes.vfork else if (@hasDecl(std.os.linux, "vfork")) std.os.linux.vfork else null;
		pub const futimens = if (@hasDecl(substitutes, "futimens")) substitutes.futimens else if (@hasDecl(std.os.linux, "futimens")) std.os.linux.futimens else null;
		pub const utimensat = if (@hasDecl(substitutes, "utimensat")) substitutes.utimensat else if (@hasDecl(std.os.linux, "utimensat")) std.os.linux.utimensat else null;
		pub const fallocate = if (@hasDecl(substitutes, "fallocate")) substitutes.fallocate else if (@hasDecl(std.os.linux, "fallocate")) std.os.linux.fallocate else null;
		pub const futex_wait = if (@hasDecl(substitutes, "futex_wait")) substitutes.futex_wait else if (@hasDecl(std.os.linux, "futex_wait")) std.os.linux.futex_wait else null;
		pub const futex_wake = if (@hasDecl(substitutes, "futex_wake")) substitutes.futex_wake else if (@hasDecl(std.os.linux, "futex_wake")) std.os.linux.futex_wake else null;
		pub const getcwd = if (@hasDecl(substitutes, "getcwd")) substitutes.getcwd else if (@hasDecl(std.os.linux, "getcwd")) std.os.linux.getcwd else null;
		pub const getdents = if (@hasDecl(substitutes, "getdents")) substitutes.getdents else if (@hasDecl(std.os.linux, "getdents")) std.os.linux.getdents else null;
		pub const getdents64 = if (@hasDecl(substitutes, "getdents64")) substitutes.getdents64 else if (@hasDecl(std.os.linux, "getdents64")) std.os.linux.getdents64 else null;
		pub const inotify_init1 = if (@hasDecl(substitutes, "inotify_init1")) substitutes.inotify_init1 else if (@hasDecl(std.os.linux, "inotify_init1")) std.os.linux.inotify_init1 else null;
		pub const inotify_add_watch = if (@hasDecl(substitutes, "inotify_add_watch")) substitutes.inotify_add_watch else if (@hasDecl(std.os.linux, "inotify_add_watch")) std.os.linux.inotify_add_watch else null;
		pub const inotify_rm_watch = if (@hasDecl(substitutes, "inotify_rm_watch")) substitutes.inotify_rm_watch else if (@hasDecl(std.os.linux, "inotify_rm_watch")) std.os.linux.inotify_rm_watch else null;
		pub const readlink = if (@hasDecl(substitutes, "readlink")) substitutes.readlink else if (@hasDecl(std.os.linux, "readlink")) std.os.linux.readlink else null;
		pub const readlinkat = if (@hasDecl(substitutes, "readlinkat")) substitutes.readlinkat else if (@hasDecl(std.os.linux, "readlinkat")) std.os.linux.readlinkat else null;
		pub const mkdir = if (@hasDecl(substitutes, "mkdir")) substitutes.mkdir else if (@hasDecl(std.os.linux, "mkdir")) std.os.linux.mkdir else null;
		pub const mkdirat = if (@hasDecl(substitutes, "mkdirat")) substitutes.mkdirat else if (@hasDecl(std.os.linux, "mkdirat")) std.os.linux.mkdirat else null;
		pub const mknod = if (@hasDecl(substitutes, "mknod")) substitutes.mknod else if (@hasDecl(std.os.linux, "mknod")) std.os.linux.mknod else null;
		pub const mknodat = if (@hasDecl(substitutes, "mknodat")) substitutes.mknodat else if (@hasDecl(std.os.linux, "mknodat")) std.os.linux.mknodat else null;
		pub const mount = if (@hasDecl(substitutes, "mount")) substitutes.mount else if (@hasDecl(std.os.linux, "mount")) std.os.linux.mount else null;
		pub const umount = if (@hasDecl(substitutes, "umount")) substitutes.umount else if (@hasDecl(std.os.linux, "umount")) std.os.linux.umount else null;
		pub const umount2 = if (@hasDecl(substitutes, "umount2")) substitutes.umount2 else if (@hasDecl(std.os.linux, "umount2")) std.os.linux.umount2 else null;
		pub const mmap = if (@hasDecl(substitutes, "mmap")) substitutes.mmap else if (@hasDecl(std.os.linux, "mmap")) std.os.linux.mmap else null;
		pub const mprotect = if (@hasDecl(substitutes, "mprotect")) substitutes.mprotect else if (@hasDecl(std.os.linux, "mprotect")) std.os.linux.mprotect else null;
		pub const MSF = if (@hasDecl(substitutes, "MSF")) substitutes.MSF else if (@hasDecl(std.os.linux, "MSF")) std.os.linux.MSF else null;
		pub const msync = if (@hasDecl(substitutes, "msync")) substitutes.msync else if (@hasDecl(std.os.linux, "msync")) std.os.linux.msync else null;
		pub const munmap = if (@hasDecl(substitutes, "munmap")) substitutes.munmap else if (@hasDecl(std.os.linux, "munmap")) std.os.linux.munmap else null;
		pub const poll = if (@hasDecl(substitutes, "poll")) substitutes.poll else if (@hasDecl(std.os.linux, "poll")) std.os.linux.poll else null;
		pub const ppoll = if (@hasDecl(substitutes, "ppoll")) substitutes.ppoll else if (@hasDecl(std.os.linux, "ppoll")) std.os.linux.ppoll else null;
		pub const read = if (@hasDecl(substitutes, "read")) substitutes.read else if (@hasDecl(std.os.linux, "read")) std.os.linux.read else null;
		pub const preadv = if (@hasDecl(substitutes, "preadv")) substitutes.preadv else if (@hasDecl(std.os.linux, "preadv")) std.os.linux.preadv else null;
		pub const preadv2 = if (@hasDecl(substitutes, "preadv2")) substitutes.preadv2 else if (@hasDecl(std.os.linux, "preadv2")) std.os.linux.preadv2 else null;
		pub const readv = if (@hasDecl(substitutes, "readv")) substitutes.readv else if (@hasDecl(std.os.linux, "readv")) std.os.linux.readv else null;
		pub const writev = if (@hasDecl(substitutes, "writev")) substitutes.writev else if (@hasDecl(std.os.linux, "writev")) std.os.linux.writev else null;
		pub const pwritev = if (@hasDecl(substitutes, "pwritev")) substitutes.pwritev else if (@hasDecl(std.os.linux, "pwritev")) std.os.linux.pwritev else null;
		pub const pwritev2 = if (@hasDecl(substitutes, "pwritev2")) substitutes.pwritev2 else if (@hasDecl(std.os.linux, "pwritev2")) std.os.linux.pwritev2 else null;
		pub const rmdir = if (@hasDecl(substitutes, "rmdir")) substitutes.rmdir else if (@hasDecl(std.os.linux, "rmdir")) std.os.linux.rmdir else null;
		pub const symlink = if (@hasDecl(substitutes, "symlink")) substitutes.symlink else if (@hasDecl(std.os.linux, "symlink")) std.os.linux.symlink else null;
		pub const symlinkat = if (@hasDecl(substitutes, "symlinkat")) substitutes.symlinkat else if (@hasDecl(std.os.linux, "symlinkat")) std.os.linux.symlinkat else null;
		pub const pread = if (@hasDecl(substitutes, "pread")) substitutes.pread else if (@hasDecl(std.os.linux, "pread")) std.os.linux.pread else null;
		pub const access = if (@hasDecl(substitutes, "access")) substitutes.access else if (@hasDecl(std.os.linux, "access")) std.os.linux.access else null;
		pub const faccessat = if (@hasDecl(substitutes, "faccessat")) substitutes.faccessat else if (@hasDecl(std.os.linux, "faccessat")) std.os.linux.faccessat else null;
		pub const pipe = if (@hasDecl(substitutes, "pipe")) substitutes.pipe else if (@hasDecl(std.os.linux, "pipe")) std.os.linux.pipe else null;
		pub const pipe2 = if (@hasDecl(substitutes, "pipe2")) substitutes.pipe2 else if (@hasDecl(std.os.linux, "pipe2")) std.os.linux.pipe2 else null;
		pub const write = if (@hasDecl(substitutes, "write")) substitutes.write else if (@hasDecl(std.os.linux, "write")) std.os.linux.write else null;
		pub const ftruncate = if (@hasDecl(substitutes, "ftruncate")) substitutes.ftruncate else if (@hasDecl(std.os.linux, "ftruncate")) std.os.linux.ftruncate else null;
		pub const pwrite = if (@hasDecl(substitutes, "pwrite")) substitutes.pwrite else if (@hasDecl(std.os.linux, "pwrite")) std.os.linux.pwrite else null;
		pub const rename = if (@hasDecl(substitutes, "rename")) substitutes.rename else if (@hasDecl(std.os.linux, "rename")) std.os.linux.rename else null;
		pub const renameat = if (@hasDecl(substitutes, "renameat")) substitutes.renameat else if (@hasDecl(std.os.linux, "renameat")) std.os.linux.renameat else null;
		pub const renameat2 = if (@hasDecl(substitutes, "renameat2")) substitutes.renameat2 else if (@hasDecl(std.os.linux, "renameat2")) std.os.linux.renameat2 else null;
		pub const open = if (@hasDecl(substitutes, "open")) substitutes.open else if (@hasDecl(std.os.linux, "open")) std.os.linux.open else null;
		pub const create = if (@hasDecl(substitutes, "create")) substitutes.create else if (@hasDecl(std.os.linux, "create")) std.os.linux.create else null;
		pub const openat = if (@hasDecl(substitutes, "openat")) substitutes.openat else if (@hasDecl(std.os.linux, "openat")) std.os.linux.openat else null;
		pub const clone5 = if (@hasDecl(substitutes, "clone5")) substitutes.clone5 else if (@hasDecl(std.os.linux, "clone5")) std.os.linux.clone5 else null;
		pub const clone2 = if (@hasDecl(substitutes, "clone2")) substitutes.clone2 else if (@hasDecl(std.os.linux, "clone2")) std.os.linux.clone2 else null;
		pub const close = if (@hasDecl(substitutes, "close")) substitutes.close else if (@hasDecl(std.os.linux, "close")) std.os.linux.close else null;
		pub const fchmod = if (@hasDecl(substitutes, "fchmod")) substitutes.fchmod else if (@hasDecl(std.os.linux, "fchmod")) std.os.linux.fchmod else null;
		pub const chmod = if (@hasDecl(substitutes, "chmod")) substitutes.chmod else if (@hasDecl(std.os.linux, "chmod")) std.os.linux.chmod else null;
		pub const fchown = if (@hasDecl(substitutes, "fchown")) substitutes.fchown else if (@hasDecl(std.os.linux, "fchown")) std.os.linux.fchown else null;
		pub const fchmodat = if (@hasDecl(substitutes, "fchmodat")) substitutes.fchmodat else if (@hasDecl(std.os.linux, "fchmodat")) std.os.linux.fchmodat else null;
		pub const llseek = if (@hasDecl(substitutes, "llseek")) substitutes.llseek else if (@hasDecl(std.os.linux, "llseek")) std.os.linux.llseek else null;
		pub const lseek = if (@hasDecl(substitutes, "lseek")) substitutes.lseek else if (@hasDecl(std.os.linux, "lseek")) std.os.linux.lseek else null;
		pub const exit = if (@hasDecl(substitutes, "exit")) substitutes.exit else if (@hasDecl(std.os.linux, "exit")) std.os.linux.exit else null;
		pub const exit_group = if (@hasDecl(substitutes, "exit_group")) substitutes.exit_group else if (@hasDecl(std.os.linux, "exit_group")) std.os.linux.exit_group else null;
		pub const LINUX_REBOOT = if (@hasDecl(substitutes, "LINUX_REBOOT")) substitutes.LINUX_REBOOT else if (@hasDecl(std.os.linux, "LINUX_REBOOT")) std.os.linux.LINUX_REBOOT else null;
		pub const reboot = if (@hasDecl(substitutes, "reboot")) substitutes.reboot else if (@hasDecl(std.os.linux, "reboot")) std.os.linux.reboot else null;
		pub const getrandom = if (@hasDecl(substitutes, "getrandom")) substitutes.getrandom else if (@hasDecl(std.os.linux, "getrandom")) std.os.linux.getrandom else null;
		pub const kill = if (@hasDecl(substitutes, "kill")) substitutes.kill else if (@hasDecl(std.os.linux, "kill")) std.os.linux.kill else null;
		pub const tkill = if (@hasDecl(substitutes, "tkill")) substitutes.tkill else if (@hasDecl(std.os.linux, "tkill")) std.os.linux.tkill else null;
		pub const tgkill = if (@hasDecl(substitutes, "tgkill")) substitutes.tgkill else if (@hasDecl(std.os.linux, "tgkill")) std.os.linux.tgkill else null;
		pub const link = if (@hasDecl(substitutes, "link")) substitutes.link else if (@hasDecl(std.os.linux, "link")) std.os.linux.link else null;
		pub const linkat = if (@hasDecl(substitutes, "linkat")) substitutes.linkat else if (@hasDecl(std.os.linux, "linkat")) std.os.linux.linkat else null;
		pub const unlink = if (@hasDecl(substitutes, "unlink")) substitutes.unlink else if (@hasDecl(std.os.linux, "unlink")) std.os.linux.unlink else null;
		pub const unlinkat = if (@hasDecl(substitutes, "unlinkat")) substitutes.unlinkat else if (@hasDecl(std.os.linux, "unlinkat")) std.os.linux.unlinkat else null;
		pub const waitpid = if (@hasDecl(substitutes, "waitpid")) substitutes.waitpid else if (@hasDecl(std.os.linux, "waitpid")) std.os.linux.waitpid else null;
		pub const wait4 = if (@hasDecl(substitutes, "wait4")) substitutes.wait4 else if (@hasDecl(std.os.linux, "wait4")) std.os.linux.wait4 else null;
		pub const waitid = if (@hasDecl(substitutes, "waitid")) substitutes.waitid else if (@hasDecl(std.os.linux, "waitid")) std.os.linux.waitid else null;
		pub const fcntl = if (@hasDecl(substitutes, "fcntl")) substitutes.fcntl else if (@hasDecl(std.os.linux, "fcntl")) std.os.linux.fcntl else null;
		pub const flock = if (@hasDecl(substitutes, "flock")) substitutes.flock else if (@hasDecl(std.os.linux, "flock")) std.os.linux.flock else null;
		pub const clock_gettime = if (@hasDecl(substitutes, "clock_gettime")) substitutes.clock_gettime else if (@hasDecl(std.os.linux, "clock_gettime")) std.os.linux.clock_gettime else null;
		pub const clock_getres = if (@hasDecl(substitutes, "clock_getres")) substitutes.clock_getres else if (@hasDecl(std.os.linux, "clock_getres")) std.os.linux.clock_getres else null;
		pub const clock_settime = if (@hasDecl(substitutes, "clock_settime")) substitutes.clock_settime else if (@hasDecl(std.os.linux, "clock_settime")) std.os.linux.clock_settime else null;
		pub const gettimeofday = if (@hasDecl(substitutes, "gettimeofday")) substitutes.gettimeofday else if (@hasDecl(std.os.linux, "gettimeofday")) std.os.linux.gettimeofday else null;
		pub const settimeofday = if (@hasDecl(substitutes, "settimeofday")) substitutes.settimeofday else if (@hasDecl(std.os.linux, "settimeofday")) std.os.linux.settimeofday else null;
		pub const nanosleep = if (@hasDecl(substitutes, "nanosleep")) substitutes.nanosleep else if (@hasDecl(std.os.linux, "nanosleep")) std.os.linux.nanosleep else null;
		pub const setuid = if (@hasDecl(substitutes, "setuid")) substitutes.setuid else if (@hasDecl(std.os.linux, "setuid")) std.os.linux.setuid else null;
		pub const setgid = if (@hasDecl(substitutes, "setgid")) substitutes.setgid else if (@hasDecl(std.os.linux, "setgid")) std.os.linux.setgid else null;
		pub const setreuid = if (@hasDecl(substitutes, "setreuid")) substitutes.setreuid else if (@hasDecl(std.os.linux, "setreuid")) std.os.linux.setreuid else null;
		pub const setregid = if (@hasDecl(substitutes, "setregid")) substitutes.setregid else if (@hasDecl(std.os.linux, "setregid")) std.os.linux.setregid else null;
		pub const getuid = if (@hasDecl(substitutes, "getuid")) substitutes.getuid else if (@hasDecl(std.os.linux, "getuid")) std.os.linux.getuid else null;
		pub const getgid = if (@hasDecl(substitutes, "getgid")) substitutes.getgid else if (@hasDecl(std.os.linux, "getgid")) std.os.linux.getgid else null;
		pub const geteuid = if (@hasDecl(substitutes, "geteuid")) substitutes.geteuid else if (@hasDecl(std.os.linux, "geteuid")) std.os.linux.geteuid else null;
		pub const getegid = if (@hasDecl(substitutes, "getegid")) substitutes.getegid else if (@hasDecl(std.os.linux, "getegid")) std.os.linux.getegid else null;
		pub const seteuid = if (@hasDecl(substitutes, "seteuid")) substitutes.seteuid else if (@hasDecl(std.os.linux, "seteuid")) std.os.linux.seteuid else null;
		pub const setegid = if (@hasDecl(substitutes, "setegid")) substitutes.setegid else if (@hasDecl(std.os.linux, "setegid")) std.os.linux.setegid else null;
		pub const getresuid = if (@hasDecl(substitutes, "getresuid")) substitutes.getresuid else if (@hasDecl(std.os.linux, "getresuid")) std.os.linux.getresuid else null;
		pub const getresgid = if (@hasDecl(substitutes, "getresgid")) substitutes.getresgid else if (@hasDecl(std.os.linux, "getresgid")) std.os.linux.getresgid else null;
		pub const setresuid = if (@hasDecl(substitutes, "setresuid")) substitutes.setresuid else if (@hasDecl(std.os.linux, "setresuid")) std.os.linux.setresuid else null;
		pub const setresgid = if (@hasDecl(substitutes, "setresgid")) substitutes.setresgid else if (@hasDecl(std.os.linux, "setresgid")) std.os.linux.setresgid else null;
		pub const getgroups = if (@hasDecl(substitutes, "getgroups")) substitutes.getgroups else if (@hasDecl(std.os.linux, "getgroups")) std.os.linux.getgroups else null;
		pub const setgroups = if (@hasDecl(substitutes, "setgroups")) substitutes.setgroups else if (@hasDecl(std.os.linux, "setgroups")) std.os.linux.setgroups else null;
		pub const getpid = if (@hasDecl(substitutes, "getpid")) substitutes.getpid else if (@hasDecl(std.os.linux, "getpid")) std.os.linux.getpid else null;
		pub const gettid = if (@hasDecl(substitutes, "gettid")) substitutes.gettid else if (@hasDecl(std.os.linux, "gettid")) std.os.linux.gettid else null;
		pub const sigprocmask = if (@hasDecl(substitutes, "sigprocmask")) substitutes.sigprocmask else if (@hasDecl(std.os.linux, "sigprocmask")) std.os.linux.sigprocmask else null;
		pub const sigaction = if (@hasDecl(substitutes, "sigaction")) substitutes.sigaction else if (@hasDecl(std.os.linux, "sigaction")) std.os.linux.sigaction else null;
		pub const sigaddset = if (@hasDecl(substitutes, "sigaddset")) substitutes.sigaddset else if (@hasDecl(std.os.linux, "sigaddset")) std.os.linux.sigaddset else null;
		pub const sigismember = if (@hasDecl(substitutes, "sigismember")) substitutes.sigismember else if (@hasDecl(std.os.linux, "sigismember")) std.os.linux.sigismember else null;
		pub const getsockname = if (@hasDecl(substitutes, "getsockname")) substitutes.getsockname else if (@hasDecl(std.os.linux, "getsockname")) std.os.linux.getsockname else null;
		pub const getpeername = if (@hasDecl(substitutes, "getpeername")) substitutes.getpeername else if (@hasDecl(std.os.linux, "getpeername")) std.os.linux.getpeername else null;
		pub const socket = if (@hasDecl(substitutes, "socket")) substitutes.socket else if (@hasDecl(std.os.linux, "socket")) std.os.linux.socket else null;
		pub const setsockopt = if (@hasDecl(substitutes, "setsockopt")) substitutes.setsockopt else if (@hasDecl(std.os.linux, "setsockopt")) std.os.linux.setsockopt else null;
		pub const getsockopt = if (@hasDecl(substitutes, "getsockopt")) substitutes.getsockopt else if (@hasDecl(std.os.linux, "getsockopt")) std.os.linux.getsockopt else null;
		pub const sendmsg = if (@hasDecl(substitutes, "sendmsg")) substitutes.sendmsg else if (@hasDecl(std.os.linux, "sendmsg")) std.os.linux.sendmsg else null;
		pub const sendmmsg = if (@hasDecl(substitutes, "sendmmsg")) substitutes.sendmmsg else if (@hasDecl(std.os.linux, "sendmmsg")) std.os.linux.sendmmsg else null;
		pub const connect = if (@hasDecl(substitutes, "connect")) substitutes.connect else if (@hasDecl(std.os.linux, "connect")) std.os.linux.connect else null;
		pub const recvmsg = if (@hasDecl(substitutes, "recvmsg")) substitutes.recvmsg else if (@hasDecl(std.os.linux, "recvmsg")) std.os.linux.recvmsg else null;
		pub const recvfrom = if (@hasDecl(substitutes, "recvfrom")) substitutes.recvfrom else if (@hasDecl(std.os.linux, "recvfrom")) std.os.linux.recvfrom else null;
		pub const shutdown = if (@hasDecl(substitutes, "shutdown")) substitutes.shutdown else if (@hasDecl(std.os.linux, "shutdown")) std.os.linux.shutdown else null;
		pub const bind = if (@hasDecl(substitutes, "bind")) substitutes.bind else if (@hasDecl(std.os.linux, "bind")) std.os.linux.bind else null;
		pub const listen = if (@hasDecl(substitutes, "listen")) substitutes.listen else if (@hasDecl(std.os.linux, "listen")) std.os.linux.listen else null;
		pub const sendto = if (@hasDecl(substitutes, "sendto")) substitutes.sendto else if (@hasDecl(std.os.linux, "sendto")) std.os.linux.sendto else null;
		pub const sendfile = if (@hasDecl(substitutes, "sendfile")) substitutes.sendfile else if (@hasDecl(std.os.linux, "sendfile")) std.os.linux.sendfile else null;
		pub const socketpair = if (@hasDecl(substitutes, "socketpair")) substitutes.socketpair else if (@hasDecl(std.os.linux, "socketpair")) std.os.linux.socketpair else null;
		pub const accept = if (@hasDecl(substitutes, "accept")) substitutes.accept else if (@hasDecl(std.os.linux, "accept")) std.os.linux.accept else null;
		pub const accept4 = if (@hasDecl(substitutes, "accept4")) substitutes.accept4 else if (@hasDecl(std.os.linux, "accept4")) std.os.linux.accept4 else null;
		pub const fstat = if (@hasDecl(substitutes, "fstat")) substitutes.fstat else if (@hasDecl(std.os.linux, "fstat")) std.os.linux.fstat else null;
		pub const stat = if (@hasDecl(substitutes, "stat")) substitutes.stat else if (@hasDecl(std.os.linux, "stat")) std.os.linux.stat else null;
		pub const lstat = if (@hasDecl(substitutes, "lstat")) substitutes.lstat else if (@hasDecl(std.os.linux, "lstat")) std.os.linux.lstat else null;
		pub const fstatat = if (@hasDecl(substitutes, "fstatat")) substitutes.fstatat else if (@hasDecl(std.os.linux, "fstatat")) std.os.linux.fstatat else null;
		pub const statx = if (@hasDecl(substitutes, "statx")) substitutes.statx else if (@hasDecl(std.os.linux, "statx")) std.os.linux.statx else null;
		pub const listxattr = if (@hasDecl(substitutes, "listxattr")) substitutes.listxattr else if (@hasDecl(std.os.linux, "listxattr")) std.os.linux.listxattr else null;
		pub const llistxattr = if (@hasDecl(substitutes, "llistxattr")) substitutes.llistxattr else if (@hasDecl(std.os.linux, "llistxattr")) std.os.linux.llistxattr else null;
		pub const flistxattr = if (@hasDecl(substitutes, "flistxattr")) substitutes.flistxattr else if (@hasDecl(std.os.linux, "flistxattr")) std.os.linux.flistxattr else null;
		pub const getxattr = if (@hasDecl(substitutes, "getxattr")) substitutes.getxattr else if (@hasDecl(std.os.linux, "getxattr")) std.os.linux.getxattr else null;
		pub const lgetxattr = if (@hasDecl(substitutes, "lgetxattr")) substitutes.lgetxattr else if (@hasDecl(std.os.linux, "lgetxattr")) std.os.linux.lgetxattr else null;
		pub const fgetxattr = if (@hasDecl(substitutes, "fgetxattr")) substitutes.fgetxattr else if (@hasDecl(std.os.linux, "fgetxattr")) std.os.linux.fgetxattr else null;
		pub const setxattr = if (@hasDecl(substitutes, "setxattr")) substitutes.setxattr else if (@hasDecl(std.os.linux, "setxattr")) std.os.linux.setxattr else null;
		pub const lsetxattr = if (@hasDecl(substitutes, "lsetxattr")) substitutes.lsetxattr else if (@hasDecl(std.os.linux, "lsetxattr")) std.os.linux.lsetxattr else null;
		pub const fsetxattr = if (@hasDecl(substitutes, "fsetxattr")) substitutes.fsetxattr else if (@hasDecl(std.os.linux, "fsetxattr")) std.os.linux.fsetxattr else null;
		pub const removexattr = if (@hasDecl(substitutes, "removexattr")) substitutes.removexattr else if (@hasDecl(std.os.linux, "removexattr")) std.os.linux.removexattr else null;
		pub const lremovexattr = if (@hasDecl(substitutes, "lremovexattr")) substitutes.lremovexattr else if (@hasDecl(std.os.linux, "lremovexattr")) std.os.linux.lremovexattr else null;
		pub const fremovexattr = if (@hasDecl(substitutes, "fremovexattr")) substitutes.fremovexattr else if (@hasDecl(std.os.linux, "fremovexattr")) std.os.linux.fremovexattr else null;
		pub const sched_yield = if (@hasDecl(substitutes, "sched_yield")) substitutes.sched_yield else if (@hasDecl(std.os.linux, "sched_yield")) std.os.linux.sched_yield else null;
		pub const sched_getaffinity = if (@hasDecl(substitutes, "sched_getaffinity")) substitutes.sched_getaffinity else if (@hasDecl(std.os.linux, "sched_getaffinity")) std.os.linux.sched_getaffinity else null;
		pub const epoll_create = if (@hasDecl(substitutes, "epoll_create")) substitutes.epoll_create else if (@hasDecl(std.os.linux, "epoll_create")) std.os.linux.epoll_create else null;
		pub const epoll_create1 = if (@hasDecl(substitutes, "epoll_create1")) substitutes.epoll_create1 else if (@hasDecl(std.os.linux, "epoll_create1")) std.os.linux.epoll_create1 else null;
		pub const epoll_ctl = if (@hasDecl(substitutes, "epoll_ctl")) substitutes.epoll_ctl else if (@hasDecl(std.os.linux, "epoll_ctl")) std.os.linux.epoll_ctl else null;
		pub const epoll_wait = if (@hasDecl(substitutes, "epoll_wait")) substitutes.epoll_wait else if (@hasDecl(std.os.linux, "epoll_wait")) std.os.linux.epoll_wait else null;
		pub const epoll_pwait = if (@hasDecl(substitutes, "epoll_pwait")) substitutes.epoll_pwait else if (@hasDecl(std.os.linux, "epoll_pwait")) std.os.linux.epoll_pwait else null;
		pub const eventfd = if (@hasDecl(substitutes, "eventfd")) substitutes.eventfd else if (@hasDecl(std.os.linux, "eventfd")) std.os.linux.eventfd else null;
		pub const timerfd_create = if (@hasDecl(substitutes, "timerfd_create")) substitutes.timerfd_create else if (@hasDecl(std.os.linux, "timerfd_create")) std.os.linux.timerfd_create else null;
		pub const itimerspec = if (@hasDecl(substitutes, "itimerspec")) substitutes.itimerspec else if (@hasDecl(std.os.linux, "itimerspec")) std.os.linux.itimerspec else null;
		pub const timerfd_gettime = if (@hasDecl(substitutes, "timerfd_gettime")) substitutes.timerfd_gettime else if (@hasDecl(std.os.linux, "timerfd_gettime")) std.os.linux.timerfd_gettime else null;
		pub const timerfd_settime = if (@hasDecl(substitutes, "timerfd_settime")) substitutes.timerfd_settime else if (@hasDecl(std.os.linux, "timerfd_settime")) std.os.linux.timerfd_settime else null;
		pub const ITIMER = if (@hasDecl(substitutes, "ITIMER")) substitutes.ITIMER else if (@hasDecl(std.os.linux, "ITIMER")) std.os.linux.ITIMER else null;
		pub const getitimer = if (@hasDecl(substitutes, "getitimer")) substitutes.getitimer else if (@hasDecl(std.os.linux, "getitimer")) std.os.linux.getitimer else null;
		pub const setitimer = if (@hasDecl(substitutes, "setitimer")) substitutes.setitimer else if (@hasDecl(std.os.linux, "setitimer")) std.os.linux.setitimer else null;
		pub const unshare = if (@hasDecl(substitutes, "unshare")) substitutes.unshare else if (@hasDecl(std.os.linux, "unshare")) std.os.linux.unshare else null;
		pub const capget = if (@hasDecl(substitutes, "capget")) substitutes.capget else if (@hasDecl(std.os.linux, "capget")) std.os.linux.capget else null;
		pub const capset = if (@hasDecl(substitutes, "capset")) substitutes.capset else if (@hasDecl(std.os.linux, "capset")) std.os.linux.capset else null;
		pub const sigaltstack = if (@hasDecl(substitutes, "sigaltstack")) substitutes.sigaltstack else if (@hasDecl(std.os.linux, "sigaltstack")) std.os.linux.sigaltstack else null;
		pub const uname = if (@hasDecl(substitutes, "uname")) substitutes.uname else if (@hasDecl(std.os.linux, "uname")) std.os.linux.uname else null;
		pub const io_uring_setup = if (@hasDecl(substitutes, "io_uring_setup")) substitutes.io_uring_setup else if (@hasDecl(std.os.linux, "io_uring_setup")) std.os.linux.io_uring_setup else null;
		pub const io_uring_enter = if (@hasDecl(substitutes, "io_uring_enter")) substitutes.io_uring_enter else if (@hasDecl(std.os.linux, "io_uring_enter")) std.os.linux.io_uring_enter else null;
		pub const io_uring_register = if (@hasDecl(substitutes, "io_uring_register")) substitutes.io_uring_register else if (@hasDecl(std.os.linux, "io_uring_register")) std.os.linux.io_uring_register else null;
		pub const memfd_create = if (@hasDecl(substitutes, "memfd_create")) substitutes.memfd_create else if (@hasDecl(std.os.linux, "memfd_create")) std.os.linux.memfd_create else null;
		pub const getrusage = if (@hasDecl(substitutes, "getrusage")) substitutes.getrusage else if (@hasDecl(std.os.linux, "getrusage")) std.os.linux.getrusage else null;
		pub const tcgetattr = if (@hasDecl(substitutes, "tcgetattr")) substitutes.tcgetattr else if (@hasDecl(std.os.linux, "tcgetattr")) std.os.linux.tcgetattr else null;
		pub const tcsetattr = if (@hasDecl(substitutes, "tcsetattr")) substitutes.tcsetattr else if (@hasDecl(std.os.linux, "tcsetattr")) std.os.linux.tcsetattr else null;
		pub const tcgetpgrp = if (@hasDecl(substitutes, "tcgetpgrp")) substitutes.tcgetpgrp else if (@hasDecl(std.os.linux, "tcgetpgrp")) std.os.linux.tcgetpgrp else null;
		pub const tcsetpgrp = if (@hasDecl(substitutes, "tcsetpgrp")) substitutes.tcsetpgrp else if (@hasDecl(std.os.linux, "tcsetpgrp")) std.os.linux.tcsetpgrp else null;
		pub const tcdrain = if (@hasDecl(substitutes, "tcdrain")) substitutes.tcdrain else if (@hasDecl(std.os.linux, "tcdrain")) std.os.linux.tcdrain else null;
		pub const ioctl = if (@hasDecl(substitutes, "ioctl")) substitutes.ioctl else if (@hasDecl(std.os.linux, "ioctl")) std.os.linux.ioctl else null;
		pub const signalfd = if (@hasDecl(substitutes, "signalfd")) substitutes.signalfd else if (@hasDecl(std.os.linux, "signalfd")) std.os.linux.signalfd else null;
		pub const copy_file_range = if (@hasDecl(substitutes, "copy_file_range")) substitutes.copy_file_range else if (@hasDecl(std.os.linux, "copy_file_range")) std.os.linux.copy_file_range else null;
		pub const bpf = if (@hasDecl(substitutes, "bpf")) substitutes.bpf else if (@hasDecl(std.os.linux, "bpf")) std.os.linux.bpf else null;
		pub const sync = if (@hasDecl(substitutes, "sync")) substitutes.sync else if (@hasDecl(std.os.linux, "sync")) std.os.linux.sync else null;
		pub const syncfs = if (@hasDecl(substitutes, "syncfs")) substitutes.syncfs else if (@hasDecl(std.os.linux, "syncfs")) std.os.linux.syncfs else null;
		pub const fsync = if (@hasDecl(substitutes, "fsync")) substitutes.fsync else if (@hasDecl(std.os.linux, "fsync")) std.os.linux.fsync else null;
		pub const fdatasync = if (@hasDecl(substitutes, "fdatasync")) substitutes.fdatasync else if (@hasDecl(std.os.linux, "fdatasync")) std.os.linux.fdatasync else null;
		pub const prctl = if (@hasDecl(substitutes, "prctl")) substitutes.prctl else if (@hasDecl(std.os.linux, "prctl")) std.os.linux.prctl else null;
		pub const getrlimit = if (@hasDecl(substitutes, "getrlimit")) substitutes.getrlimit else if (@hasDecl(std.os.linux, "getrlimit")) std.os.linux.getrlimit else null;
		pub const setrlimit = if (@hasDecl(substitutes, "setrlimit")) substitutes.setrlimit else if (@hasDecl(std.os.linux, "setrlimit")) std.os.linux.setrlimit else null;
		pub const prlimit = if (@hasDecl(substitutes, "prlimit")) substitutes.prlimit else if (@hasDecl(std.os.linux, "prlimit")) std.os.linux.prlimit else null;
		pub const mincore = if (@hasDecl(substitutes, "mincore")) substitutes.mincore else if (@hasDecl(std.os.linux, "mincore")) std.os.linux.mincore else null;
		pub const madvise = if (@hasDecl(substitutes, "madvise")) substitutes.madvise else if (@hasDecl(std.os.linux, "madvise")) std.os.linux.madvise else null;
		pub const pidfd_open = if (@hasDecl(substitutes, "pidfd_open")) substitutes.pidfd_open else if (@hasDecl(std.os.linux, "pidfd_open")) std.os.linux.pidfd_open else null;
		pub const pidfd_getfd = if (@hasDecl(substitutes, "pidfd_getfd")) substitutes.pidfd_getfd else if (@hasDecl(std.os.linux, "pidfd_getfd")) std.os.linux.pidfd_getfd else null;
		pub const pidfd_send_signal = if (@hasDecl(substitutes, "pidfd_send_signal")) substitutes.pidfd_send_signal else if (@hasDecl(std.os.linux, "pidfd_send_signal")) std.os.linux.pidfd_send_signal else null;
		pub const process_vm_readv = if (@hasDecl(substitutes, "process_vm_readv")) substitutes.process_vm_readv else if (@hasDecl(std.os.linux, "process_vm_readv")) std.os.linux.process_vm_readv else null;
		pub const process_vm_writev = if (@hasDecl(substitutes, "process_vm_writev")) substitutes.process_vm_writev else if (@hasDecl(std.os.linux, "process_vm_writev")) std.os.linux.process_vm_writev else null;
		pub const fadvise = if (@hasDecl(substitutes, "fadvise")) substitutes.fadvise else if (@hasDecl(std.os.linux, "fadvise")) std.os.linux.fadvise else null;
		pub const perf_event_open = if (@hasDecl(substitutes, "perf_event_open")) substitutes.perf_event_open else if (@hasDecl(std.os.linux, "perf_event_open")) std.os.linux.perf_event_open else null;
		pub const seccomp = if (@hasDecl(substitutes, "seccomp")) substitutes.seccomp else if (@hasDecl(std.os.linux, "seccomp")) std.os.linux.seccomp else null;
		pub const ptrace = if (@hasDecl(substitutes, "ptrace")) substitutes.ptrace else if (@hasDecl(std.os.linux, "ptrace")) std.os.linux.ptrace else null;
		pub const E = if (@hasDecl(substitutes, "E")) substitutes.E else if (@hasDecl(std.os.linux, "E")) std.os.linux.E else null;
		pub const pid_t = if (@hasDecl(substitutes, "pid_t")) substitutes.pid_t else if (@hasDecl(std.os.linux, "pid_t")) std.os.linux.pid_t else null;
		pub const fd_t = if (@hasDecl(substitutes, "fd_t")) substitutes.fd_t else if (@hasDecl(std.os.linux, "fd_t")) std.os.linux.fd_t else null;
		pub const uid_t = if (@hasDecl(substitutes, "uid_t")) substitutes.uid_t else if (@hasDecl(std.os.linux, "uid_t")) std.os.linux.uid_t else null;
		pub const gid_t = if (@hasDecl(substitutes, "gid_t")) substitutes.gid_t else if (@hasDecl(std.os.linux, "gid_t")) std.os.linux.gid_t else null;
		pub const clock_t = if (@hasDecl(substitutes, "clock_t")) substitutes.clock_t else if (@hasDecl(std.os.linux, "clock_t")) std.os.linux.clock_t else null;
		pub const NAME_MAX = if (@hasDecl(substitutes, "NAME_MAX")) substitutes.NAME_MAX else if (@hasDecl(std.os.linux, "NAME_MAX")) std.os.linux.NAME_MAX else null;
		pub const PATH_MAX = if (@hasDecl(substitutes, "PATH_MAX")) substitutes.PATH_MAX else if (@hasDecl(std.os.linux, "PATH_MAX")) std.os.linux.PATH_MAX else null;
		pub const IOV_MAX = if (@hasDecl(substitutes, "IOV_MAX")) substitutes.IOV_MAX else if (@hasDecl(std.os.linux, "IOV_MAX")) std.os.linux.IOV_MAX else null;
		pub const MAX_ADDR_LEN = if (@hasDecl(substitutes, "MAX_ADDR_LEN")) substitutes.MAX_ADDR_LEN else if (@hasDecl(std.os.linux, "MAX_ADDR_LEN")) std.os.linux.MAX_ADDR_LEN else null;
		pub const STDIN_FILENO = if (@hasDecl(substitutes, "STDIN_FILENO")) substitutes.STDIN_FILENO else if (@hasDecl(std.os.linux, "STDIN_FILENO")) std.os.linux.STDIN_FILENO else null;
		pub const STDOUT_FILENO = if (@hasDecl(substitutes, "STDOUT_FILENO")) substitutes.STDOUT_FILENO else if (@hasDecl(std.os.linux, "STDOUT_FILENO")) std.os.linux.STDOUT_FILENO else null;
		pub const STDERR_FILENO = if (@hasDecl(substitutes, "STDERR_FILENO")) substitutes.STDERR_FILENO else if (@hasDecl(std.os.linux, "STDERR_FILENO")) std.os.linux.STDERR_FILENO else null;
		pub const AT = if (@hasDecl(substitutes, "AT")) substitutes.AT else if (@hasDecl(std.os.linux, "AT")) std.os.linux.AT else null;
		pub const FALLOC = if (@hasDecl(substitutes, "FALLOC")) substitutes.FALLOC else if (@hasDecl(std.os.linux, "FALLOC")) std.os.linux.FALLOC else null;
		pub const FUTEX = if (@hasDecl(substitutes, "FUTEX")) substitutes.FUTEX else if (@hasDecl(std.os.linux, "FUTEX")) std.os.linux.FUTEX else null;
		pub const PROT = if (@hasDecl(substitutes, "PROT")) substitutes.PROT else if (@hasDecl(std.os.linux, "PROT")) std.os.linux.PROT else null;
		pub const FD_CLOEXEC = if (@hasDecl(substitutes, "FD_CLOEXEC")) substitutes.FD_CLOEXEC else if (@hasDecl(std.os.linux, "FD_CLOEXEC")) std.os.linux.FD_CLOEXEC else null;
		pub const F_OK = if (@hasDecl(substitutes, "F_OK")) substitutes.F_OK else if (@hasDecl(std.os.linux, "F_OK")) std.os.linux.F_OK else null;
		pub const X_OK = if (@hasDecl(substitutes, "X_OK")) substitutes.X_OK else if (@hasDecl(std.os.linux, "X_OK")) std.os.linux.X_OK else null;
		pub const W_OK = if (@hasDecl(substitutes, "W_OK")) substitutes.W_OK else if (@hasDecl(std.os.linux, "W_OK")) std.os.linux.W_OK else null;
		pub const R_OK = if (@hasDecl(substitutes, "R_OK")) substitutes.R_OK else if (@hasDecl(std.os.linux, "R_OK")) std.os.linux.R_OK else null;
		pub const W = if (@hasDecl(substitutes, "W")) substitutes.W else if (@hasDecl(std.os.linux, "W")) std.os.linux.W else null;
		pub const P = if (@hasDecl(substitutes, "P")) substitutes.P else if (@hasDecl(std.os.linux, "P")) std.os.linux.P else null;
		pub const SA = if (@hasDecl(substitutes, "SA")) substitutes.SA else if (@hasDecl(std.os.linux, "SA")) std.os.linux.SA else null;
		pub const SIG = if (@hasDecl(substitutes, "SIG")) substitutes.SIG else if (@hasDecl(std.os.linux, "SIG")) std.os.linux.SIG else null;
		pub const kernel_rwf = if (@hasDecl(substitutes, "kernel_rwf")) substitutes.kernel_rwf else if (@hasDecl(std.os.linux, "kernel_rwf")) std.os.linux.kernel_rwf else null;
		pub const RWF = if (@hasDecl(substitutes, "RWF")) substitutes.RWF else if (@hasDecl(std.os.linux, "RWF")) std.os.linux.RWF else null;
		pub const SEEK = if (@hasDecl(substitutes, "SEEK")) substitutes.SEEK else if (@hasDecl(std.os.linux, "SEEK")) std.os.linux.SEEK else null;
		pub const SHUT = if (@hasDecl(substitutes, "SHUT")) substitutes.SHUT else if (@hasDecl(std.os.linux, "SHUT")) std.os.linux.SHUT else null;
		pub const SOCK = if (@hasDecl(substitutes, "SOCK")) substitutes.SOCK else if (@hasDecl(std.os.linux, "SOCK")) std.os.linux.SOCK else null;
		pub const TCP = if (@hasDecl(substitutes, "TCP")) substitutes.TCP else if (@hasDecl(std.os.linux, "TCP")) std.os.linux.TCP else null;
		pub const PF = if (@hasDecl(substitutes, "PF")) substitutes.PF else if (@hasDecl(std.os.linux, "PF")) std.os.linux.PF else null;
		pub const AF = if (@hasDecl(substitutes, "AF")) substitutes.AF else if (@hasDecl(std.os.linux, "AF")) std.os.linux.AF else null;
		pub const SO = if (@hasDecl(substitutes, "SO")) substitutes.SO else if (@hasDecl(std.os.linux, "SO")) std.os.linux.SO else null;
		pub const SCM = if (@hasDecl(substitutes, "SCM")) substitutes.SCM else if (@hasDecl(std.os.linux, "SCM")) std.os.linux.SCM else null;
		pub const SOL = if (@hasDecl(substitutes, "SOL")) substitutes.SOL else if (@hasDecl(std.os.linux, "SOL")) std.os.linux.SOL else null;
		pub const SOMAXCONN = if (@hasDecl(substitutes, "SOMAXCONN")) substitutes.SOMAXCONN else if (@hasDecl(std.os.linux, "SOMAXCONN")) std.os.linux.SOMAXCONN else null;
		pub const IP = if (@hasDecl(substitutes, "IP")) substitutes.IP else if (@hasDecl(std.os.linux, "IP")) std.os.linux.IP else null;
		pub const IPV6 = if (@hasDecl(substitutes, "IPV6")) substitutes.IPV6 else if (@hasDecl(std.os.linux, "IPV6")) std.os.linux.IPV6 else null;
		pub const MSG = if (@hasDecl(substitutes, "MSG")) substitutes.MSG else if (@hasDecl(std.os.linux, "MSG")) std.os.linux.MSG else null;
		pub const DT = if (@hasDecl(substitutes, "DT")) substitutes.DT else if (@hasDecl(std.os.linux, "DT")) std.os.linux.DT else null;
		pub const T = if (@hasDecl(substitutes, "T")) substitutes.T else if (@hasDecl(std.os.linux, "T")) std.os.linux.T else null;
		pub const EPOLL = if (@hasDecl(substitutes, "EPOLL")) substitutes.EPOLL else if (@hasDecl(std.os.linux, "EPOLL")) std.os.linux.EPOLL else null;
		pub const CLOCK = if (@hasDecl(substitutes, "CLOCK")) substitutes.CLOCK else if (@hasDecl(std.os.linux, "CLOCK")) std.os.linux.CLOCK else null;
		pub const CSIGNAL = if (@hasDecl(substitutes, "CSIGNAL")) substitutes.CSIGNAL else if (@hasDecl(std.os.linux, "CSIGNAL")) std.os.linux.CSIGNAL else null;
		pub const CLONE = if (@hasDecl(substitutes, "CLONE")) substitutes.CLONE else if (@hasDecl(std.os.linux, "CLONE")) std.os.linux.CLONE else null;
		pub const EFD = if (@hasDecl(substitutes, "EFD")) substitutes.EFD else if (@hasDecl(std.os.linux, "EFD")) std.os.linux.EFD else null;
		pub const MS = if (@hasDecl(substitutes, "MS")) substitutes.MS else if (@hasDecl(std.os.linux, "MS")) std.os.linux.MS else null;
		pub const MNT = if (@hasDecl(substitutes, "MNT")) substitutes.MNT else if (@hasDecl(std.os.linux, "MNT")) std.os.linux.MNT else null;
		pub const UMOUNT_NOFOLLOW = if (@hasDecl(substitutes, "UMOUNT_NOFOLLOW")) substitutes.UMOUNT_NOFOLLOW else if (@hasDecl(std.os.linux, "UMOUNT_NOFOLLOW")) std.os.linux.UMOUNT_NOFOLLOW else null;
		pub const IN = if (@hasDecl(substitutes, "IN")) substitutes.IN else if (@hasDecl(std.os.linux, "IN")) std.os.linux.IN else null;
		pub const S = if (@hasDecl(substitutes, "S")) substitutes.S else if (@hasDecl(std.os.linux, "S")) std.os.linux.S else null;
		pub const UTIME = if (@hasDecl(substitutes, "UTIME")) substitutes.UTIME else if (@hasDecl(std.os.linux, "UTIME")) std.os.linux.UTIME else null;
		pub const TFD = if (@hasDecl(substitutes, "TFD")) substitutes.TFD else if (@hasDecl(std.os.linux, "TFD")) std.os.linux.TFD else null;
		pub const winsize = if (@hasDecl(substitutes, "winsize")) substitutes.winsize else if (@hasDecl(std.os.linux, "winsize")) std.os.linux.winsize else null;
		pub const NSIG = if (@hasDecl(substitutes, "NSIG")) substitutes.NSIG else if (@hasDecl(std.os.linux, "NSIG")) std.os.linux.NSIG else null;
		pub const sigset_t = if (@hasDecl(substitutes, "sigset_t")) substitutes.sigset_t else if (@hasDecl(std.os.linux, "sigset_t")) std.os.linux.sigset_t else null;
		pub const all_mask = if (@hasDecl(substitutes, "all_mask")) substitutes.all_mask else if (@hasDecl(std.os.linux, "all_mask")) std.os.linux.all_mask else null;
		pub const app_mask = if (@hasDecl(substitutes, "app_mask")) substitutes.app_mask else if (@hasDecl(std.os.linux, "app_mask")) std.os.linux.app_mask else null;
		pub const k_sigaction = if (@hasDecl(substitutes, "k_sigaction")) substitutes.k_sigaction else if (@hasDecl(std.os.linux, "k_sigaction")) std.os.linux.k_sigaction else null;
		pub const Sigaction = if (@hasDecl(substitutes, "Sigaction")) substitutes.Sigaction else if (@hasDecl(std.os.linux, "Sigaction")) std.os.linux.Sigaction else null;
		pub const empty_sigset = if (@hasDecl(substitutes, "empty_sigset")) substitutes.empty_sigset else if (@hasDecl(std.os.linux, "empty_sigset")) std.os.linux.empty_sigset else null;
		pub const SFD = if (@hasDecl(substitutes, "SFD")) substitutes.SFD else if (@hasDecl(std.os.linux, "SFD")) std.os.linux.SFD else null;
		pub const signalfd_siginfo = if (@hasDecl(substitutes, "signalfd_siginfo")) substitutes.signalfd_siginfo else if (@hasDecl(std.os.linux, "signalfd_siginfo")) std.os.linux.signalfd_siginfo else null;
		pub const in_port_t = if (@hasDecl(substitutes, "in_port_t")) substitutes.in_port_t else if (@hasDecl(std.os.linux, "in_port_t")) std.os.linux.in_port_t else null;
		pub const sa_family_t = if (@hasDecl(substitutes, "sa_family_t")) substitutes.sa_family_t else if (@hasDecl(std.os.linux, "sa_family_t")) std.os.linux.sa_family_t else null;
		pub const socklen_t = if (@hasDecl(substitutes, "socklen_t")) substitutes.socklen_t else if (@hasDecl(std.os.linux, "socklen_t")) std.os.linux.socklen_t else null;
		pub const sockaddr = if (@hasDecl(substitutes, "sockaddr")) substitutes.sockaddr else if (@hasDecl(std.os.linux, "sockaddr")) std.os.linux.sockaddr else null;
		pub const mmsghdr = if (@hasDecl(substitutes, "mmsghdr")) substitutes.mmsghdr else if (@hasDecl(std.os.linux, "mmsghdr")) std.os.linux.mmsghdr else null;
		pub const mmsghdr_const = if (@hasDecl(substitutes, "mmsghdr_const")) substitutes.mmsghdr_const else if (@hasDecl(std.os.linux, "mmsghdr_const")) std.os.linux.mmsghdr_const else null;
		pub const epoll_data = if (@hasDecl(substitutes, "epoll_data")) substitutes.epoll_data else if (@hasDecl(std.os.linux, "epoll_data")) std.os.linux.epoll_data else null;
		pub const epoll_event = if (@hasDecl(substitutes, "epoll_event")) substitutes.epoll_event else if (@hasDecl(std.os.linux, "epoll_event")) std.os.linux.epoll_event else null;
		pub const VFS_CAP_REVISION_MASK = if (@hasDecl(substitutes, "VFS_CAP_REVISION_MASK")) substitutes.VFS_CAP_REVISION_MASK else if (@hasDecl(std.os.linux, "VFS_CAP_REVISION_MASK")) std.os.linux.VFS_CAP_REVISION_MASK else null;
		pub const VFS_CAP_REVISION_SHIFT = if (@hasDecl(substitutes, "VFS_CAP_REVISION_SHIFT")) substitutes.VFS_CAP_REVISION_SHIFT else if (@hasDecl(std.os.linux, "VFS_CAP_REVISION_SHIFT")) std.os.linux.VFS_CAP_REVISION_SHIFT else null;
		pub const VFS_CAP_FLAGS_MASK = if (@hasDecl(substitutes, "VFS_CAP_FLAGS_MASK")) substitutes.VFS_CAP_FLAGS_MASK else if (@hasDecl(std.os.linux, "VFS_CAP_FLAGS_MASK")) std.os.linux.VFS_CAP_FLAGS_MASK else null;
		pub const VFS_CAP_FLAGS_EFFECTIVE = if (@hasDecl(substitutes, "VFS_CAP_FLAGS_EFFECTIVE")) substitutes.VFS_CAP_FLAGS_EFFECTIVE else if (@hasDecl(std.os.linux, "VFS_CAP_FLAGS_EFFECTIVE")) std.os.linux.VFS_CAP_FLAGS_EFFECTIVE else null;
		pub const VFS_CAP_REVISION_1 = if (@hasDecl(substitutes, "VFS_CAP_REVISION_1")) substitutes.VFS_CAP_REVISION_1 else if (@hasDecl(std.os.linux, "VFS_CAP_REVISION_1")) std.os.linux.VFS_CAP_REVISION_1 else null;
		pub const VFS_CAP_U32_1 = if (@hasDecl(substitutes, "VFS_CAP_U32_1")) substitutes.VFS_CAP_U32_1 else if (@hasDecl(std.os.linux, "VFS_CAP_U32_1")) std.os.linux.VFS_CAP_U32_1 else null;
		pub const XATTR_CAPS_SZ_1 = if (@hasDecl(substitutes, "XATTR_CAPS_SZ_1")) substitutes.XATTR_CAPS_SZ_1 else if (@hasDecl(std.os.linux, "XATTR_CAPS_SZ_1")) std.os.linux.XATTR_CAPS_SZ_1 else null;
		pub const VFS_CAP_REVISION_2 = if (@hasDecl(substitutes, "VFS_CAP_REVISION_2")) substitutes.VFS_CAP_REVISION_2 else if (@hasDecl(std.os.linux, "VFS_CAP_REVISION_2")) std.os.linux.VFS_CAP_REVISION_2 else null;
		pub const VFS_CAP_U32_2 = if (@hasDecl(substitutes, "VFS_CAP_U32_2")) substitutes.VFS_CAP_U32_2 else if (@hasDecl(std.os.linux, "VFS_CAP_U32_2")) std.os.linux.VFS_CAP_U32_2 else null;
		pub const XATTR_CAPS_SZ_2 = if (@hasDecl(substitutes, "XATTR_CAPS_SZ_2")) substitutes.XATTR_CAPS_SZ_2 else if (@hasDecl(std.os.linux, "XATTR_CAPS_SZ_2")) std.os.linux.XATTR_CAPS_SZ_2 else null;
		pub const XATTR_CAPS_SZ = if (@hasDecl(substitutes, "XATTR_CAPS_SZ")) substitutes.XATTR_CAPS_SZ else if (@hasDecl(std.os.linux, "XATTR_CAPS_SZ")) std.os.linux.XATTR_CAPS_SZ else null;
		pub const VFS_CAP_U32 = if (@hasDecl(substitutes, "VFS_CAP_U32")) substitutes.VFS_CAP_U32 else if (@hasDecl(std.os.linux, "VFS_CAP_U32")) std.os.linux.VFS_CAP_U32 else null;
		pub const VFS_CAP_REVISION = if (@hasDecl(substitutes, "VFS_CAP_REVISION")) substitutes.VFS_CAP_REVISION else if (@hasDecl(std.os.linux, "VFS_CAP_REVISION")) std.os.linux.VFS_CAP_REVISION else null;
		pub const vfs_cap_data = if (@hasDecl(substitutes, "vfs_cap_data")) substitutes.vfs_cap_data else if (@hasDecl(std.os.linux, "vfs_cap_data")) std.os.linux.vfs_cap_data else null;
		pub const CAP = if (@hasDecl(substitutes, "CAP")) substitutes.CAP else if (@hasDecl(std.os.linux, "CAP")) std.os.linux.CAP else null;
		pub const cap_t = if (@hasDecl(substitutes, "cap_t")) substitutes.cap_t else if (@hasDecl(std.os.linux, "cap_t")) std.os.linux.cap_t else null;
		pub const cap_user_header_t = if (@hasDecl(substitutes, "cap_user_header_t")) substitutes.cap_user_header_t else if (@hasDecl(std.os.linux, "cap_user_header_t")) std.os.linux.cap_user_header_t else null;
		pub const cap_user_data_t = if (@hasDecl(substitutes, "cap_user_data_t")) substitutes.cap_user_data_t else if (@hasDecl(std.os.linux, "cap_user_data_t")) std.os.linux.cap_user_data_t else null;
		pub const inotify_event = if (@hasDecl(substitutes, "inotify_event")) substitutes.inotify_event else if (@hasDecl(std.os.linux, "inotify_event")) std.os.linux.inotify_event else null;
		pub const dirent64 = if (@hasDecl(substitutes, "dirent64")) substitutes.dirent64 else if (@hasDecl(std.os.linux, "dirent64")) std.os.linux.dirent64 else null;
		pub const dl_phdr_info = if (@hasDecl(substitutes, "dl_phdr_info")) substitutes.dl_phdr_info else if (@hasDecl(std.os.linux, "dl_phdr_info")) std.os.linux.dl_phdr_info else null;
		pub const CPU_SETSIZE = if (@hasDecl(substitutes, "CPU_SETSIZE")) substitutes.CPU_SETSIZE else if (@hasDecl(std.os.linux, "CPU_SETSIZE")) std.os.linux.CPU_SETSIZE else null;
		pub const cpu_set_t = if (@hasDecl(substitutes, "cpu_set_t")) substitutes.cpu_set_t else if (@hasDecl(std.os.linux, "cpu_set_t")) std.os.linux.cpu_set_t else null;
		pub const cpu_count_t = if (@hasDecl(substitutes, "cpu_count_t")) substitutes.cpu_count_t else if (@hasDecl(std.os.linux, "cpu_count_t")) std.os.linux.cpu_count_t else null;
		pub const CPU_COUNT = if (@hasDecl(substitutes, "CPU_COUNT")) substitutes.CPU_COUNT else if (@hasDecl(std.os.linux, "CPU_COUNT")) std.os.linux.CPU_COUNT else null;
		pub const MINSIGSTKSZ = if (@hasDecl(substitutes, "MINSIGSTKSZ")) substitutes.MINSIGSTKSZ else if (@hasDecl(std.os.linux, "MINSIGSTKSZ")) std.os.linux.MINSIGSTKSZ else null;
		pub const SIGSTKSZ = if (@hasDecl(substitutes, "SIGSTKSZ")) substitutes.SIGSTKSZ else if (@hasDecl(std.os.linux, "SIGSTKSZ")) std.os.linux.SIGSTKSZ else null;
		pub const SS_ONSTACK = if (@hasDecl(substitutes, "SS_ONSTACK")) substitutes.SS_ONSTACK else if (@hasDecl(std.os.linux, "SS_ONSTACK")) std.os.linux.SS_ONSTACK else null;
		pub const SS_DISABLE = if (@hasDecl(substitutes, "SS_DISABLE")) substitutes.SS_DISABLE else if (@hasDecl(std.os.linux, "SS_DISABLE")) std.os.linux.SS_DISABLE else null;
		pub const SS_AUTODISARM = if (@hasDecl(substitutes, "SS_AUTODISARM")) substitutes.SS_AUTODISARM else if (@hasDecl(std.os.linux, "SS_AUTODISARM")) std.os.linux.SS_AUTODISARM else null;
		pub const stack_t = if (@hasDecl(substitutes, "stack_t")) substitutes.stack_t else if (@hasDecl(std.os.linux, "stack_t")) std.os.linux.stack_t else null;
		pub const sigval = if (@hasDecl(substitutes, "sigval")) substitutes.sigval else if (@hasDecl(std.os.linux, "sigval")) std.os.linux.sigval else null;
		pub const siginfo_t = if (@hasDecl(substitutes, "siginfo_t")) substitutes.siginfo_t else if (@hasDecl(std.os.linux, "siginfo_t")) std.os.linux.siginfo_t else null;
		pub const io_uring_params = if (@hasDecl(substitutes, "io_uring_params")) substitutes.io_uring_params else if (@hasDecl(std.os.linux, "io_uring_params")) std.os.linux.io_uring_params else null;
		pub const IORING_FEAT_SINGLE_MMAP = if (@hasDecl(substitutes, "IORING_FEAT_SINGLE_MMAP")) substitutes.IORING_FEAT_SINGLE_MMAP else if (@hasDecl(std.os.linux, "IORING_FEAT_SINGLE_MMAP")) std.os.linux.IORING_FEAT_SINGLE_MMAP else null;
		pub const IORING_FEAT_NODROP = if (@hasDecl(substitutes, "IORING_FEAT_NODROP")) substitutes.IORING_FEAT_NODROP else if (@hasDecl(std.os.linux, "IORING_FEAT_NODROP")) std.os.linux.IORING_FEAT_NODROP else null;
		pub const IORING_FEAT_SUBMIT_STABLE = if (@hasDecl(substitutes, "IORING_FEAT_SUBMIT_STABLE")) substitutes.IORING_FEAT_SUBMIT_STABLE else if (@hasDecl(std.os.linux, "IORING_FEAT_SUBMIT_STABLE")) std.os.linux.IORING_FEAT_SUBMIT_STABLE else null;
		pub const IORING_FEAT_RW_CUR_POS = if (@hasDecl(substitutes, "IORING_FEAT_RW_CUR_POS")) substitutes.IORING_FEAT_RW_CUR_POS else if (@hasDecl(std.os.linux, "IORING_FEAT_RW_CUR_POS")) std.os.linux.IORING_FEAT_RW_CUR_POS else null;
		pub const IORING_FEAT_CUR_PERSONALITY = if (@hasDecl(substitutes, "IORING_FEAT_CUR_PERSONALITY")) substitutes.IORING_FEAT_CUR_PERSONALITY else if (@hasDecl(std.os.linux, "IORING_FEAT_CUR_PERSONALITY")) std.os.linux.IORING_FEAT_CUR_PERSONALITY else null;
		pub const IORING_FEAT_FAST_POLL = if (@hasDecl(substitutes, "IORING_FEAT_FAST_POLL")) substitutes.IORING_FEAT_FAST_POLL else if (@hasDecl(std.os.linux, "IORING_FEAT_FAST_POLL")) std.os.linux.IORING_FEAT_FAST_POLL else null;
		pub const IORING_FEAT_POLL_32BITS = if (@hasDecl(substitutes, "IORING_FEAT_POLL_32BITS")) substitutes.IORING_FEAT_POLL_32BITS else if (@hasDecl(std.os.linux, "IORING_FEAT_POLL_32BITS")) std.os.linux.IORING_FEAT_POLL_32BITS else null;
		pub const IORING_FEAT_SQPOLL_NONFIXED = if (@hasDecl(substitutes, "IORING_FEAT_SQPOLL_NONFIXED")) substitutes.IORING_FEAT_SQPOLL_NONFIXED else if (@hasDecl(std.os.linux, "IORING_FEAT_SQPOLL_NONFIXED")) std.os.linux.IORING_FEAT_SQPOLL_NONFIXED else null;
		pub const IORING_FEAT_EXT_ARG = if (@hasDecl(substitutes, "IORING_FEAT_EXT_ARG")) substitutes.IORING_FEAT_EXT_ARG else if (@hasDecl(std.os.linux, "IORING_FEAT_EXT_ARG")) std.os.linux.IORING_FEAT_EXT_ARG else null;
		pub const IORING_FEAT_NATIVE_WORKERS = if (@hasDecl(substitutes, "IORING_FEAT_NATIVE_WORKERS")) substitutes.IORING_FEAT_NATIVE_WORKERS else if (@hasDecl(std.os.linux, "IORING_FEAT_NATIVE_WORKERS")) std.os.linux.IORING_FEAT_NATIVE_WORKERS else null;
		pub const IORING_FEAT_RSRC_TAGS = if (@hasDecl(substitutes, "IORING_FEAT_RSRC_TAGS")) substitutes.IORING_FEAT_RSRC_TAGS else if (@hasDecl(std.os.linux, "IORING_FEAT_RSRC_TAGS")) std.os.linux.IORING_FEAT_RSRC_TAGS else null;
		pub const IORING_FEAT_CQE_SKIP = if (@hasDecl(substitutes, "IORING_FEAT_CQE_SKIP")) substitutes.IORING_FEAT_CQE_SKIP else if (@hasDecl(std.os.linux, "IORING_FEAT_CQE_SKIP")) std.os.linux.IORING_FEAT_CQE_SKIP else null;
		pub const IORING_FEAT_LINKED_FILE = if (@hasDecl(substitutes, "IORING_FEAT_LINKED_FILE")) substitutes.IORING_FEAT_LINKED_FILE else if (@hasDecl(std.os.linux, "IORING_FEAT_LINKED_FILE")) std.os.linux.IORING_FEAT_LINKED_FILE else null;
		pub const IORING_SETUP_IOPOLL = if (@hasDecl(substitutes, "IORING_SETUP_IOPOLL")) substitutes.IORING_SETUP_IOPOLL else if (@hasDecl(std.os.linux, "IORING_SETUP_IOPOLL")) std.os.linux.IORING_SETUP_IOPOLL else null;
		pub const IORING_SETUP_SQPOLL = if (@hasDecl(substitutes, "IORING_SETUP_SQPOLL")) substitutes.IORING_SETUP_SQPOLL else if (@hasDecl(std.os.linux, "IORING_SETUP_SQPOLL")) std.os.linux.IORING_SETUP_SQPOLL else null;
		pub const IORING_SETUP_SQ_AFF = if (@hasDecl(substitutes, "IORING_SETUP_SQ_AFF")) substitutes.IORING_SETUP_SQ_AFF else if (@hasDecl(std.os.linux, "IORING_SETUP_SQ_AFF")) std.os.linux.IORING_SETUP_SQ_AFF else null;
		pub const IORING_SETUP_CQSIZE = if (@hasDecl(substitutes, "IORING_SETUP_CQSIZE")) substitutes.IORING_SETUP_CQSIZE else if (@hasDecl(std.os.linux, "IORING_SETUP_CQSIZE")) std.os.linux.IORING_SETUP_CQSIZE else null;
		pub const IORING_SETUP_CLAMP = if (@hasDecl(substitutes, "IORING_SETUP_CLAMP")) substitutes.IORING_SETUP_CLAMP else if (@hasDecl(std.os.linux, "IORING_SETUP_CLAMP")) std.os.linux.IORING_SETUP_CLAMP else null;
		pub const IORING_SETUP_ATTACH_WQ = if (@hasDecl(substitutes, "IORING_SETUP_ATTACH_WQ")) substitutes.IORING_SETUP_ATTACH_WQ else if (@hasDecl(std.os.linux, "IORING_SETUP_ATTACH_WQ")) std.os.linux.IORING_SETUP_ATTACH_WQ else null;
		pub const IORING_SETUP_R_DISABLED = if (@hasDecl(substitutes, "IORING_SETUP_R_DISABLED")) substitutes.IORING_SETUP_R_DISABLED else if (@hasDecl(std.os.linux, "IORING_SETUP_R_DISABLED")) std.os.linux.IORING_SETUP_R_DISABLED else null;
		pub const IORING_SETUP_SUBMIT_ALL = if (@hasDecl(substitutes, "IORING_SETUP_SUBMIT_ALL")) substitutes.IORING_SETUP_SUBMIT_ALL else if (@hasDecl(std.os.linux, "IORING_SETUP_SUBMIT_ALL")) std.os.linux.IORING_SETUP_SUBMIT_ALL else null;
		pub const IORING_SETUP_COOP_TASKRUN = if (@hasDecl(substitutes, "IORING_SETUP_COOP_TASKRUN")) substitutes.IORING_SETUP_COOP_TASKRUN else if (@hasDecl(std.os.linux, "IORING_SETUP_COOP_TASKRUN")) std.os.linux.IORING_SETUP_COOP_TASKRUN else null;
		pub const IORING_SETUP_TASKRUN_FLAG = if (@hasDecl(substitutes, "IORING_SETUP_TASKRUN_FLAG")) substitutes.IORING_SETUP_TASKRUN_FLAG else if (@hasDecl(std.os.linux, "IORING_SETUP_TASKRUN_FLAG")) std.os.linux.IORING_SETUP_TASKRUN_FLAG else null;
		pub const IORING_SETUP_SQE128 = if (@hasDecl(substitutes, "IORING_SETUP_SQE128")) substitutes.IORING_SETUP_SQE128 else if (@hasDecl(std.os.linux, "IORING_SETUP_SQE128")) std.os.linux.IORING_SETUP_SQE128 else null;
		pub const IORING_SETUP_CQE32 = if (@hasDecl(substitutes, "IORING_SETUP_CQE32")) substitutes.IORING_SETUP_CQE32 else if (@hasDecl(std.os.linux, "IORING_SETUP_CQE32")) std.os.linux.IORING_SETUP_CQE32 else null;
		pub const io_sqring_offsets = if (@hasDecl(substitutes, "io_sqring_offsets")) substitutes.io_sqring_offsets else if (@hasDecl(std.os.linux, "io_sqring_offsets")) std.os.linux.io_sqring_offsets else null;
		pub const IORING_SQ_NEED_WAKEUP = if (@hasDecl(substitutes, "IORING_SQ_NEED_WAKEUP")) substitutes.IORING_SQ_NEED_WAKEUP else if (@hasDecl(std.os.linux, "IORING_SQ_NEED_WAKEUP")) std.os.linux.IORING_SQ_NEED_WAKEUP else null;
		pub const IORING_SQ_CQ_OVERFLOW = if (@hasDecl(substitutes, "IORING_SQ_CQ_OVERFLOW")) substitutes.IORING_SQ_CQ_OVERFLOW else if (@hasDecl(std.os.linux, "IORING_SQ_CQ_OVERFLOW")) std.os.linux.IORING_SQ_CQ_OVERFLOW else null;
		pub const IORING_SQ_TASKRUN = if (@hasDecl(substitutes, "IORING_SQ_TASKRUN")) substitutes.IORING_SQ_TASKRUN else if (@hasDecl(std.os.linux, "IORING_SQ_TASKRUN")) std.os.linux.IORING_SQ_TASKRUN else null;
		pub const io_cqring_offsets = if (@hasDecl(substitutes, "io_cqring_offsets")) substitutes.io_cqring_offsets else if (@hasDecl(std.os.linux, "io_cqring_offsets")) std.os.linux.io_cqring_offsets else null;
		pub const io_uring_sqe = if (@hasDecl(substitutes, "io_uring_sqe")) substitutes.io_uring_sqe else if (@hasDecl(std.os.linux, "io_uring_sqe")) std.os.linux.io_uring_sqe else null;
		pub const IOSQE_BIT = if (@hasDecl(substitutes, "IOSQE_BIT")) substitutes.IOSQE_BIT else if (@hasDecl(std.os.linux, "IOSQE_BIT")) std.os.linux.IOSQE_BIT else null;
		pub const IOSQE_FIXED_FILE = if (@hasDecl(substitutes, "IOSQE_FIXED_FILE")) substitutes.IOSQE_FIXED_FILE else if (@hasDecl(std.os.linux, "IOSQE_FIXED_FILE")) std.os.linux.IOSQE_FIXED_FILE else null;
		pub const IOSQE_IO_DRAIN = if (@hasDecl(substitutes, "IOSQE_IO_DRAIN")) substitutes.IOSQE_IO_DRAIN else if (@hasDecl(std.os.linux, "IOSQE_IO_DRAIN")) std.os.linux.IOSQE_IO_DRAIN else null;
		pub const IOSQE_IO_LINK = if (@hasDecl(substitutes, "IOSQE_IO_LINK")) substitutes.IOSQE_IO_LINK else if (@hasDecl(std.os.linux, "IOSQE_IO_LINK")) std.os.linux.IOSQE_IO_LINK else null;
		pub const IOSQE_IO_HARDLINK = if (@hasDecl(substitutes, "IOSQE_IO_HARDLINK")) substitutes.IOSQE_IO_HARDLINK else if (@hasDecl(std.os.linux, "IOSQE_IO_HARDLINK")) std.os.linux.IOSQE_IO_HARDLINK else null;
		pub const IOSQE_ASYNC = if (@hasDecl(substitutes, "IOSQE_ASYNC")) substitutes.IOSQE_ASYNC else if (@hasDecl(std.os.linux, "IOSQE_ASYNC")) std.os.linux.IOSQE_ASYNC else null;
		pub const IOSQE_BUFFER_SELECT = if (@hasDecl(substitutes, "IOSQE_BUFFER_SELECT")) substitutes.IOSQE_BUFFER_SELECT else if (@hasDecl(std.os.linux, "IOSQE_BUFFER_SELECT")) std.os.linux.IOSQE_BUFFER_SELECT else null;
		pub const IOSQE_CQE_SKIP_SUCCESS = if (@hasDecl(substitutes, "IOSQE_CQE_SKIP_SUCCESS")) substitutes.IOSQE_CQE_SKIP_SUCCESS else if (@hasDecl(std.os.linux, "IOSQE_CQE_SKIP_SUCCESS")) std.os.linux.IOSQE_CQE_SKIP_SUCCESS else null;
		pub const IORING_OP = if (@hasDecl(substitutes, "IORING_OP")) substitutes.IORING_OP else if (@hasDecl(std.os.linux, "IORING_OP")) std.os.linux.IORING_OP else null;
		pub const IORING_FSYNC_DATASYNC = if (@hasDecl(substitutes, "IORING_FSYNC_DATASYNC")) substitutes.IORING_FSYNC_DATASYNC else if (@hasDecl(std.os.linux, "IORING_FSYNC_DATASYNC")) std.os.linux.IORING_FSYNC_DATASYNC else null;
		pub const IORING_TIMEOUT_ABS = if (@hasDecl(substitutes, "IORING_TIMEOUT_ABS")) substitutes.IORING_TIMEOUT_ABS else if (@hasDecl(std.os.linux, "IORING_TIMEOUT_ABS")) std.os.linux.IORING_TIMEOUT_ABS else null;
		pub const IORING_TIMEOUT_UPDATE = if (@hasDecl(substitutes, "IORING_TIMEOUT_UPDATE")) substitutes.IORING_TIMEOUT_UPDATE else if (@hasDecl(std.os.linux, "IORING_TIMEOUT_UPDATE")) std.os.linux.IORING_TIMEOUT_UPDATE else null;
		pub const IORING_TIMEOUT_BOOTTIME = if (@hasDecl(substitutes, "IORING_TIMEOUT_BOOTTIME")) substitutes.IORING_TIMEOUT_BOOTTIME else if (@hasDecl(std.os.linux, "IORING_TIMEOUT_BOOTTIME")) std.os.linux.IORING_TIMEOUT_BOOTTIME else null;
		pub const IORING_TIMEOUT_REALTIME = if (@hasDecl(substitutes, "IORING_TIMEOUT_REALTIME")) substitutes.IORING_TIMEOUT_REALTIME else if (@hasDecl(std.os.linux, "IORING_TIMEOUT_REALTIME")) std.os.linux.IORING_TIMEOUT_REALTIME else null;
		pub const IORING_LINK_TIMEOUT_UPDATE = if (@hasDecl(substitutes, "IORING_LINK_TIMEOUT_UPDATE")) substitutes.IORING_LINK_TIMEOUT_UPDATE else if (@hasDecl(std.os.linux, "IORING_LINK_TIMEOUT_UPDATE")) std.os.linux.IORING_LINK_TIMEOUT_UPDATE else null;
		pub const IORING_TIMEOUT_ETIME_SUCCESS = if (@hasDecl(substitutes, "IORING_TIMEOUT_ETIME_SUCCESS")) substitutes.IORING_TIMEOUT_ETIME_SUCCESS else if (@hasDecl(std.os.linux, "IORING_TIMEOUT_ETIME_SUCCESS")) std.os.linux.IORING_TIMEOUT_ETIME_SUCCESS else null;
		pub const IORING_TIMEOUT_CLOCK_MASK = if (@hasDecl(substitutes, "IORING_TIMEOUT_CLOCK_MASK")) substitutes.IORING_TIMEOUT_CLOCK_MASK else if (@hasDecl(std.os.linux, "IORING_TIMEOUT_CLOCK_MASK")) std.os.linux.IORING_TIMEOUT_CLOCK_MASK else null;
		pub const IORING_TIMEOUT_UPDATE_MASK = if (@hasDecl(substitutes, "IORING_TIMEOUT_UPDATE_MASK")) substitutes.IORING_TIMEOUT_UPDATE_MASK else if (@hasDecl(std.os.linux, "IORING_TIMEOUT_UPDATE_MASK")) std.os.linux.IORING_TIMEOUT_UPDATE_MASK else null;
		pub const IORING_SPLICE_F_FD_IN_FIXED = if (@hasDecl(substitutes, "IORING_SPLICE_F_FD_IN_FIXED")) substitutes.IORING_SPLICE_F_FD_IN_FIXED else if (@hasDecl(std.os.linux, "IORING_SPLICE_F_FD_IN_FIXED")) std.os.linux.IORING_SPLICE_F_FD_IN_FIXED else null;
		pub const IORING_POLL_ADD_MULTI = if (@hasDecl(substitutes, "IORING_POLL_ADD_MULTI")) substitutes.IORING_POLL_ADD_MULTI else if (@hasDecl(std.os.linux, "IORING_POLL_ADD_MULTI")) std.os.linux.IORING_POLL_ADD_MULTI else null;
		pub const IORING_POLL_UPDATE_EVENTS = if (@hasDecl(substitutes, "IORING_POLL_UPDATE_EVENTS")) substitutes.IORING_POLL_UPDATE_EVENTS else if (@hasDecl(std.os.linux, "IORING_POLL_UPDATE_EVENTS")) std.os.linux.IORING_POLL_UPDATE_EVENTS else null;
		pub const IORING_POLL_UPDATE_USER_DATA = if (@hasDecl(substitutes, "IORING_POLL_UPDATE_USER_DATA")) substitutes.IORING_POLL_UPDATE_USER_DATA else if (@hasDecl(std.os.linux, "IORING_POLL_UPDATE_USER_DATA")) std.os.linux.IORING_POLL_UPDATE_USER_DATA else null;
		pub const IORING_ASYNC_CANCEL_ALL = if (@hasDecl(substitutes, "IORING_ASYNC_CANCEL_ALL")) substitutes.IORING_ASYNC_CANCEL_ALL else if (@hasDecl(std.os.linux, "IORING_ASYNC_CANCEL_ALL")) std.os.linux.IORING_ASYNC_CANCEL_ALL else null;
		pub const IORING_ASYNC_CANCEL_FD = if (@hasDecl(substitutes, "IORING_ASYNC_CANCEL_FD")) substitutes.IORING_ASYNC_CANCEL_FD else if (@hasDecl(std.os.linux, "IORING_ASYNC_CANCEL_FD")) std.os.linux.IORING_ASYNC_CANCEL_FD else null;
		pub const IORING_ASYNC_CANCEL_ANY = if (@hasDecl(substitutes, "IORING_ASYNC_CANCEL_ANY")) substitutes.IORING_ASYNC_CANCEL_ANY else if (@hasDecl(std.os.linux, "IORING_ASYNC_CANCEL_ANY")) std.os.linux.IORING_ASYNC_CANCEL_ANY else null;
		pub const IORING_RECVSEND_POLL_FIRST = if (@hasDecl(substitutes, "IORING_RECVSEND_POLL_FIRST")) substitutes.IORING_RECVSEND_POLL_FIRST else if (@hasDecl(std.os.linux, "IORING_RECVSEND_POLL_FIRST")) std.os.linux.IORING_RECVSEND_POLL_FIRST else null;
		pub const IORING_RECV_MULTISHOT = if (@hasDecl(substitutes, "IORING_RECV_MULTISHOT")) substitutes.IORING_RECV_MULTISHOT else if (@hasDecl(std.os.linux, "IORING_RECV_MULTISHOT")) std.os.linux.IORING_RECV_MULTISHOT else null;
		pub const IORING_ACCEPT_MULTISHOT = if (@hasDecl(substitutes, "IORING_ACCEPT_MULTISHOT")) substitutes.IORING_ACCEPT_MULTISHOT else if (@hasDecl(std.os.linux, "IORING_ACCEPT_MULTISHOT")) std.os.linux.IORING_ACCEPT_MULTISHOT else null;
		pub const io_uring_cqe = if (@hasDecl(substitutes, "io_uring_cqe")) substitutes.io_uring_cqe else if (@hasDecl(std.os.linux, "io_uring_cqe")) std.os.linux.io_uring_cqe else null;
		pub const IORING_CQE_F_BUFFER = if (@hasDecl(substitutes, "IORING_CQE_F_BUFFER")) substitutes.IORING_CQE_F_BUFFER else if (@hasDecl(std.os.linux, "IORING_CQE_F_BUFFER")) std.os.linux.IORING_CQE_F_BUFFER else null;
		pub const IORING_CQE_F_MORE = if (@hasDecl(substitutes, "IORING_CQE_F_MORE")) substitutes.IORING_CQE_F_MORE else if (@hasDecl(std.os.linux, "IORING_CQE_F_MORE")) std.os.linux.IORING_CQE_F_MORE else null;
		pub const IORING_CQE_F_SOCK_NONEMPTY = if (@hasDecl(substitutes, "IORING_CQE_F_SOCK_NONEMPTY")) substitutes.IORING_CQE_F_SOCK_NONEMPTY else if (@hasDecl(std.os.linux, "IORING_CQE_F_SOCK_NONEMPTY")) std.os.linux.IORING_CQE_F_SOCK_NONEMPTY else null;
		pub const IORING_CQE_F_NOTIF = if (@hasDecl(substitutes, "IORING_CQE_F_NOTIF")) substitutes.IORING_CQE_F_NOTIF else if (@hasDecl(std.os.linux, "IORING_CQE_F_NOTIF")) std.os.linux.IORING_CQE_F_NOTIF else null;
		pub const IORING_OFF_SQ_RING = if (@hasDecl(substitutes, "IORING_OFF_SQ_RING")) substitutes.IORING_OFF_SQ_RING else if (@hasDecl(std.os.linux, "IORING_OFF_SQ_RING")) std.os.linux.IORING_OFF_SQ_RING else null;
		pub const IORING_OFF_CQ_RING = if (@hasDecl(substitutes, "IORING_OFF_CQ_RING")) substitutes.IORING_OFF_CQ_RING else if (@hasDecl(std.os.linux, "IORING_OFF_CQ_RING")) std.os.linux.IORING_OFF_CQ_RING else null;
		pub const IORING_OFF_SQES = if (@hasDecl(substitutes, "IORING_OFF_SQES")) substitutes.IORING_OFF_SQES else if (@hasDecl(std.os.linux, "IORING_OFF_SQES")) std.os.linux.IORING_OFF_SQES else null;
		pub const IORING_ENTER_GETEVENTS = if (@hasDecl(substitutes, "IORING_ENTER_GETEVENTS")) substitutes.IORING_ENTER_GETEVENTS else if (@hasDecl(std.os.linux, "IORING_ENTER_GETEVENTS")) std.os.linux.IORING_ENTER_GETEVENTS else null;
		pub const IORING_ENTER_SQ_WAKEUP = if (@hasDecl(substitutes, "IORING_ENTER_SQ_WAKEUP")) substitutes.IORING_ENTER_SQ_WAKEUP else if (@hasDecl(std.os.linux, "IORING_ENTER_SQ_WAKEUP")) std.os.linux.IORING_ENTER_SQ_WAKEUP else null;
		pub const IORING_ENTER_SQ_WAIT = if (@hasDecl(substitutes, "IORING_ENTER_SQ_WAIT")) substitutes.IORING_ENTER_SQ_WAIT else if (@hasDecl(std.os.linux, "IORING_ENTER_SQ_WAIT")) std.os.linux.IORING_ENTER_SQ_WAIT else null;
		pub const IORING_ENTER_EXT_ARG = if (@hasDecl(substitutes, "IORING_ENTER_EXT_ARG")) substitutes.IORING_ENTER_EXT_ARG else if (@hasDecl(std.os.linux, "IORING_ENTER_EXT_ARG")) std.os.linux.IORING_ENTER_EXT_ARG else null;
		pub const IORING_ENTER_REGISTERED_RING = if (@hasDecl(substitutes, "IORING_ENTER_REGISTERED_RING")) substitutes.IORING_ENTER_REGISTERED_RING else if (@hasDecl(std.os.linux, "IORING_ENTER_REGISTERED_RING")) std.os.linux.IORING_ENTER_REGISTERED_RING else null;
		pub const IORING_REGISTER = if (@hasDecl(substitutes, "IORING_REGISTER")) substitutes.IORING_REGISTER else if (@hasDecl(std.os.linux, "IORING_REGISTER")) std.os.linux.IORING_REGISTER else null;
		pub const io_uring_files_update = if (@hasDecl(substitutes, "io_uring_files_update")) substitutes.io_uring_files_update else if (@hasDecl(std.os.linux, "io_uring_files_update")) std.os.linux.io_uring_files_update else null;
		pub const IO_URING_OP_SUPPORTED = if (@hasDecl(substitutes, "IO_URING_OP_SUPPORTED")) substitutes.IO_URING_OP_SUPPORTED else if (@hasDecl(std.os.linux, "IO_URING_OP_SUPPORTED")) std.os.linux.IO_URING_OP_SUPPORTED else null;
		pub const io_uring_probe_op = if (@hasDecl(substitutes, "io_uring_probe_op")) substitutes.io_uring_probe_op else if (@hasDecl(std.os.linux, "io_uring_probe_op")) std.os.linux.io_uring_probe_op else null;
		pub const io_uring_probe = if (@hasDecl(substitutes, "io_uring_probe")) substitutes.io_uring_probe else if (@hasDecl(std.os.linux, "io_uring_probe")) std.os.linux.io_uring_probe else null;
		pub const io_uring_restriction = if (@hasDecl(substitutes, "io_uring_restriction")) substitutes.io_uring_restriction else if (@hasDecl(std.os.linux, "io_uring_restriction")) std.os.linux.io_uring_restriction else null;
		pub const IORING_RESTRICTION = if (@hasDecl(substitutes, "IORING_RESTRICTION")) substitutes.IORING_RESTRICTION else if (@hasDecl(std.os.linux, "IORING_RESTRICTION")) std.os.linux.IORING_RESTRICTION else null;
		pub const utsname = if (@hasDecl(substitutes, "utsname")) substitutes.utsname else if (@hasDecl(std.os.linux, "utsname")) std.os.linux.utsname else null;
		pub const HOST_NAME_MAX = if (@hasDecl(substitutes, "HOST_NAME_MAX")) substitutes.HOST_NAME_MAX else if (@hasDecl(std.os.linux, "HOST_NAME_MAX")) std.os.linux.HOST_NAME_MAX else null;
		pub const STATX_TYPE = if (@hasDecl(substitutes, "STATX_TYPE")) substitutes.STATX_TYPE else if (@hasDecl(std.os.linux, "STATX_TYPE")) std.os.linux.STATX_TYPE else null;
		pub const STATX_MODE = if (@hasDecl(substitutes, "STATX_MODE")) substitutes.STATX_MODE else if (@hasDecl(std.os.linux, "STATX_MODE")) std.os.linux.STATX_MODE else null;
		pub const STATX_NLINK = if (@hasDecl(substitutes, "STATX_NLINK")) substitutes.STATX_NLINK else if (@hasDecl(std.os.linux, "STATX_NLINK")) std.os.linux.STATX_NLINK else null;
		pub const STATX_UID = if (@hasDecl(substitutes, "STATX_UID")) substitutes.STATX_UID else if (@hasDecl(std.os.linux, "STATX_UID")) std.os.linux.STATX_UID else null;
		pub const STATX_GID = if (@hasDecl(substitutes, "STATX_GID")) substitutes.STATX_GID else if (@hasDecl(std.os.linux, "STATX_GID")) std.os.linux.STATX_GID else null;
		pub const STATX_ATIME = if (@hasDecl(substitutes, "STATX_ATIME")) substitutes.STATX_ATIME else if (@hasDecl(std.os.linux, "STATX_ATIME")) std.os.linux.STATX_ATIME else null;
		pub const STATX_MTIME = if (@hasDecl(substitutes, "STATX_MTIME")) substitutes.STATX_MTIME else if (@hasDecl(std.os.linux, "STATX_MTIME")) std.os.linux.STATX_MTIME else null;
		pub const STATX_CTIME = if (@hasDecl(substitutes, "STATX_CTIME")) substitutes.STATX_CTIME else if (@hasDecl(std.os.linux, "STATX_CTIME")) std.os.linux.STATX_CTIME else null;
		pub const STATX_INO = if (@hasDecl(substitutes, "STATX_INO")) substitutes.STATX_INO else if (@hasDecl(std.os.linux, "STATX_INO")) std.os.linux.STATX_INO else null;
		pub const STATX_SIZE = if (@hasDecl(substitutes, "STATX_SIZE")) substitutes.STATX_SIZE else if (@hasDecl(std.os.linux, "STATX_SIZE")) std.os.linux.STATX_SIZE else null;
		pub const STATX_BLOCKS = if (@hasDecl(substitutes, "STATX_BLOCKS")) substitutes.STATX_BLOCKS else if (@hasDecl(std.os.linux, "STATX_BLOCKS")) std.os.linux.STATX_BLOCKS else null;
		pub const STATX_BASIC_STATS = if (@hasDecl(substitutes, "STATX_BASIC_STATS")) substitutes.STATX_BASIC_STATS else if (@hasDecl(std.os.linux, "STATX_BASIC_STATS")) std.os.linux.STATX_BASIC_STATS else null;
		pub const STATX_BTIME = if (@hasDecl(substitutes, "STATX_BTIME")) substitutes.STATX_BTIME else if (@hasDecl(std.os.linux, "STATX_BTIME")) std.os.linux.STATX_BTIME else null;
		pub const STATX_ATTR_COMPRESSED = if (@hasDecl(substitutes, "STATX_ATTR_COMPRESSED")) substitutes.STATX_ATTR_COMPRESSED else if (@hasDecl(std.os.linux, "STATX_ATTR_COMPRESSED")) std.os.linux.STATX_ATTR_COMPRESSED else null;
		pub const STATX_ATTR_IMMUTABLE = if (@hasDecl(substitutes, "STATX_ATTR_IMMUTABLE")) substitutes.STATX_ATTR_IMMUTABLE else if (@hasDecl(std.os.linux, "STATX_ATTR_IMMUTABLE")) std.os.linux.STATX_ATTR_IMMUTABLE else null;
		pub const STATX_ATTR_APPEND = if (@hasDecl(substitutes, "STATX_ATTR_APPEND")) substitutes.STATX_ATTR_APPEND else if (@hasDecl(std.os.linux, "STATX_ATTR_APPEND")) std.os.linux.STATX_ATTR_APPEND else null;
		pub const STATX_ATTR_NODUMP = if (@hasDecl(substitutes, "STATX_ATTR_NODUMP")) substitutes.STATX_ATTR_NODUMP else if (@hasDecl(std.os.linux, "STATX_ATTR_NODUMP")) std.os.linux.STATX_ATTR_NODUMP else null;
		pub const STATX_ATTR_ENCRYPTED = if (@hasDecl(substitutes, "STATX_ATTR_ENCRYPTED")) substitutes.STATX_ATTR_ENCRYPTED else if (@hasDecl(std.os.linux, "STATX_ATTR_ENCRYPTED")) std.os.linux.STATX_ATTR_ENCRYPTED else null;
		pub const STATX_ATTR_AUTOMOUNT = if (@hasDecl(substitutes, "STATX_ATTR_AUTOMOUNT")) substitutes.STATX_ATTR_AUTOMOUNT else if (@hasDecl(std.os.linux, "STATX_ATTR_AUTOMOUNT")) std.os.linux.STATX_ATTR_AUTOMOUNT else null;
		pub const statx_timestamp = if (@hasDecl(substitutes, "statx_timestamp")) substitutes.statx_timestamp else if (@hasDecl(std.os.linux, "statx_timestamp")) std.os.linux.statx_timestamp else null;
		pub const Statx = if (@hasDecl(substitutes, "Statx")) substitutes.Statx else if (@hasDecl(std.os.linux, "Statx")) std.os.linux.Statx else null;
		pub const addrinfo = if (@hasDecl(substitutes, "addrinfo")) substitutes.addrinfo else if (@hasDecl(std.os.linux, "addrinfo")) std.os.linux.addrinfo else null;
		pub const IPPORT_RESERVED = if (@hasDecl(substitutes, "IPPORT_RESERVED")) substitutes.IPPORT_RESERVED else if (@hasDecl(std.os.linux, "IPPORT_RESERVED")) std.os.linux.IPPORT_RESERVED else null;
		pub const IPPROTO = if (@hasDecl(substitutes, "IPPROTO")) substitutes.IPPROTO else if (@hasDecl(std.os.linux, "IPPROTO")) std.os.linux.IPPROTO else null;
		pub const RR = if (@hasDecl(substitutes, "RR")) substitutes.RR else if (@hasDecl(std.os.linux, "RR")) std.os.linux.RR else null;
		pub const tcp_repair_opt = if (@hasDecl(substitutes, "tcp_repair_opt")) substitutes.tcp_repair_opt else if (@hasDecl(std.os.linux, "tcp_repair_opt")) std.os.linux.tcp_repair_opt else null;
		pub const tcp_repair_window = if (@hasDecl(substitutes, "tcp_repair_window")) substitutes.tcp_repair_window else if (@hasDecl(std.os.linux, "tcp_repair_window")) std.os.linux.tcp_repair_window else null;
		pub const TcpRepairOption = if (@hasDecl(substitutes, "TcpRepairOption")) substitutes.TcpRepairOption else if (@hasDecl(std.os.linux, "TcpRepairOption")) std.os.linux.TcpRepairOption else null;
		pub const tcp_fastopen_client_fail = if (@hasDecl(substitutes, "tcp_fastopen_client_fail")) substitutes.tcp_fastopen_client_fail else if (@hasDecl(std.os.linux, "tcp_fastopen_client_fail")) std.os.linux.tcp_fastopen_client_fail else null;
		pub const TCPI_OPT_TIMESTAMPS = if (@hasDecl(substitutes, "TCPI_OPT_TIMESTAMPS")) substitutes.TCPI_OPT_TIMESTAMPS else if (@hasDecl(std.os.linux, "TCPI_OPT_TIMESTAMPS")) std.os.linux.TCPI_OPT_TIMESTAMPS else null;
		pub const TCPI_OPT_SACK = if (@hasDecl(substitutes, "TCPI_OPT_SACK")) substitutes.TCPI_OPT_SACK else if (@hasDecl(std.os.linux, "TCPI_OPT_SACK")) std.os.linux.TCPI_OPT_SACK else null;
		pub const TCPI_OPT_WSCALE = if (@hasDecl(substitutes, "TCPI_OPT_WSCALE")) substitutes.TCPI_OPT_WSCALE else if (@hasDecl(std.os.linux, "TCPI_OPT_WSCALE")) std.os.linux.TCPI_OPT_WSCALE else null;
		pub const TCPI_OPT_ECN = if (@hasDecl(substitutes, "TCPI_OPT_ECN")) substitutes.TCPI_OPT_ECN else if (@hasDecl(std.os.linux, "TCPI_OPT_ECN")) std.os.linux.TCPI_OPT_ECN else null;
		pub const TCPI_OPT_ECN_SEEN = if (@hasDecl(substitutes, "TCPI_OPT_ECN_SEEN")) substitutes.TCPI_OPT_ECN_SEEN else if (@hasDecl(std.os.linux, "TCPI_OPT_ECN_SEEN")) std.os.linux.TCPI_OPT_ECN_SEEN else null;
		pub const TCPI_OPT_SYN_DATA = if (@hasDecl(substitutes, "TCPI_OPT_SYN_DATA")) substitutes.TCPI_OPT_SYN_DATA else if (@hasDecl(std.os.linux, "TCPI_OPT_SYN_DATA")) std.os.linux.TCPI_OPT_SYN_DATA else null;
		pub const nfds_t = if (@hasDecl(substitutes, "nfds_t")) substitutes.nfds_t else if (@hasDecl(std.os.linux, "nfds_t")) std.os.linux.nfds_t else null;
		pub const pollfd = if (@hasDecl(substitutes, "pollfd")) substitutes.pollfd else if (@hasDecl(std.os.linux, "pollfd")) std.os.linux.pollfd else null;
		pub const POLL = if (@hasDecl(substitutes, "POLL")) substitutes.POLL else if (@hasDecl(std.os.linux, "POLL")) std.os.linux.POLL else null;
		pub const HUGETLB_FLAG_ENCODE_SHIFT = if (@hasDecl(substitutes, "HUGETLB_FLAG_ENCODE_SHIFT")) substitutes.HUGETLB_FLAG_ENCODE_SHIFT else if (@hasDecl(std.os.linux, "HUGETLB_FLAG_ENCODE_SHIFT")) std.os.linux.HUGETLB_FLAG_ENCODE_SHIFT else null;
		pub const HUGETLB_FLAG_ENCODE_MASK = if (@hasDecl(substitutes, "HUGETLB_FLAG_ENCODE_MASK")) substitutes.HUGETLB_FLAG_ENCODE_MASK else if (@hasDecl(std.os.linux, "HUGETLB_FLAG_ENCODE_MASK")) std.os.linux.HUGETLB_FLAG_ENCODE_MASK else null;
		pub const HUGETLB_FLAG_ENCODE_64KB = if (@hasDecl(substitutes, "HUGETLB_FLAG_ENCODE_64KB")) substitutes.HUGETLB_FLAG_ENCODE_64KB else if (@hasDecl(std.os.linux, "HUGETLB_FLAG_ENCODE_64KB")) std.os.linux.HUGETLB_FLAG_ENCODE_64KB else null;
		pub const HUGETLB_FLAG_ENCODE_512KB = if (@hasDecl(substitutes, "HUGETLB_FLAG_ENCODE_512KB")) substitutes.HUGETLB_FLAG_ENCODE_512KB else if (@hasDecl(std.os.linux, "HUGETLB_FLAG_ENCODE_512KB")) std.os.linux.HUGETLB_FLAG_ENCODE_512KB else null;
		pub const HUGETLB_FLAG_ENCODE_1MB = if (@hasDecl(substitutes, "HUGETLB_FLAG_ENCODE_1MB")) substitutes.HUGETLB_FLAG_ENCODE_1MB else if (@hasDecl(std.os.linux, "HUGETLB_FLAG_ENCODE_1MB")) std.os.linux.HUGETLB_FLAG_ENCODE_1MB else null;
		pub const HUGETLB_FLAG_ENCODE_2MB = if (@hasDecl(substitutes, "HUGETLB_FLAG_ENCODE_2MB")) substitutes.HUGETLB_FLAG_ENCODE_2MB else if (@hasDecl(std.os.linux, "HUGETLB_FLAG_ENCODE_2MB")) std.os.linux.HUGETLB_FLAG_ENCODE_2MB else null;
		pub const HUGETLB_FLAG_ENCODE_8MB = if (@hasDecl(substitutes, "HUGETLB_FLAG_ENCODE_8MB")) substitutes.HUGETLB_FLAG_ENCODE_8MB else if (@hasDecl(std.os.linux, "HUGETLB_FLAG_ENCODE_8MB")) std.os.linux.HUGETLB_FLAG_ENCODE_8MB else null;
		pub const HUGETLB_FLAG_ENCODE_16MB = if (@hasDecl(substitutes, "HUGETLB_FLAG_ENCODE_16MB")) substitutes.HUGETLB_FLAG_ENCODE_16MB else if (@hasDecl(std.os.linux, "HUGETLB_FLAG_ENCODE_16MB")) std.os.linux.HUGETLB_FLAG_ENCODE_16MB else null;
		pub const HUGETLB_FLAG_ENCODE_32MB = if (@hasDecl(substitutes, "HUGETLB_FLAG_ENCODE_32MB")) substitutes.HUGETLB_FLAG_ENCODE_32MB else if (@hasDecl(std.os.linux, "HUGETLB_FLAG_ENCODE_32MB")) std.os.linux.HUGETLB_FLAG_ENCODE_32MB else null;
		pub const HUGETLB_FLAG_ENCODE_256MB = if (@hasDecl(substitutes, "HUGETLB_FLAG_ENCODE_256MB")) substitutes.HUGETLB_FLAG_ENCODE_256MB else if (@hasDecl(std.os.linux, "HUGETLB_FLAG_ENCODE_256MB")) std.os.linux.HUGETLB_FLAG_ENCODE_256MB else null;
		pub const HUGETLB_FLAG_ENCODE_512MB = if (@hasDecl(substitutes, "HUGETLB_FLAG_ENCODE_512MB")) substitutes.HUGETLB_FLAG_ENCODE_512MB else if (@hasDecl(std.os.linux, "HUGETLB_FLAG_ENCODE_512MB")) std.os.linux.HUGETLB_FLAG_ENCODE_512MB else null;
		pub const HUGETLB_FLAG_ENCODE_1GB = if (@hasDecl(substitutes, "HUGETLB_FLAG_ENCODE_1GB")) substitutes.HUGETLB_FLAG_ENCODE_1GB else if (@hasDecl(std.os.linux, "HUGETLB_FLAG_ENCODE_1GB")) std.os.linux.HUGETLB_FLAG_ENCODE_1GB else null;
		pub const HUGETLB_FLAG_ENCODE_2GB = if (@hasDecl(substitutes, "HUGETLB_FLAG_ENCODE_2GB")) substitutes.HUGETLB_FLAG_ENCODE_2GB else if (@hasDecl(std.os.linux, "HUGETLB_FLAG_ENCODE_2GB")) std.os.linux.HUGETLB_FLAG_ENCODE_2GB else null;
		pub const HUGETLB_FLAG_ENCODE_16GB = if (@hasDecl(substitutes, "HUGETLB_FLAG_ENCODE_16GB")) substitutes.HUGETLB_FLAG_ENCODE_16GB else if (@hasDecl(std.os.linux, "HUGETLB_FLAG_ENCODE_16GB")) std.os.linux.HUGETLB_FLAG_ENCODE_16GB else null;
		pub const MFD = if (@hasDecl(substitutes, "MFD")) substitutes.MFD else if (@hasDecl(std.os.linux, "MFD")) std.os.linux.MFD else null;
		pub const rusage = if (@hasDecl(substitutes, "rusage")) substitutes.rusage else if (@hasDecl(std.os.linux, "rusage")) std.os.linux.rusage else null;
		pub const cc_t = if (@hasDecl(substitutes, "cc_t")) substitutes.cc_t else if (@hasDecl(std.os.linux, "cc_t")) std.os.linux.cc_t else null;
		pub const speed_t = if (@hasDecl(substitutes, "speed_t")) substitutes.speed_t else if (@hasDecl(std.os.linux, "speed_t")) std.os.linux.speed_t else null;
		pub const tcflag_t = if (@hasDecl(substitutes, "tcflag_t")) substitutes.tcflag_t else if (@hasDecl(std.os.linux, "tcflag_t")) std.os.linux.tcflag_t else null;
		pub const NCCS = if (@hasDecl(substitutes, "NCCS")) substitutes.NCCS else if (@hasDecl(std.os.linux, "NCCS")) std.os.linux.NCCS else null;
		pub const B0 = if (@hasDecl(substitutes, "B0")) substitutes.B0 else if (@hasDecl(std.os.linux, "B0")) std.os.linux.B0 else null;
		pub const B50 = if (@hasDecl(substitutes, "B50")) substitutes.B50 else if (@hasDecl(std.os.linux, "B50")) std.os.linux.B50 else null;
		pub const B75 = if (@hasDecl(substitutes, "B75")) substitutes.B75 else if (@hasDecl(std.os.linux, "B75")) std.os.linux.B75 else null;
		pub const B110 = if (@hasDecl(substitutes, "B110")) substitutes.B110 else if (@hasDecl(std.os.linux, "B110")) std.os.linux.B110 else null;
		pub const B134 = if (@hasDecl(substitutes, "B134")) substitutes.B134 else if (@hasDecl(std.os.linux, "B134")) std.os.linux.B134 else null;
		pub const B150 = if (@hasDecl(substitutes, "B150")) substitutes.B150 else if (@hasDecl(std.os.linux, "B150")) std.os.linux.B150 else null;
		pub const B200 = if (@hasDecl(substitutes, "B200")) substitutes.B200 else if (@hasDecl(std.os.linux, "B200")) std.os.linux.B200 else null;
		pub const B300 = if (@hasDecl(substitutes, "B300")) substitutes.B300 else if (@hasDecl(std.os.linux, "B300")) std.os.linux.B300 else null;
		pub const B600 = if (@hasDecl(substitutes, "B600")) substitutes.B600 else if (@hasDecl(std.os.linux, "B600")) std.os.linux.B600 else null;
		pub const B1200 = if (@hasDecl(substitutes, "B1200")) substitutes.B1200 else if (@hasDecl(std.os.linux, "B1200")) std.os.linux.B1200 else null;
		pub const B1800 = if (@hasDecl(substitutes, "B1800")) substitutes.B1800 else if (@hasDecl(std.os.linux, "B1800")) std.os.linux.B1800 else null;
		pub const B2400 = if (@hasDecl(substitutes, "B2400")) substitutes.B2400 else if (@hasDecl(std.os.linux, "B2400")) std.os.linux.B2400 else null;
		pub const B4800 = if (@hasDecl(substitutes, "B4800")) substitutes.B4800 else if (@hasDecl(std.os.linux, "B4800")) std.os.linux.B4800 else null;
		pub const B9600 = if (@hasDecl(substitutes, "B9600")) substitutes.B9600 else if (@hasDecl(std.os.linux, "B9600")) std.os.linux.B9600 else null;
		pub const B19200 = if (@hasDecl(substitutes, "B19200")) substitutes.B19200 else if (@hasDecl(std.os.linux, "B19200")) std.os.linux.B19200 else null;
		pub const B38400 = if (@hasDecl(substitutes, "B38400")) substitutes.B38400 else if (@hasDecl(std.os.linux, "B38400")) std.os.linux.B38400 else null;
		pub const BOTHER = if (@hasDecl(substitutes, "BOTHER")) substitutes.BOTHER else if (@hasDecl(std.os.linux, "BOTHER")) std.os.linux.BOTHER else null;
		pub const B57600 = if (@hasDecl(substitutes, "B57600")) substitutes.B57600 else if (@hasDecl(std.os.linux, "B57600")) std.os.linux.B57600 else null;
		pub const B115200 = if (@hasDecl(substitutes, "B115200")) substitutes.B115200 else if (@hasDecl(std.os.linux, "B115200")) std.os.linux.B115200 else null;
		pub const B230400 = if (@hasDecl(substitutes, "B230400")) substitutes.B230400 else if (@hasDecl(std.os.linux, "B230400")) std.os.linux.B230400 else null;
		pub const B460800 = if (@hasDecl(substitutes, "B460800")) substitutes.B460800 else if (@hasDecl(std.os.linux, "B460800")) std.os.linux.B460800 else null;
		pub const B500000 = if (@hasDecl(substitutes, "B500000")) substitutes.B500000 else if (@hasDecl(std.os.linux, "B500000")) std.os.linux.B500000 else null;
		pub const B576000 = if (@hasDecl(substitutes, "B576000")) substitutes.B576000 else if (@hasDecl(std.os.linux, "B576000")) std.os.linux.B576000 else null;
		pub const B921600 = if (@hasDecl(substitutes, "B921600")) substitutes.B921600 else if (@hasDecl(std.os.linux, "B921600")) std.os.linux.B921600 else null;
		pub const B1000000 = if (@hasDecl(substitutes, "B1000000")) substitutes.B1000000 else if (@hasDecl(std.os.linux, "B1000000")) std.os.linux.B1000000 else null;
		pub const B1152000 = if (@hasDecl(substitutes, "B1152000")) substitutes.B1152000 else if (@hasDecl(std.os.linux, "B1152000")) std.os.linux.B1152000 else null;
		pub const B1500000 = if (@hasDecl(substitutes, "B1500000")) substitutes.B1500000 else if (@hasDecl(std.os.linux, "B1500000")) std.os.linux.B1500000 else null;
		pub const B2000000 = if (@hasDecl(substitutes, "B2000000")) substitutes.B2000000 else if (@hasDecl(std.os.linux, "B2000000")) std.os.linux.B2000000 else null;
		pub const B2500000 = if (@hasDecl(substitutes, "B2500000")) substitutes.B2500000 else if (@hasDecl(std.os.linux, "B2500000")) std.os.linux.B2500000 else null;
		pub const B3000000 = if (@hasDecl(substitutes, "B3000000")) substitutes.B3000000 else if (@hasDecl(std.os.linux, "B3000000")) std.os.linux.B3000000 else null;
		pub const B3500000 = if (@hasDecl(substitutes, "B3500000")) substitutes.B3500000 else if (@hasDecl(std.os.linux, "B3500000")) std.os.linux.B3500000 else null;
		pub const B4000000 = if (@hasDecl(substitutes, "B4000000")) substitutes.B4000000 else if (@hasDecl(std.os.linux, "B4000000")) std.os.linux.B4000000 else null;
		pub const V = if (@hasDecl(substitutes, "V")) substitutes.V else if (@hasDecl(std.os.linux, "V")) std.os.linux.V else null;
		pub const IGNBRK = if (@hasDecl(substitutes, "IGNBRK")) substitutes.IGNBRK else if (@hasDecl(std.os.linux, "IGNBRK")) std.os.linux.IGNBRK else null;
		pub const BRKINT = if (@hasDecl(substitutes, "BRKINT")) substitutes.BRKINT else if (@hasDecl(std.os.linux, "BRKINT")) std.os.linux.BRKINT else null;
		pub const IGNPAR = if (@hasDecl(substitutes, "IGNPAR")) substitutes.IGNPAR else if (@hasDecl(std.os.linux, "IGNPAR")) std.os.linux.IGNPAR else null;
		pub const PARMRK = if (@hasDecl(substitutes, "PARMRK")) substitutes.PARMRK else if (@hasDecl(std.os.linux, "PARMRK")) std.os.linux.PARMRK else null;
		pub const INPCK = if (@hasDecl(substitutes, "INPCK")) substitutes.INPCK else if (@hasDecl(std.os.linux, "INPCK")) std.os.linux.INPCK else null;
		pub const ISTRIP = if (@hasDecl(substitutes, "ISTRIP")) substitutes.ISTRIP else if (@hasDecl(std.os.linux, "ISTRIP")) std.os.linux.ISTRIP else null;
		pub const INLCR = if (@hasDecl(substitutes, "INLCR")) substitutes.INLCR else if (@hasDecl(std.os.linux, "INLCR")) std.os.linux.INLCR else null;
		pub const IGNCR = if (@hasDecl(substitutes, "IGNCR")) substitutes.IGNCR else if (@hasDecl(std.os.linux, "IGNCR")) std.os.linux.IGNCR else null;
		pub const ICRNL = if (@hasDecl(substitutes, "ICRNL")) substitutes.ICRNL else if (@hasDecl(std.os.linux, "ICRNL")) std.os.linux.ICRNL else null;
		pub const IUCLC = if (@hasDecl(substitutes, "IUCLC")) substitutes.IUCLC else if (@hasDecl(std.os.linux, "IUCLC")) std.os.linux.IUCLC else null;
		pub const IXON = if (@hasDecl(substitutes, "IXON")) substitutes.IXON else if (@hasDecl(std.os.linux, "IXON")) std.os.linux.IXON else null;
		pub const IXANY = if (@hasDecl(substitutes, "IXANY")) substitutes.IXANY else if (@hasDecl(std.os.linux, "IXANY")) std.os.linux.IXANY else null;
		pub const IXOFF = if (@hasDecl(substitutes, "IXOFF")) substitutes.IXOFF else if (@hasDecl(std.os.linux, "IXOFF")) std.os.linux.IXOFF else null;
		pub const IMAXBEL = if (@hasDecl(substitutes, "IMAXBEL")) substitutes.IMAXBEL else if (@hasDecl(std.os.linux, "IMAXBEL")) std.os.linux.IMAXBEL else null;
		pub const IUTF8 = if (@hasDecl(substitutes, "IUTF8")) substitutes.IUTF8 else if (@hasDecl(std.os.linux, "IUTF8")) std.os.linux.IUTF8 else null;
		pub const OPOST = if (@hasDecl(substitutes, "OPOST")) substitutes.OPOST else if (@hasDecl(std.os.linux, "OPOST")) std.os.linux.OPOST else null;
		pub const OLCUC = if (@hasDecl(substitutes, "OLCUC")) substitutes.OLCUC else if (@hasDecl(std.os.linux, "OLCUC")) std.os.linux.OLCUC else null;
		pub const ONLCR = if (@hasDecl(substitutes, "ONLCR")) substitutes.ONLCR else if (@hasDecl(std.os.linux, "ONLCR")) std.os.linux.ONLCR else null;
		pub const OCRNL = if (@hasDecl(substitutes, "OCRNL")) substitutes.OCRNL else if (@hasDecl(std.os.linux, "OCRNL")) std.os.linux.OCRNL else null;
		pub const ONOCR = if (@hasDecl(substitutes, "ONOCR")) substitutes.ONOCR else if (@hasDecl(std.os.linux, "ONOCR")) std.os.linux.ONOCR else null;
		pub const ONLRET = if (@hasDecl(substitutes, "ONLRET")) substitutes.ONLRET else if (@hasDecl(std.os.linux, "ONLRET")) std.os.linux.ONLRET else null;
		pub const OFILL = if (@hasDecl(substitutes, "OFILL")) substitutes.OFILL else if (@hasDecl(std.os.linux, "OFILL")) std.os.linux.OFILL else null;
		pub const OFDEL = if (@hasDecl(substitutes, "OFDEL")) substitutes.OFDEL else if (@hasDecl(std.os.linux, "OFDEL")) std.os.linux.OFDEL else null;
		pub const VTDLY = if (@hasDecl(substitutes, "VTDLY")) substitutes.VTDLY else if (@hasDecl(std.os.linux, "VTDLY")) std.os.linux.VTDLY else null;
		pub const VT0 = if (@hasDecl(substitutes, "VT0")) substitutes.VT0 else if (@hasDecl(std.os.linux, "VT0")) std.os.linux.VT0 else null;
		pub const VT1 = if (@hasDecl(substitutes, "VT1")) substitutes.VT1 else if (@hasDecl(std.os.linux, "VT1")) std.os.linux.VT1 else null;
		pub const CSIZE = if (@hasDecl(substitutes, "CSIZE")) substitutes.CSIZE else if (@hasDecl(std.os.linux, "CSIZE")) std.os.linux.CSIZE else null;
		pub const CS5 = if (@hasDecl(substitutes, "CS5")) substitutes.CS5 else if (@hasDecl(std.os.linux, "CS5")) std.os.linux.CS5 else null;
		pub const CS6 = if (@hasDecl(substitutes, "CS6")) substitutes.CS6 else if (@hasDecl(std.os.linux, "CS6")) std.os.linux.CS6 else null;
		pub const CS7 = if (@hasDecl(substitutes, "CS7")) substitutes.CS7 else if (@hasDecl(std.os.linux, "CS7")) std.os.linux.CS7 else null;
		pub const CS8 = if (@hasDecl(substitutes, "CS8")) substitutes.CS8 else if (@hasDecl(std.os.linux, "CS8")) std.os.linux.CS8 else null;
		pub const CSTOPB = if (@hasDecl(substitutes, "CSTOPB")) substitutes.CSTOPB else if (@hasDecl(std.os.linux, "CSTOPB")) std.os.linux.CSTOPB else null;
		pub const CREAD = if (@hasDecl(substitutes, "CREAD")) substitutes.CREAD else if (@hasDecl(std.os.linux, "CREAD")) std.os.linux.CREAD else null;
		pub const PARENB = if (@hasDecl(substitutes, "PARENB")) substitutes.PARENB else if (@hasDecl(std.os.linux, "PARENB")) std.os.linux.PARENB else null;
		pub const PARODD = if (@hasDecl(substitutes, "PARODD")) substitutes.PARODD else if (@hasDecl(std.os.linux, "PARODD")) std.os.linux.PARODD else null;
		pub const HUPCL = if (@hasDecl(substitutes, "HUPCL")) substitutes.HUPCL else if (@hasDecl(std.os.linux, "HUPCL")) std.os.linux.HUPCL else null;
		pub const CLOCAL = if (@hasDecl(substitutes, "CLOCAL")) substitutes.CLOCAL else if (@hasDecl(std.os.linux, "CLOCAL")) std.os.linux.CLOCAL else null;
		pub const ISIG = if (@hasDecl(substitutes, "ISIG")) substitutes.ISIG else if (@hasDecl(std.os.linux, "ISIG")) std.os.linux.ISIG else null;
		pub const ICANON = if (@hasDecl(substitutes, "ICANON")) substitutes.ICANON else if (@hasDecl(std.os.linux, "ICANON")) std.os.linux.ICANON else null;
		pub const ECHO = if (@hasDecl(substitutes, "ECHO")) substitutes.ECHO else if (@hasDecl(std.os.linux, "ECHO")) std.os.linux.ECHO else null;
		pub const ECHOE = if (@hasDecl(substitutes, "ECHOE")) substitutes.ECHOE else if (@hasDecl(std.os.linux, "ECHOE")) std.os.linux.ECHOE else null;
		pub const ECHOK = if (@hasDecl(substitutes, "ECHOK")) substitutes.ECHOK else if (@hasDecl(std.os.linux, "ECHOK")) std.os.linux.ECHOK else null;
		pub const ECHONL = if (@hasDecl(substitutes, "ECHONL")) substitutes.ECHONL else if (@hasDecl(std.os.linux, "ECHONL")) std.os.linux.ECHONL else null;
		pub const NOFLSH = if (@hasDecl(substitutes, "NOFLSH")) substitutes.NOFLSH else if (@hasDecl(std.os.linux, "NOFLSH")) std.os.linux.NOFLSH else null;
		pub const TOSTOP = if (@hasDecl(substitutes, "TOSTOP")) substitutes.TOSTOP else if (@hasDecl(std.os.linux, "TOSTOP")) std.os.linux.TOSTOP else null;
		pub const IEXTEN = if (@hasDecl(substitutes, "IEXTEN")) substitutes.IEXTEN else if (@hasDecl(std.os.linux, "IEXTEN")) std.os.linux.IEXTEN else null;
		pub const TCSA = if (@hasDecl(substitutes, "TCSA")) substitutes.TCSA else if (@hasDecl(std.os.linux, "TCSA")) std.os.linux.TCSA else null;
		pub const termios = if (@hasDecl(substitutes, "termios")) substitutes.termios else if (@hasDecl(std.os.linux, "termios")) std.os.linux.termios else null;
		pub const SIOCGIFINDEX = if (@hasDecl(substitutes, "SIOCGIFINDEX")) substitutes.SIOCGIFINDEX else if (@hasDecl(std.os.linux, "SIOCGIFINDEX")) std.os.linux.SIOCGIFINDEX else null;
		pub const IFNAMESIZE = if (@hasDecl(substitutes, "IFNAMESIZE")) substitutes.IFNAMESIZE else if (@hasDecl(std.os.linux, "IFNAMESIZE")) std.os.linux.IFNAMESIZE else null;
		pub const ifmap = if (@hasDecl(substitutes, "ifmap")) substitutes.ifmap else if (@hasDecl(std.os.linux, "ifmap")) std.os.linux.ifmap else null;
		pub const ifreq = if (@hasDecl(substitutes, "ifreq")) substitutes.ifreq else if (@hasDecl(std.os.linux, "ifreq")) std.os.linux.ifreq else null;
		pub const rlimit_resource = if (@hasDecl(substitutes, "rlimit_resource")) substitutes.rlimit_resource else if (@hasDecl(std.os.linux, "rlimit_resource")) std.os.linux.rlimit_resource else null;
		pub const rlim_t = if (@hasDecl(substitutes, "rlim_t")) substitutes.rlim_t else if (@hasDecl(std.os.linux, "rlim_t")) std.os.linux.rlim_t else null;
		pub const RLIM = if (@hasDecl(substitutes, "RLIM")) substitutes.RLIM else if (@hasDecl(std.os.linux, "RLIM")) std.os.linux.RLIM else null;
		pub const rlimit = if (@hasDecl(substitutes, "rlimit")) substitutes.rlimit else if (@hasDecl(std.os.linux, "rlimit")) std.os.linux.rlimit else null;
		pub const MADV = if (@hasDecl(substitutes, "MADV")) substitutes.MADV else if (@hasDecl(std.os.linux, "MADV")) std.os.linux.MADV else null;
		pub const POSIX_FADV = if (@hasDecl(substitutes, "POSIX_FADV")) substitutes.POSIX_FADV else if (@hasDecl(std.os.linux, "POSIX_FADV")) std.os.linux.POSIX_FADV else null;
		pub const kernel_timespec = if (@hasDecl(substitutes, "kernel_timespec")) substitutes.kernel_timespec else if (@hasDecl(std.os.linux, "kernel_timespec")) std.os.linux.kernel_timespec else null;
		pub const timespec = if (@hasDecl(substitutes, "timespec")) substitutes.timespec else if (@hasDecl(std.os.linux, "timespec")) std.os.linux.timespec else null;
		pub const XDP = if (@hasDecl(substitutes, "XDP")) substitutes.XDP else if (@hasDecl(std.os.linux, "XDP")) std.os.linux.XDP else null;
		pub const xdp_ring_offset = if (@hasDecl(substitutes, "xdp_ring_offset")) substitutes.xdp_ring_offset else if (@hasDecl(std.os.linux, "xdp_ring_offset")) std.os.linux.xdp_ring_offset else null;
		pub const xdp_mmap_offsets = if (@hasDecl(substitutes, "xdp_mmap_offsets")) substitutes.xdp_mmap_offsets else if (@hasDecl(std.os.linux, "xdp_mmap_offsets")) std.os.linux.xdp_mmap_offsets else null;
		pub const xdp_umem_reg = if (@hasDecl(substitutes, "xdp_umem_reg")) substitutes.xdp_umem_reg else if (@hasDecl(std.os.linux, "xdp_umem_reg")) std.os.linux.xdp_umem_reg else null;
		pub const xdp_statistics = if (@hasDecl(substitutes, "xdp_statistics")) substitutes.xdp_statistics else if (@hasDecl(std.os.linux, "xdp_statistics")) std.os.linux.xdp_statistics else null;
		pub const xdp_options = if (@hasDecl(substitutes, "xdp_options")) substitutes.xdp_options else if (@hasDecl(std.os.linux, "xdp_options")) std.os.linux.xdp_options else null;
		pub const XSK_UNALIGNED_BUF_OFFSET_SHIFT = if (@hasDecl(substitutes, "XSK_UNALIGNED_BUF_OFFSET_SHIFT")) substitutes.XSK_UNALIGNED_BUF_OFFSET_SHIFT else if (@hasDecl(std.os.linux, "XSK_UNALIGNED_BUF_OFFSET_SHIFT")) std.os.linux.XSK_UNALIGNED_BUF_OFFSET_SHIFT else null;
		pub const XSK_UNALIGNED_BUF_ADDR_MASK = if (@hasDecl(substitutes, "XSK_UNALIGNED_BUF_ADDR_MASK")) substitutes.XSK_UNALIGNED_BUF_ADDR_MASK else if (@hasDecl(std.os.linux, "XSK_UNALIGNED_BUF_ADDR_MASK")) std.os.linux.XSK_UNALIGNED_BUF_ADDR_MASK else null;
		pub const xdp_desc = if (@hasDecl(substitutes, "xdp_desc")) substitutes.xdp_desc else if (@hasDecl(std.os.linux, "xdp_desc")) std.os.linux.xdp_desc else null;
		pub const SECUREBITS_DEFAULT = if (@hasDecl(substitutes, "SECUREBITS_DEFAULT")) substitutes.SECUREBITS_DEFAULT else if (@hasDecl(std.os.linux, "SECUREBITS_DEFAULT")) std.os.linux.SECUREBITS_DEFAULT else null;
		pub const SECURE_NOROOT = if (@hasDecl(substitutes, "SECURE_NOROOT")) substitutes.SECURE_NOROOT else if (@hasDecl(std.os.linux, "SECURE_NOROOT")) std.os.linux.SECURE_NOROOT else null;
		pub const SECURE_NOROOT_LOCKED = if (@hasDecl(substitutes, "SECURE_NOROOT_LOCKED")) substitutes.SECURE_NOROOT_LOCKED else if (@hasDecl(std.os.linux, "SECURE_NOROOT_LOCKED")) std.os.linux.SECURE_NOROOT_LOCKED else null;
		pub const SECBIT_NOROOT = if (@hasDecl(substitutes, "SECBIT_NOROOT")) substitutes.SECBIT_NOROOT else if (@hasDecl(std.os.linux, "SECBIT_NOROOT")) std.os.linux.SECBIT_NOROOT else null;
		pub const SECBIT_NOROOT_LOCKED = if (@hasDecl(substitutes, "SECBIT_NOROOT_LOCKED")) substitutes.SECBIT_NOROOT_LOCKED else if (@hasDecl(std.os.linux, "SECBIT_NOROOT_LOCKED")) std.os.linux.SECBIT_NOROOT_LOCKED else null;
		pub const SECURE_NO_SETUID_FIXUP = if (@hasDecl(substitutes, "SECURE_NO_SETUID_FIXUP")) substitutes.SECURE_NO_SETUID_FIXUP else if (@hasDecl(std.os.linux, "SECURE_NO_SETUID_FIXUP")) std.os.linux.SECURE_NO_SETUID_FIXUP else null;
		pub const SECURE_NO_SETUID_FIXUP_LOCKED = if (@hasDecl(substitutes, "SECURE_NO_SETUID_FIXUP_LOCKED")) substitutes.SECURE_NO_SETUID_FIXUP_LOCKED else if (@hasDecl(std.os.linux, "SECURE_NO_SETUID_FIXUP_LOCKED")) std.os.linux.SECURE_NO_SETUID_FIXUP_LOCKED else null;
		pub const SECBIT_NO_SETUID_FIXUP = if (@hasDecl(substitutes, "SECBIT_NO_SETUID_FIXUP")) substitutes.SECBIT_NO_SETUID_FIXUP else if (@hasDecl(std.os.linux, "SECBIT_NO_SETUID_FIXUP")) std.os.linux.SECBIT_NO_SETUID_FIXUP else null;
		pub const SECBIT_NO_SETUID_FIXUP_LOCKED = if (@hasDecl(substitutes, "SECBIT_NO_SETUID_FIXUP_LOCKED")) substitutes.SECBIT_NO_SETUID_FIXUP_LOCKED else if (@hasDecl(std.os.linux, "SECBIT_NO_SETUID_FIXUP_LOCKED")) std.os.linux.SECBIT_NO_SETUID_FIXUP_LOCKED else null;
		pub const SECURE_KEEP_CAPS = if (@hasDecl(substitutes, "SECURE_KEEP_CAPS")) substitutes.SECURE_KEEP_CAPS else if (@hasDecl(std.os.linux, "SECURE_KEEP_CAPS")) std.os.linux.SECURE_KEEP_CAPS else null;
		pub const SECURE_KEEP_CAPS_LOCKED = if (@hasDecl(substitutes, "SECURE_KEEP_CAPS_LOCKED")) substitutes.SECURE_KEEP_CAPS_LOCKED else if (@hasDecl(std.os.linux, "SECURE_KEEP_CAPS_LOCKED")) std.os.linux.SECURE_KEEP_CAPS_LOCKED else null;
		pub const SECBIT_KEEP_CAPS = if (@hasDecl(substitutes, "SECBIT_KEEP_CAPS")) substitutes.SECBIT_KEEP_CAPS else if (@hasDecl(std.os.linux, "SECBIT_KEEP_CAPS")) std.os.linux.SECBIT_KEEP_CAPS else null;
		pub const SECBIT_KEEP_CAPS_LOCKED = if (@hasDecl(substitutes, "SECBIT_KEEP_CAPS_LOCKED")) substitutes.SECBIT_KEEP_CAPS_LOCKED else if (@hasDecl(std.os.linux, "SECBIT_KEEP_CAPS_LOCKED")) std.os.linux.SECBIT_KEEP_CAPS_LOCKED else null;
		pub const SECURE_NO_CAP_AMBIENT_RAISE = if (@hasDecl(substitutes, "SECURE_NO_CAP_AMBIENT_RAISE")) substitutes.SECURE_NO_CAP_AMBIENT_RAISE else if (@hasDecl(std.os.linux, "SECURE_NO_CAP_AMBIENT_RAISE")) std.os.linux.SECURE_NO_CAP_AMBIENT_RAISE else null;
		pub const SECURE_NO_CAP_AMBIENT_RAISE_LOCKED = if (@hasDecl(substitutes, "SECURE_NO_CAP_AMBIENT_RAISE_LOCKED")) substitutes.SECURE_NO_CAP_AMBIENT_RAISE_LOCKED else if (@hasDecl(std.os.linux, "SECURE_NO_CAP_AMBIENT_RAISE_LOCKED")) std.os.linux.SECURE_NO_CAP_AMBIENT_RAISE_LOCKED else null;
		pub const SECBIT_NO_CAP_AMBIENT_RAISE = if (@hasDecl(substitutes, "SECBIT_NO_CAP_AMBIENT_RAISE")) substitutes.SECBIT_NO_CAP_AMBIENT_RAISE else if (@hasDecl(std.os.linux, "SECBIT_NO_CAP_AMBIENT_RAISE")) std.os.linux.SECBIT_NO_CAP_AMBIENT_RAISE else null;
		pub const SECBIT_NO_CAP_AMBIENT_RAISE_LOCKED = if (@hasDecl(substitutes, "SECBIT_NO_CAP_AMBIENT_RAISE_LOCKED")) substitutes.SECBIT_NO_CAP_AMBIENT_RAISE_LOCKED else if (@hasDecl(std.os.linux, "SECBIT_NO_CAP_AMBIENT_RAISE_LOCKED")) std.os.linux.SECBIT_NO_CAP_AMBIENT_RAISE_LOCKED else null;
		pub const SECURE_ALL_BITS = if (@hasDecl(substitutes, "SECURE_ALL_BITS")) substitutes.SECURE_ALL_BITS else if (@hasDecl(std.os.linux, "SECURE_ALL_BITS")) std.os.linux.SECURE_ALL_BITS else null;
		pub const SECURE_ALL_LOCKS = if (@hasDecl(substitutes, "SECURE_ALL_LOCKS")) substitutes.SECURE_ALL_LOCKS else if (@hasDecl(std.os.linux, "SECURE_ALL_LOCKS")) std.os.linux.SECURE_ALL_LOCKS else null;
		pub const PR = if (@hasDecl(substitutes, "PR")) substitutes.PR else if (@hasDecl(std.os.linux, "PR")) std.os.linux.PR else null;
		pub const prctl_mm_map = if (@hasDecl(substitutes, "prctl_mm_map")) substitutes.prctl_mm_map else if (@hasDecl(std.os.linux, "prctl_mm_map")) std.os.linux.prctl_mm_map else null;
		pub const NETLINK = if (@hasDecl(substitutes, "NETLINK")) substitutes.NETLINK else if (@hasDecl(std.os.linux, "NETLINK")) std.os.linux.NETLINK else null;
		pub const NLM_F_REQUEST = if (@hasDecl(substitutes, "NLM_F_REQUEST")) substitutes.NLM_F_REQUEST else if (@hasDecl(std.os.linux, "NLM_F_REQUEST")) std.os.linux.NLM_F_REQUEST else null;
		pub const NLM_F_MULTI = if (@hasDecl(substitutes, "NLM_F_MULTI")) substitutes.NLM_F_MULTI else if (@hasDecl(std.os.linux, "NLM_F_MULTI")) std.os.linux.NLM_F_MULTI else null;
		pub const NLM_F_ACK = if (@hasDecl(substitutes, "NLM_F_ACK")) substitutes.NLM_F_ACK else if (@hasDecl(std.os.linux, "NLM_F_ACK")) std.os.linux.NLM_F_ACK else null;
		pub const NLM_F_ECHO = if (@hasDecl(substitutes, "NLM_F_ECHO")) substitutes.NLM_F_ECHO else if (@hasDecl(std.os.linux, "NLM_F_ECHO")) std.os.linux.NLM_F_ECHO else null;
		pub const NLM_F_DUMP_INTR = if (@hasDecl(substitutes, "NLM_F_DUMP_INTR")) substitutes.NLM_F_DUMP_INTR else if (@hasDecl(std.os.linux, "NLM_F_DUMP_INTR")) std.os.linux.NLM_F_DUMP_INTR else null;
		pub const NLM_F_DUMP_FILTERED = if (@hasDecl(substitutes, "NLM_F_DUMP_FILTERED")) substitutes.NLM_F_DUMP_FILTERED else if (@hasDecl(std.os.linux, "NLM_F_DUMP_FILTERED")) std.os.linux.NLM_F_DUMP_FILTERED else null;
		pub const NLM_F_ROOT = if (@hasDecl(substitutes, "NLM_F_ROOT")) substitutes.NLM_F_ROOT else if (@hasDecl(std.os.linux, "NLM_F_ROOT")) std.os.linux.NLM_F_ROOT else null;
		pub const NLM_F_MATCH = if (@hasDecl(substitutes, "NLM_F_MATCH")) substitutes.NLM_F_MATCH else if (@hasDecl(std.os.linux, "NLM_F_MATCH")) std.os.linux.NLM_F_MATCH else null;
		pub const NLM_F_ATOMIC = if (@hasDecl(substitutes, "NLM_F_ATOMIC")) substitutes.NLM_F_ATOMIC else if (@hasDecl(std.os.linux, "NLM_F_ATOMIC")) std.os.linux.NLM_F_ATOMIC else null;
		pub const NLM_F_DUMP = if (@hasDecl(substitutes, "NLM_F_DUMP")) substitutes.NLM_F_DUMP else if (@hasDecl(std.os.linux, "NLM_F_DUMP")) std.os.linux.NLM_F_DUMP else null;
		pub const NLM_F_REPLACE = if (@hasDecl(substitutes, "NLM_F_REPLACE")) substitutes.NLM_F_REPLACE else if (@hasDecl(std.os.linux, "NLM_F_REPLACE")) std.os.linux.NLM_F_REPLACE else null;
		pub const NLM_F_EXCL = if (@hasDecl(substitutes, "NLM_F_EXCL")) substitutes.NLM_F_EXCL else if (@hasDecl(std.os.linux, "NLM_F_EXCL")) std.os.linux.NLM_F_EXCL else null;
		pub const NLM_F_CREATE = if (@hasDecl(substitutes, "NLM_F_CREATE")) substitutes.NLM_F_CREATE else if (@hasDecl(std.os.linux, "NLM_F_CREATE")) std.os.linux.NLM_F_CREATE else null;
		pub const NLM_F_APPEND = if (@hasDecl(substitutes, "NLM_F_APPEND")) substitutes.NLM_F_APPEND else if (@hasDecl(std.os.linux, "NLM_F_APPEND")) std.os.linux.NLM_F_APPEND else null;
		pub const NLM_F_NONREC = if (@hasDecl(substitutes, "NLM_F_NONREC")) substitutes.NLM_F_NONREC else if (@hasDecl(std.os.linux, "NLM_F_NONREC")) std.os.linux.NLM_F_NONREC else null;
		pub const NLM_F_CAPPED = if (@hasDecl(substitutes, "NLM_F_CAPPED")) substitutes.NLM_F_CAPPED else if (@hasDecl(std.os.linux, "NLM_F_CAPPED")) std.os.linux.NLM_F_CAPPED else null;
		pub const NLM_F_ACK_TLVS = if (@hasDecl(substitutes, "NLM_F_ACK_TLVS")) substitutes.NLM_F_ACK_TLVS else if (@hasDecl(std.os.linux, "NLM_F_ACK_TLVS")) std.os.linux.NLM_F_ACK_TLVS else null;
		pub const NetlinkMessageType = if (@hasDecl(substitutes, "NetlinkMessageType")) substitutes.NetlinkMessageType else if (@hasDecl(std.os.linux, "NetlinkMessageType")) std.os.linux.NetlinkMessageType else null;
		pub const nlmsghdr = if (@hasDecl(substitutes, "nlmsghdr")) substitutes.nlmsghdr else if (@hasDecl(std.os.linux, "nlmsghdr")) std.os.linux.nlmsghdr else null;
		pub const ifinfomsg = if (@hasDecl(substitutes, "ifinfomsg")) substitutes.ifinfomsg else if (@hasDecl(std.os.linux, "ifinfomsg")) std.os.linux.ifinfomsg else null;
		pub const rtattr = if (@hasDecl(substitutes, "rtattr")) substitutes.rtattr else if (@hasDecl(std.os.linux, "rtattr")) std.os.linux.rtattr else null;
		pub const IFLA = if (@hasDecl(substitutes, "IFLA")) substitutes.IFLA else if (@hasDecl(std.os.linux, "IFLA")) std.os.linux.IFLA else null;
		pub const rtnl_link_ifmap = if (@hasDecl(substitutes, "rtnl_link_ifmap")) substitutes.rtnl_link_ifmap else if (@hasDecl(std.os.linux, "rtnl_link_ifmap")) std.os.linux.rtnl_link_ifmap else null;
		pub const rtnl_link_stats = if (@hasDecl(substitutes, "rtnl_link_stats")) substitutes.rtnl_link_stats else if (@hasDecl(std.os.linux, "rtnl_link_stats")) std.os.linux.rtnl_link_stats else null;
		pub const rtnl_link_stats64 = if (@hasDecl(substitutes, "rtnl_link_stats64")) substitutes.rtnl_link_stats64 else if (@hasDecl(std.os.linux, "rtnl_link_stats64")) std.os.linux.rtnl_link_stats64 else null;
		pub const perf_event_attr = if (@hasDecl(substitutes, "perf_event_attr")) substitutes.perf_event_attr else if (@hasDecl(std.os.linux, "perf_event_attr")) std.os.linux.perf_event_attr else null;
		pub const PERF = if (@hasDecl(substitutes, "PERF")) substitutes.PERF else if (@hasDecl(std.os.linux, "PERF")) std.os.linux.PERF else null;
		pub const AUDIT = if (@hasDecl(substitutes, "AUDIT")) substitutes.AUDIT else if (@hasDecl(std.os.linux, "AUDIT")) std.os.linux.AUDIT else null;
		pub const PTRACE = if (@hasDecl(substitutes, "PTRACE")) substitutes.PTRACE else if (@hasDecl(std.os.linux, "PTRACE")) std.os.linux.PTRACE else null;
	};
}
