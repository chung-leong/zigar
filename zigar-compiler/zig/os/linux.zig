const std = @import("std");

pub const target = std.os.linux;

pub fn with(comptime substitutes: anytype) type {
	return struct {
		pub const syscall0 = if (@hasDecl(substitutes, "syscall0")) substitutes.syscall0 else std.os.linux.syscall0;
		pub const syscall1 = if (@hasDecl(substitutes, "syscall1")) substitutes.syscall1 else std.os.linux.syscall1;
		pub const syscall2 = if (@hasDecl(substitutes, "syscall2")) substitutes.syscall2 else std.os.linux.syscall2;
		pub const syscall3 = if (@hasDecl(substitutes, "syscall3")) substitutes.syscall3 else std.os.linux.syscall3;
		pub const syscall4 = if (@hasDecl(substitutes, "syscall4")) substitutes.syscall4 else std.os.linux.syscall4;
		pub const syscall5 = if (@hasDecl(substitutes, "syscall5")) substitutes.syscall5 else std.os.linux.syscall5;
		pub const syscall6 = if (@hasDecl(substitutes, "syscall6")) substitutes.syscall6 else std.os.linux.syscall6;
		pub const syscall7 = if (@hasDecl(substitutes, "syscall7")) substitutes.syscall7 else std.os.linux.syscall7;
		pub const restore = if (@hasDecl(substitutes, "restore")) substitutes.restore else std.os.linux.restore;
		pub const restore_rt = if (@hasDecl(substitutes, "restore_rt")) substitutes.restore_rt else std.os.linux.restore_rt;
		pub const socketcall = if (@hasDecl(substitutes, "socketcall")) substitutes.socketcall else std.os.linux.socketcall;
		pub const syscall_pipe = if (@hasDecl(substitutes, "syscall_pipe")) substitutes.syscall_pipe else std.os.linux.syscall_pipe;
		pub const syscall_fork = if (@hasDecl(substitutes, "syscall_fork")) substitutes.syscall_fork else std.os.linux.syscall_fork;
		pub const ARCH = if (@hasDecl(substitutes, "ARCH")) substitutes.ARCH else std.os.linux.ARCH;
		pub const Elf_Symndx = if (@hasDecl(substitutes, "Elf_Symndx")) substitutes.Elf_Symndx else std.os.linux.Elf_Symndx;
		pub const F = if (@hasDecl(substitutes, "F")) substitutes.F else std.os.linux.F;
		pub const Flock = if (@hasDecl(substitutes, "Flock")) substitutes.Flock else std.os.linux.Flock;
		pub const HWCAP = if (@hasDecl(substitutes, "HWCAP")) substitutes.HWCAP else std.os.linux.HWCAP;
		pub const LOCK = if (@hasDecl(substitutes, "LOCK")) substitutes.LOCK else std.os.linux.LOCK;
		pub const MMAP2_UNIT = if (@hasDecl(substitutes, "MMAP2_UNIT")) substitutes.MMAP2_UNIT else std.os.linux.MMAP2_UNIT;
		pub const REG = if (@hasDecl(substitutes, "REG")) substitutes.REG else std.os.linux.REG;
		pub const SC = if (@hasDecl(substitutes, "SC")) substitutes.SC else std.os.linux.SC;
		pub const Stat = if (@hasDecl(substitutes, "Stat")) substitutes.Stat else std.os.linux.Stat;
		pub const VDSO = if (@hasDecl(substitutes, "VDSO")) substitutes.VDSO else std.os.linux.VDSO;
		pub const blkcnt_t = if (@hasDecl(substitutes, "blkcnt_t")) substitutes.blkcnt_t else std.os.linux.blkcnt_t;
		pub const blksize_t = if (@hasDecl(substitutes, "blksize_t")) substitutes.blksize_t else std.os.linux.blksize_t;
		pub const clone = if (@hasDecl(substitutes, "clone")) substitutes.clone else std.os.linux.clone;
		pub const dev_t = if (@hasDecl(substitutes, "dev_t")) substitutes.dev_t else std.os.linux.dev_t;
		pub const ino_t = if (@hasDecl(substitutes, "ino_t")) substitutes.ino_t else std.os.linux.ino_t;
		pub const mcontext_t = if (@hasDecl(substitutes, "mcontext_t")) substitutes.mcontext_t else std.os.linux.mcontext_t;
		pub const mode_t = if (@hasDecl(substitutes, "mode_t")) substitutes.mode_t else std.os.linux.mode_t;
		pub const msghdr = if (@hasDecl(substitutes, "msghdr")) substitutes.msghdr else std.os.linux.msghdr;
		pub const msghdr_const = if (@hasDecl(substitutes, "msghdr_const")) substitutes.msghdr_const else std.os.linux.msghdr_const;
		pub const nlink_t = if (@hasDecl(substitutes, "nlink_t")) substitutes.nlink_t else std.os.linux.nlink_t;
		pub const off_t = if (@hasDecl(substitutes, "off_t")) substitutes.off_t else std.os.linux.off_t;
		pub const time_t = if (@hasDecl(substitutes, "time_t")) substitutes.time_t else std.os.linux.time_t;
		pub const timeval = if (@hasDecl(substitutes, "timeval")) substitutes.timeval else std.os.linux.timeval;
		pub const timezone = if (@hasDecl(substitutes, "timezone")) substitutes.timezone else std.os.linux.timezone;
		pub const ucontext_t = if (@hasDecl(substitutes, "ucontext_t")) substitutes.ucontext_t else std.os.linux.ucontext_t;
		pub const user_desc = if (@hasDecl(substitutes, "user_desc")) substitutes.user_desc else std.os.linux.user_desc;
		pub const tls = if (@hasDecl(substitutes, "tls")) substitutes.tls else std.os.linux.tls;
		pub const pie = if (@hasDecl(substitutes, "pie")) substitutes.pie else std.os.linux.pie;
		pub const BPF = if (@hasDecl(substitutes, "BPF")) substitutes.BPF else std.os.linux.BPF;
		pub const IOCTL = if (@hasDecl(substitutes, "IOCTL")) substitutes.IOCTL else std.os.linux.IOCTL;
		pub const SECCOMP = if (@hasDecl(substitutes, "SECCOMP")) substitutes.SECCOMP else std.os.linux.SECCOMP;
		pub const syscalls = if (@hasDecl(substitutes, "syscalls")) substitutes.syscalls else std.os.linux.syscalls;
		pub const SYS = if (@hasDecl(substitutes, "SYS")) substitutes.SYS else std.os.linux.SYS;
		pub const MAP = if (@hasDecl(substitutes, "MAP")) substitutes.MAP else std.os.linux.MAP;
		pub const O = if (@hasDecl(substitutes, "O")) substitutes.O else std.os.linux.O;
		pub const IO_Uring = if (@hasDecl(substitutes, "IO_Uring")) substitutes.IO_Uring else std.os.linux.IO_Uring;
		pub const SubmissionQueue = if (@hasDecl(substitutes, "SubmissionQueue")) substitutes.SubmissionQueue else std.os.linux.SubmissionQueue;
		pub const CompletionQueue = if (@hasDecl(substitutes, "CompletionQueue")) substitutes.CompletionQueue else std.os.linux.CompletionQueue;
		pub const io_uring_prep_nop = if (@hasDecl(substitutes, "io_uring_prep_nop")) substitutes.io_uring_prep_nop else std.os.linux.io_uring_prep_nop;
		pub const io_uring_prep_fsync = if (@hasDecl(substitutes, "io_uring_prep_fsync")) substitutes.io_uring_prep_fsync else std.os.linux.io_uring_prep_fsync;
		pub const io_uring_prep_rw = if (@hasDecl(substitutes, "io_uring_prep_rw")) substitutes.io_uring_prep_rw else std.os.linux.io_uring_prep_rw;
		pub const io_uring_prep_read = if (@hasDecl(substitutes, "io_uring_prep_read")) substitutes.io_uring_prep_read else std.os.linux.io_uring_prep_read;
		pub const io_uring_prep_write = if (@hasDecl(substitutes, "io_uring_prep_write")) substitutes.io_uring_prep_write else std.os.linux.io_uring_prep_write;
		pub const io_uring_prep_readv = if (@hasDecl(substitutes, "io_uring_prep_readv")) substitutes.io_uring_prep_readv else std.os.linux.io_uring_prep_readv;
		pub const io_uring_prep_writev = if (@hasDecl(substitutes, "io_uring_prep_writev")) substitutes.io_uring_prep_writev else std.os.linux.io_uring_prep_writev;
		pub const io_uring_prep_read_fixed = if (@hasDecl(substitutes, "io_uring_prep_read_fixed")) substitutes.io_uring_prep_read_fixed else std.os.linux.io_uring_prep_read_fixed;
		pub const io_uring_prep_write_fixed = if (@hasDecl(substitutes, "io_uring_prep_write_fixed")) substitutes.io_uring_prep_write_fixed else std.os.linux.io_uring_prep_write_fixed;
		pub const __io_uring_prep_poll_mask = if (@hasDecl(substitutes, "__io_uring_prep_poll_mask")) substitutes.__io_uring_prep_poll_mask else std.os.linux.__io_uring_prep_poll_mask;
		pub const io_uring_prep_accept = if (@hasDecl(substitutes, "io_uring_prep_accept")) substitutes.io_uring_prep_accept else std.os.linux.io_uring_prep_accept;
		pub const io_uring_prep_connect = if (@hasDecl(substitutes, "io_uring_prep_connect")) substitutes.io_uring_prep_connect else std.os.linux.io_uring_prep_connect;
		pub const io_uring_prep_epoll_ctl = if (@hasDecl(substitutes, "io_uring_prep_epoll_ctl")) substitutes.io_uring_prep_epoll_ctl else std.os.linux.io_uring_prep_epoll_ctl;
		pub const io_uring_prep_recv = if (@hasDecl(substitutes, "io_uring_prep_recv")) substitutes.io_uring_prep_recv else std.os.linux.io_uring_prep_recv;
		pub const io_uring_prep_send = if (@hasDecl(substitutes, "io_uring_prep_send")) substitutes.io_uring_prep_send else std.os.linux.io_uring_prep_send;
		pub const io_uring_prep_recvmsg = if (@hasDecl(substitutes, "io_uring_prep_recvmsg")) substitutes.io_uring_prep_recvmsg else std.os.linux.io_uring_prep_recvmsg;
		pub const io_uring_prep_sendmsg = if (@hasDecl(substitutes, "io_uring_prep_sendmsg")) substitutes.io_uring_prep_sendmsg else std.os.linux.io_uring_prep_sendmsg;
		pub const io_uring_prep_openat = if (@hasDecl(substitutes, "io_uring_prep_openat")) substitutes.io_uring_prep_openat else std.os.linux.io_uring_prep_openat;
		pub const io_uring_prep_close = if (@hasDecl(substitutes, "io_uring_prep_close")) substitutes.io_uring_prep_close else std.os.linux.io_uring_prep_close;
		pub const io_uring_prep_timeout = if (@hasDecl(substitutes, "io_uring_prep_timeout")) substitutes.io_uring_prep_timeout else std.os.linux.io_uring_prep_timeout;
		pub const io_uring_prep_timeout_remove = if (@hasDecl(substitutes, "io_uring_prep_timeout_remove")) substitutes.io_uring_prep_timeout_remove else std.os.linux.io_uring_prep_timeout_remove;
		pub const io_uring_prep_link_timeout = if (@hasDecl(substitutes, "io_uring_prep_link_timeout")) substitutes.io_uring_prep_link_timeout else std.os.linux.io_uring_prep_link_timeout;
		pub const io_uring_prep_poll_add = if (@hasDecl(substitutes, "io_uring_prep_poll_add")) substitutes.io_uring_prep_poll_add else std.os.linux.io_uring_prep_poll_add;
		pub const io_uring_prep_poll_remove = if (@hasDecl(substitutes, "io_uring_prep_poll_remove")) substitutes.io_uring_prep_poll_remove else std.os.linux.io_uring_prep_poll_remove;
		pub const io_uring_prep_poll_update = if (@hasDecl(substitutes, "io_uring_prep_poll_update")) substitutes.io_uring_prep_poll_update else std.os.linux.io_uring_prep_poll_update;
		pub const io_uring_prep_fallocate = if (@hasDecl(substitutes, "io_uring_prep_fallocate")) substitutes.io_uring_prep_fallocate else std.os.linux.io_uring_prep_fallocate;
		pub const io_uring_prep_statx = if (@hasDecl(substitutes, "io_uring_prep_statx")) substitutes.io_uring_prep_statx else std.os.linux.io_uring_prep_statx;
		pub const io_uring_prep_cancel = if (@hasDecl(substitutes, "io_uring_prep_cancel")) substitutes.io_uring_prep_cancel else std.os.linux.io_uring_prep_cancel;
		pub const io_uring_prep_shutdown = if (@hasDecl(substitutes, "io_uring_prep_shutdown")) substitutes.io_uring_prep_shutdown else std.os.linux.io_uring_prep_shutdown;
		pub const io_uring_prep_renameat = if (@hasDecl(substitutes, "io_uring_prep_renameat")) substitutes.io_uring_prep_renameat else std.os.linux.io_uring_prep_renameat;
		pub const io_uring_prep_unlinkat = if (@hasDecl(substitutes, "io_uring_prep_unlinkat")) substitutes.io_uring_prep_unlinkat else std.os.linux.io_uring_prep_unlinkat;
		pub const io_uring_prep_mkdirat = if (@hasDecl(substitutes, "io_uring_prep_mkdirat")) substitutes.io_uring_prep_mkdirat else std.os.linux.io_uring_prep_mkdirat;
		pub const io_uring_prep_symlinkat = if (@hasDecl(substitutes, "io_uring_prep_symlinkat")) substitutes.io_uring_prep_symlinkat else std.os.linux.io_uring_prep_symlinkat;
		pub const io_uring_prep_linkat = if (@hasDecl(substitutes, "io_uring_prep_linkat")) substitutes.io_uring_prep_linkat else std.os.linux.io_uring_prep_linkat;
		pub const io_uring_prep_provide_buffers = if (@hasDecl(substitutes, "io_uring_prep_provide_buffers")) substitutes.io_uring_prep_provide_buffers else std.os.linux.io_uring_prep_provide_buffers;
		pub const io_uring_prep_remove_buffers = if (@hasDecl(substitutes, "io_uring_prep_remove_buffers")) substitutes.io_uring_prep_remove_buffers else std.os.linux.io_uring_prep_remove_buffers;
		pub const elf_aux_maybe = if (@hasDecl(substitutes, "elf_aux_maybe")) substitutes.elf_aux_maybe else std.os.linux.elf_aux_maybe;
		pub const getauxval = if (@hasDecl(substitutes, "getauxval")) substitutes.getauxval else std.os.linux.getauxval;
		pub const getErrno = if (@hasDecl(substitutes, "getErrno")) substitutes.getErrno else std.os.linux.getErrno;
		pub const dup = if (@hasDecl(substitutes, "dup")) substitutes.dup else std.os.linux.dup;
		pub const dup2 = if (@hasDecl(substitutes, "dup2")) substitutes.dup2 else std.os.linux.dup2;
		pub const dup3 = if (@hasDecl(substitutes, "dup3")) substitutes.dup3 else std.os.linux.dup3;
		pub const chdir = if (@hasDecl(substitutes, "chdir")) substitutes.chdir else std.os.linux.chdir;
		pub const fchdir = if (@hasDecl(substitutes, "fchdir")) substitutes.fchdir else std.os.linux.fchdir;
		pub const chroot = if (@hasDecl(substitutes, "chroot")) substitutes.chroot else std.os.linux.chroot;
		pub const execve = if (@hasDecl(substitutes, "execve")) substitutes.execve else std.os.linux.execve;
		pub const fork = if (@hasDecl(substitutes, "fork")) substitutes.fork else std.os.linux.fork;
		pub const vfork = if (@hasDecl(substitutes, "vfork")) substitutes.vfork else std.os.linux.vfork;
		pub const futimens = if (@hasDecl(substitutes, "futimens")) substitutes.futimens else std.os.linux.futimens;
		pub const utimensat = if (@hasDecl(substitutes, "utimensat")) substitutes.utimensat else std.os.linux.utimensat;
		pub const fallocate = if (@hasDecl(substitutes, "fallocate")) substitutes.fallocate else std.os.linux.fallocate;
		pub const futex_wait = if (@hasDecl(substitutes, "futex_wait")) substitutes.futex_wait else std.os.linux.futex_wait;
		pub const futex_wake = if (@hasDecl(substitutes, "futex_wake")) substitutes.futex_wake else std.os.linux.futex_wake;
		pub const getcwd = if (@hasDecl(substitutes, "getcwd")) substitutes.getcwd else std.os.linux.getcwd;
		pub const getdents = if (@hasDecl(substitutes, "getdents")) substitutes.getdents else std.os.linux.getdents;
		pub const getdents64 = if (@hasDecl(substitutes, "getdents64")) substitutes.getdents64 else std.os.linux.getdents64;
		pub const inotify_init1 = if (@hasDecl(substitutes, "inotify_init1")) substitutes.inotify_init1 else std.os.linux.inotify_init1;
		pub const inotify_add_watch = if (@hasDecl(substitutes, "inotify_add_watch")) substitutes.inotify_add_watch else std.os.linux.inotify_add_watch;
		pub const inotify_rm_watch = if (@hasDecl(substitutes, "inotify_rm_watch")) substitutes.inotify_rm_watch else std.os.linux.inotify_rm_watch;
		pub const readlink = if (@hasDecl(substitutes, "readlink")) substitutes.readlink else std.os.linux.readlink;
		pub const readlinkat = if (@hasDecl(substitutes, "readlinkat")) substitutes.readlinkat else std.os.linux.readlinkat;
		pub const mkdir = if (@hasDecl(substitutes, "mkdir")) substitutes.mkdir else std.os.linux.mkdir;
		pub const mkdirat = if (@hasDecl(substitutes, "mkdirat")) substitutes.mkdirat else std.os.linux.mkdirat;
		pub const mknod = if (@hasDecl(substitutes, "mknod")) substitutes.mknod else std.os.linux.mknod;
		pub const mknodat = if (@hasDecl(substitutes, "mknodat")) substitutes.mknodat else std.os.linux.mknodat;
		pub const mount = if (@hasDecl(substitutes, "mount")) substitutes.mount else std.os.linux.mount;
		pub const umount = if (@hasDecl(substitutes, "umount")) substitutes.umount else std.os.linux.umount;
		pub const umount2 = if (@hasDecl(substitutes, "umount2")) substitutes.umount2 else std.os.linux.umount2;
		pub const mmap = if (@hasDecl(substitutes, "mmap")) substitutes.mmap else std.os.linux.mmap;
		pub const mprotect = if (@hasDecl(substitutes, "mprotect")) substitutes.mprotect else std.os.linux.mprotect;
		pub const MSF = if (@hasDecl(substitutes, "MSF")) substitutes.MSF else std.os.linux.MSF;
		pub const msync = if (@hasDecl(substitutes, "msync")) substitutes.msync else std.os.linux.msync;
		pub const munmap = if (@hasDecl(substitutes, "munmap")) substitutes.munmap else std.os.linux.munmap;
		pub const poll = if (@hasDecl(substitutes, "poll")) substitutes.poll else std.os.linux.poll;
		pub const ppoll = if (@hasDecl(substitutes, "ppoll")) substitutes.ppoll else std.os.linux.ppoll;
		pub const read = if (@hasDecl(substitutes, "read")) substitutes.read else std.os.linux.read;
		pub const preadv = if (@hasDecl(substitutes, "preadv")) substitutes.preadv else std.os.linux.preadv;
		pub const preadv2 = if (@hasDecl(substitutes, "preadv2")) substitutes.preadv2 else std.os.linux.preadv2;
		pub const readv = if (@hasDecl(substitutes, "readv")) substitutes.readv else std.os.linux.readv;
		pub const writev = if (@hasDecl(substitutes, "writev")) substitutes.writev else std.os.linux.writev;
		pub const pwritev = if (@hasDecl(substitutes, "pwritev")) substitutes.pwritev else std.os.linux.pwritev;
		pub const pwritev2 = if (@hasDecl(substitutes, "pwritev2")) substitutes.pwritev2 else std.os.linux.pwritev2;
		pub const rmdir = if (@hasDecl(substitutes, "rmdir")) substitutes.rmdir else std.os.linux.rmdir;
		pub const symlink = if (@hasDecl(substitutes, "symlink")) substitutes.symlink else std.os.linux.symlink;
		pub const symlinkat = if (@hasDecl(substitutes, "symlinkat")) substitutes.symlinkat else std.os.linux.symlinkat;
		pub const pread = if (@hasDecl(substitutes, "pread")) substitutes.pread else std.os.linux.pread;
		pub const access = if (@hasDecl(substitutes, "access")) substitutes.access else std.os.linux.access;
		pub const faccessat = if (@hasDecl(substitutes, "faccessat")) substitutes.faccessat else std.os.linux.faccessat;
		pub const pipe = if (@hasDecl(substitutes, "pipe")) substitutes.pipe else std.os.linux.pipe;
		pub const pipe2 = if (@hasDecl(substitutes, "pipe2")) substitutes.pipe2 else std.os.linux.pipe2;
		pub const write = if (@hasDecl(substitutes, "write")) substitutes.write else std.os.linux.write;
		pub const ftruncate = if (@hasDecl(substitutes, "ftruncate")) substitutes.ftruncate else std.os.linux.ftruncate;
		pub const pwrite = if (@hasDecl(substitutes, "pwrite")) substitutes.pwrite else std.os.linux.pwrite;
		pub const rename = if (@hasDecl(substitutes, "rename")) substitutes.rename else std.os.linux.rename;
		pub const renameat = if (@hasDecl(substitutes, "renameat")) substitutes.renameat else std.os.linux.renameat;
		pub const renameat2 = if (@hasDecl(substitutes, "renameat2")) substitutes.renameat2 else std.os.linux.renameat2;
		pub const open = if (@hasDecl(substitutes, "open")) substitutes.open else std.os.linux.open;
		pub const create = if (@hasDecl(substitutes, "create")) substitutes.create else std.os.linux.create;
		pub const openat = if (@hasDecl(substitutes, "openat")) substitutes.openat else std.os.linux.openat;
		pub const clone5 = if (@hasDecl(substitutes, "clone5")) substitutes.clone5 else std.os.linux.clone5;
		pub const clone2 = if (@hasDecl(substitutes, "clone2")) substitutes.clone2 else std.os.linux.clone2;
		pub const close = if (@hasDecl(substitutes, "close")) substitutes.close else std.os.linux.close;
		pub const fchmod = if (@hasDecl(substitutes, "fchmod")) substitutes.fchmod else std.os.linux.fchmod;
		pub const chmod = if (@hasDecl(substitutes, "chmod")) substitutes.chmod else std.os.linux.chmod;
		pub const fchown = if (@hasDecl(substitutes, "fchown")) substitutes.fchown else std.os.linux.fchown;
		pub const fchmodat = if (@hasDecl(substitutes, "fchmodat")) substitutes.fchmodat else std.os.linux.fchmodat;
		pub const llseek = if (@hasDecl(substitutes, "llseek")) substitutes.llseek else std.os.linux.llseek;
		pub const lseek = if (@hasDecl(substitutes, "lseek")) substitutes.lseek else std.os.linux.lseek;
		pub const exit = if (@hasDecl(substitutes, "exit")) substitutes.exit else std.os.linux.exit;
		pub const exit_group = if (@hasDecl(substitutes, "exit_group")) substitutes.exit_group else std.os.linux.exit_group;
		pub const LINUX_REBOOT = if (@hasDecl(substitutes, "LINUX_REBOOT")) substitutes.LINUX_REBOOT else std.os.linux.LINUX_REBOOT;
		pub const reboot = if (@hasDecl(substitutes, "reboot")) substitutes.reboot else std.os.linux.reboot;
		pub const getrandom = if (@hasDecl(substitutes, "getrandom")) substitutes.getrandom else std.os.linux.getrandom;
		pub const kill = if (@hasDecl(substitutes, "kill")) substitutes.kill else std.os.linux.kill;
		pub const tkill = if (@hasDecl(substitutes, "tkill")) substitutes.tkill else std.os.linux.tkill;
		pub const tgkill = if (@hasDecl(substitutes, "tgkill")) substitutes.tgkill else std.os.linux.tgkill;
		pub const link = if (@hasDecl(substitutes, "link")) substitutes.link else std.os.linux.link;
		pub const linkat = if (@hasDecl(substitutes, "linkat")) substitutes.linkat else std.os.linux.linkat;
		pub const unlink = if (@hasDecl(substitutes, "unlink")) substitutes.unlink else std.os.linux.unlink;
		pub const unlinkat = if (@hasDecl(substitutes, "unlinkat")) substitutes.unlinkat else std.os.linux.unlinkat;
		pub const waitpid = if (@hasDecl(substitutes, "waitpid")) substitutes.waitpid else std.os.linux.waitpid;
		pub const wait4 = if (@hasDecl(substitutes, "wait4")) substitutes.wait4 else std.os.linux.wait4;
		pub const waitid = if (@hasDecl(substitutes, "waitid")) substitutes.waitid else std.os.linux.waitid;
		pub const fcntl = if (@hasDecl(substitutes, "fcntl")) substitutes.fcntl else std.os.linux.fcntl;
		pub const flock = if (@hasDecl(substitutes, "flock")) substitutes.flock else std.os.linux.flock;
		pub const clock_gettime = if (@hasDecl(substitutes, "clock_gettime")) substitutes.clock_gettime else std.os.linux.clock_gettime;
		pub const clock_getres = if (@hasDecl(substitutes, "clock_getres")) substitutes.clock_getres else std.os.linux.clock_getres;
		pub const clock_settime = if (@hasDecl(substitutes, "clock_settime")) substitutes.clock_settime else std.os.linux.clock_settime;
		pub const gettimeofday = if (@hasDecl(substitutes, "gettimeofday")) substitutes.gettimeofday else std.os.linux.gettimeofday;
		pub const settimeofday = if (@hasDecl(substitutes, "settimeofday")) substitutes.settimeofday else std.os.linux.settimeofday;
		pub const nanosleep = if (@hasDecl(substitutes, "nanosleep")) substitutes.nanosleep else std.os.linux.nanosleep;
		pub const setuid = if (@hasDecl(substitutes, "setuid")) substitutes.setuid else std.os.linux.setuid;
		pub const setgid = if (@hasDecl(substitutes, "setgid")) substitutes.setgid else std.os.linux.setgid;
		pub const setreuid = if (@hasDecl(substitutes, "setreuid")) substitutes.setreuid else std.os.linux.setreuid;
		pub const setregid = if (@hasDecl(substitutes, "setregid")) substitutes.setregid else std.os.linux.setregid;
		pub const getuid = if (@hasDecl(substitutes, "getuid")) substitutes.getuid else std.os.linux.getuid;
		pub const getgid = if (@hasDecl(substitutes, "getgid")) substitutes.getgid else std.os.linux.getgid;
		pub const geteuid = if (@hasDecl(substitutes, "geteuid")) substitutes.geteuid else std.os.linux.geteuid;
		pub const getegid = if (@hasDecl(substitutes, "getegid")) substitutes.getegid else std.os.linux.getegid;
		pub const seteuid = if (@hasDecl(substitutes, "seteuid")) substitutes.seteuid else std.os.linux.seteuid;
		pub const setegid = if (@hasDecl(substitutes, "setegid")) substitutes.setegid else std.os.linux.setegid;
		pub const getresuid = if (@hasDecl(substitutes, "getresuid")) substitutes.getresuid else std.os.linux.getresuid;
		pub const getresgid = if (@hasDecl(substitutes, "getresgid")) substitutes.getresgid else std.os.linux.getresgid;
		pub const setresuid = if (@hasDecl(substitutes, "setresuid")) substitutes.setresuid else std.os.linux.setresuid;
		pub const setresgid = if (@hasDecl(substitutes, "setresgid")) substitutes.setresgid else std.os.linux.setresgid;
		pub const getgroups = if (@hasDecl(substitutes, "getgroups")) substitutes.getgroups else std.os.linux.getgroups;
		pub const setgroups = if (@hasDecl(substitutes, "setgroups")) substitutes.setgroups else std.os.linux.setgroups;
		pub const getpid = if (@hasDecl(substitutes, "getpid")) substitutes.getpid else std.os.linux.getpid;
		pub const gettid = if (@hasDecl(substitutes, "gettid")) substitutes.gettid else std.os.linux.gettid;
		pub const sigprocmask = if (@hasDecl(substitutes, "sigprocmask")) substitutes.sigprocmask else std.os.linux.sigprocmask;
		pub const sigaction = if (@hasDecl(substitutes, "sigaction")) substitutes.sigaction else std.os.linux.sigaction;
		pub const sigaddset = if (@hasDecl(substitutes, "sigaddset")) substitutes.sigaddset else std.os.linux.sigaddset;
		pub const sigismember = if (@hasDecl(substitutes, "sigismember")) substitutes.sigismember else std.os.linux.sigismember;
		pub const getsockname = if (@hasDecl(substitutes, "getsockname")) substitutes.getsockname else std.os.linux.getsockname;
		pub const getpeername = if (@hasDecl(substitutes, "getpeername")) substitutes.getpeername else std.os.linux.getpeername;
		pub const socket = if (@hasDecl(substitutes, "socket")) substitutes.socket else std.os.linux.socket;
		pub const setsockopt = if (@hasDecl(substitutes, "setsockopt")) substitutes.setsockopt else std.os.linux.setsockopt;
		pub const getsockopt = if (@hasDecl(substitutes, "getsockopt")) substitutes.getsockopt else std.os.linux.getsockopt;
		pub const sendmsg = if (@hasDecl(substitutes, "sendmsg")) substitutes.sendmsg else std.os.linux.sendmsg;
		pub const sendmmsg = if (@hasDecl(substitutes, "sendmmsg")) substitutes.sendmmsg else std.os.linux.sendmmsg;
		pub const connect = if (@hasDecl(substitutes, "connect")) substitutes.connect else std.os.linux.connect;
		pub const recvmsg = if (@hasDecl(substitutes, "recvmsg")) substitutes.recvmsg else std.os.linux.recvmsg;
		pub const recvfrom = if (@hasDecl(substitutes, "recvfrom")) substitutes.recvfrom else std.os.linux.recvfrom;
		pub const shutdown = if (@hasDecl(substitutes, "shutdown")) substitutes.shutdown else std.os.linux.shutdown;
		pub const bind = if (@hasDecl(substitutes, "bind")) substitutes.bind else std.os.linux.bind;
		pub const listen = if (@hasDecl(substitutes, "listen")) substitutes.listen else std.os.linux.listen;
		pub const sendto = if (@hasDecl(substitutes, "sendto")) substitutes.sendto else std.os.linux.sendto;
		pub const sendfile = if (@hasDecl(substitutes, "sendfile")) substitutes.sendfile else std.os.linux.sendfile;
		pub const socketpair = if (@hasDecl(substitutes, "socketpair")) substitutes.socketpair else std.os.linux.socketpair;
		pub const accept = if (@hasDecl(substitutes, "accept")) substitutes.accept else std.os.linux.accept;
		pub const accept4 = if (@hasDecl(substitutes, "accept4")) substitutes.accept4 else std.os.linux.accept4;
		pub const fstat = if (@hasDecl(substitutes, "fstat")) substitutes.fstat else std.os.linux.fstat;
		pub const stat = if (@hasDecl(substitutes, "stat")) substitutes.stat else std.os.linux.stat;
		pub const lstat = if (@hasDecl(substitutes, "lstat")) substitutes.lstat else std.os.linux.lstat;
		pub const fstatat = if (@hasDecl(substitutes, "fstatat")) substitutes.fstatat else std.os.linux.fstatat;
		pub const statx = if (@hasDecl(substitutes, "statx")) substitutes.statx else std.os.linux.statx;
		pub const listxattr = if (@hasDecl(substitutes, "listxattr")) substitutes.listxattr else std.os.linux.listxattr;
		pub const llistxattr = if (@hasDecl(substitutes, "llistxattr")) substitutes.llistxattr else std.os.linux.llistxattr;
		pub const flistxattr = if (@hasDecl(substitutes, "flistxattr")) substitutes.flistxattr else std.os.linux.flistxattr;
		pub const getxattr = if (@hasDecl(substitutes, "getxattr")) substitutes.getxattr else std.os.linux.getxattr;
		pub const lgetxattr = if (@hasDecl(substitutes, "lgetxattr")) substitutes.lgetxattr else std.os.linux.lgetxattr;
		pub const fgetxattr = if (@hasDecl(substitutes, "fgetxattr")) substitutes.fgetxattr else std.os.linux.fgetxattr;
		pub const setxattr = if (@hasDecl(substitutes, "setxattr")) substitutes.setxattr else std.os.linux.setxattr;
		pub const lsetxattr = if (@hasDecl(substitutes, "lsetxattr")) substitutes.lsetxattr else std.os.linux.lsetxattr;
		pub const fsetxattr = if (@hasDecl(substitutes, "fsetxattr")) substitutes.fsetxattr else std.os.linux.fsetxattr;
		pub const removexattr = if (@hasDecl(substitutes, "removexattr")) substitutes.removexattr else std.os.linux.removexattr;
		pub const lremovexattr = if (@hasDecl(substitutes, "lremovexattr")) substitutes.lremovexattr else std.os.linux.lremovexattr;
		pub const fremovexattr = if (@hasDecl(substitutes, "fremovexattr")) substitutes.fremovexattr else std.os.linux.fremovexattr;
		pub const sched_yield = if (@hasDecl(substitutes, "sched_yield")) substitutes.sched_yield else std.os.linux.sched_yield;
		pub const sched_getaffinity = if (@hasDecl(substitutes, "sched_getaffinity")) substitutes.sched_getaffinity else std.os.linux.sched_getaffinity;
		pub const getcpu = if (@hasDecl(substitutes, "getcpu")) substitutes.getcpu else std.os.linux.getcpu;
		pub const sched_getcpu = if (@hasDecl(substitutes, "sched_getcpu")) substitutes.sched_getcpu else std.os.linux.sched_getcpu;
		pub const mbind = if (@hasDecl(substitutes, "mbind")) substitutes.mbind else std.os.linux.mbind;
		pub const sched_setaffinity = if (@hasDecl(substitutes, "sched_setaffinity")) substitutes.sched_setaffinity else std.os.linux.sched_setaffinity;
		pub const epoll_create = if (@hasDecl(substitutes, "epoll_create")) substitutes.epoll_create else std.os.linux.epoll_create;
		pub const epoll_create1 = if (@hasDecl(substitutes, "epoll_create1")) substitutes.epoll_create1 else std.os.linux.epoll_create1;
		pub const epoll_ctl = if (@hasDecl(substitutes, "epoll_ctl")) substitutes.epoll_ctl else std.os.linux.epoll_ctl;
		pub const epoll_wait = if (@hasDecl(substitutes, "epoll_wait")) substitutes.epoll_wait else std.os.linux.epoll_wait;
		pub const epoll_pwait = if (@hasDecl(substitutes, "epoll_pwait")) substitutes.epoll_pwait else std.os.linux.epoll_pwait;
		pub const eventfd = if (@hasDecl(substitutes, "eventfd")) substitutes.eventfd else std.os.linux.eventfd;
		pub const timerfd_create = if (@hasDecl(substitutes, "timerfd_create")) substitutes.timerfd_create else std.os.linux.timerfd_create;
		pub const itimerspec = if (@hasDecl(substitutes, "itimerspec")) substitutes.itimerspec else std.os.linux.itimerspec;
		pub const timerfd_gettime = if (@hasDecl(substitutes, "timerfd_gettime")) substitutes.timerfd_gettime else std.os.linux.timerfd_gettime;
		pub const timerfd_settime = if (@hasDecl(substitutes, "timerfd_settime")) substitutes.timerfd_settime else std.os.linux.timerfd_settime;
		pub const sigevent = if (@hasDecl(substitutes, "sigevent")) substitutes.sigevent else std.os.linux.sigevent;
		pub const SIGEV = if (@hasDecl(substitutes, "SIGEV")) substitutes.SIGEV else std.os.linux.SIGEV;
		pub const timer_t = if (@hasDecl(substitutes, "timer_t")) substitutes.timer_t else std.os.linux.timer_t;
		pub const timer_create = if (@hasDecl(substitutes, "timer_create")) substitutes.timer_create else std.os.linux.timer_create;
		pub const timer_delete = if (@hasDecl(substitutes, "timer_delete")) substitutes.timer_delete else std.os.linux.timer_delete;
		pub const timer_gettime = if (@hasDecl(substitutes, "timer_gettime")) substitutes.timer_gettime else std.os.linux.timer_gettime;
		pub const timer_settime = if (@hasDecl(substitutes, "timer_settime")) substitutes.timer_settime else std.os.linux.timer_settime;
		pub const ITIMER = if (@hasDecl(substitutes, "ITIMER")) substitutes.ITIMER else std.os.linux.ITIMER;
		pub const getitimer = if (@hasDecl(substitutes, "getitimer")) substitutes.getitimer else std.os.linux.getitimer;
		pub const setitimer = if (@hasDecl(substitutes, "setitimer")) substitutes.setitimer else std.os.linux.setitimer;
		pub const unshare = if (@hasDecl(substitutes, "unshare")) substitutes.unshare else std.os.linux.unshare;
		pub const capget = if (@hasDecl(substitutes, "capget")) substitutes.capget else std.os.linux.capget;
		pub const capset = if (@hasDecl(substitutes, "capset")) substitutes.capset else std.os.linux.capset;
		pub const sigaltstack = if (@hasDecl(substitutes, "sigaltstack")) substitutes.sigaltstack else std.os.linux.sigaltstack;
		pub const uname = if (@hasDecl(substitutes, "uname")) substitutes.uname else std.os.linux.uname;
		pub const io_uring_setup = if (@hasDecl(substitutes, "io_uring_setup")) substitutes.io_uring_setup else std.os.linux.io_uring_setup;
		pub const io_uring_enter = if (@hasDecl(substitutes, "io_uring_enter")) substitutes.io_uring_enter else std.os.linux.io_uring_enter;
		pub const io_uring_register = if (@hasDecl(substitutes, "io_uring_register")) substitutes.io_uring_register else std.os.linux.io_uring_register;
		pub const memfd_create = if (@hasDecl(substitutes, "memfd_create")) substitutes.memfd_create else std.os.linux.memfd_create;
		pub const getrusage = if (@hasDecl(substitutes, "getrusage")) substitutes.getrusage else std.os.linux.getrusage;
		pub const tcgetattr = if (@hasDecl(substitutes, "tcgetattr")) substitutes.tcgetattr else std.os.linux.tcgetattr;
		pub const tcsetattr = if (@hasDecl(substitutes, "tcsetattr")) substitutes.tcsetattr else std.os.linux.tcsetattr;
		pub const tcgetpgrp = if (@hasDecl(substitutes, "tcgetpgrp")) substitutes.tcgetpgrp else std.os.linux.tcgetpgrp;
		pub const tcsetpgrp = if (@hasDecl(substitutes, "tcsetpgrp")) substitutes.tcsetpgrp else std.os.linux.tcsetpgrp;
		pub const tcdrain = if (@hasDecl(substitutes, "tcdrain")) substitutes.tcdrain else std.os.linux.tcdrain;
		pub const ioctl = if (@hasDecl(substitutes, "ioctl")) substitutes.ioctl else std.os.linux.ioctl;
		pub const signalfd = if (@hasDecl(substitutes, "signalfd")) substitutes.signalfd else std.os.linux.signalfd;
		pub const copy_file_range = if (@hasDecl(substitutes, "copy_file_range")) substitutes.copy_file_range else std.os.linux.copy_file_range;
		pub const bpf = if (@hasDecl(substitutes, "bpf")) substitutes.bpf else std.os.linux.bpf;
		pub const sync = if (@hasDecl(substitutes, "sync")) substitutes.sync else std.os.linux.sync;
		pub const syncfs = if (@hasDecl(substitutes, "syncfs")) substitutes.syncfs else std.os.linux.syncfs;
		pub const fsync = if (@hasDecl(substitutes, "fsync")) substitutes.fsync else std.os.linux.fsync;
		pub const fdatasync = if (@hasDecl(substitutes, "fdatasync")) substitutes.fdatasync else std.os.linux.fdatasync;
		pub const prctl = if (@hasDecl(substitutes, "prctl")) substitutes.prctl else std.os.linux.prctl;
		pub const getrlimit = if (@hasDecl(substitutes, "getrlimit")) substitutes.getrlimit else std.os.linux.getrlimit;
		pub const setrlimit = if (@hasDecl(substitutes, "setrlimit")) substitutes.setrlimit else std.os.linux.setrlimit;
		pub const prlimit = if (@hasDecl(substitutes, "prlimit")) substitutes.prlimit else std.os.linux.prlimit;
		pub const mincore = if (@hasDecl(substitutes, "mincore")) substitutes.mincore else std.os.linux.mincore;
		pub const madvise = if (@hasDecl(substitutes, "madvise")) substitutes.madvise else std.os.linux.madvise;
		pub const pidfd_open = if (@hasDecl(substitutes, "pidfd_open")) substitutes.pidfd_open else std.os.linux.pidfd_open;
		pub const pidfd_getfd = if (@hasDecl(substitutes, "pidfd_getfd")) substitutes.pidfd_getfd else std.os.linux.pidfd_getfd;
		pub const pidfd_send_signal = if (@hasDecl(substitutes, "pidfd_send_signal")) substitutes.pidfd_send_signal else std.os.linux.pidfd_send_signal;
		pub const process_vm_readv = if (@hasDecl(substitutes, "process_vm_readv")) substitutes.process_vm_readv else std.os.linux.process_vm_readv;
		pub const process_vm_writev = if (@hasDecl(substitutes, "process_vm_writev")) substitutes.process_vm_writev else std.os.linux.process_vm_writev;
		pub const fadvise = if (@hasDecl(substitutes, "fadvise")) substitutes.fadvise else std.os.linux.fadvise;
		pub const perf_event_open = if (@hasDecl(substitutes, "perf_event_open")) substitutes.perf_event_open else std.os.linux.perf_event_open;
		pub const seccomp = if (@hasDecl(substitutes, "seccomp")) substitutes.seccomp else std.os.linux.seccomp;
		pub const ptrace = if (@hasDecl(substitutes, "ptrace")) substitutes.ptrace else std.os.linux.ptrace;
		pub const E = if (@hasDecl(substitutes, "E")) substitutes.E else std.os.linux.E;
		pub const pid_t = if (@hasDecl(substitutes, "pid_t")) substitutes.pid_t else std.os.linux.pid_t;
		pub const fd_t = if (@hasDecl(substitutes, "fd_t")) substitutes.fd_t else std.os.linux.fd_t;
		pub const uid_t = if (@hasDecl(substitutes, "uid_t")) substitutes.uid_t else std.os.linux.uid_t;
		pub const gid_t = if (@hasDecl(substitutes, "gid_t")) substitutes.gid_t else std.os.linux.gid_t;
		pub const clock_t = if (@hasDecl(substitutes, "clock_t")) substitutes.clock_t else std.os.linux.clock_t;
		pub const NAME_MAX = if (@hasDecl(substitutes, "NAME_MAX")) substitutes.NAME_MAX else std.os.linux.NAME_MAX;
		pub const PATH_MAX = if (@hasDecl(substitutes, "PATH_MAX")) substitutes.PATH_MAX else std.os.linux.PATH_MAX;
		pub const IOV_MAX = if (@hasDecl(substitutes, "IOV_MAX")) substitutes.IOV_MAX else std.os.linux.IOV_MAX;
		pub const MAX_ADDR_LEN = if (@hasDecl(substitutes, "MAX_ADDR_LEN")) substitutes.MAX_ADDR_LEN else std.os.linux.MAX_ADDR_LEN;
		pub const STDIN_FILENO = if (@hasDecl(substitutes, "STDIN_FILENO")) substitutes.STDIN_FILENO else std.os.linux.STDIN_FILENO;
		pub const STDOUT_FILENO = if (@hasDecl(substitutes, "STDOUT_FILENO")) substitutes.STDOUT_FILENO else std.os.linux.STDOUT_FILENO;
		pub const STDERR_FILENO = if (@hasDecl(substitutes, "STDERR_FILENO")) substitutes.STDERR_FILENO else std.os.linux.STDERR_FILENO;
		pub const AT = if (@hasDecl(substitutes, "AT")) substitutes.AT else std.os.linux.AT;
		pub const FALLOC = if (@hasDecl(substitutes, "FALLOC")) substitutes.FALLOC else std.os.linux.FALLOC;
		pub const FUTEX = if (@hasDecl(substitutes, "FUTEX")) substitutes.FUTEX else std.os.linux.FUTEX;
		pub const PROT = if (@hasDecl(substitutes, "PROT")) substitutes.PROT else std.os.linux.PROT;
		pub const FD_CLOEXEC = if (@hasDecl(substitutes, "FD_CLOEXEC")) substitutes.FD_CLOEXEC else std.os.linux.FD_CLOEXEC;
		pub const F_OK = if (@hasDecl(substitutes, "F_OK")) substitutes.F_OK else std.os.linux.F_OK;
		pub const X_OK = if (@hasDecl(substitutes, "X_OK")) substitutes.X_OK else std.os.linux.X_OK;
		pub const W_OK = if (@hasDecl(substitutes, "W_OK")) substitutes.W_OK else std.os.linux.W_OK;
		pub const R_OK = if (@hasDecl(substitutes, "R_OK")) substitutes.R_OK else std.os.linux.R_OK;
		pub const W = if (@hasDecl(substitutes, "W")) substitutes.W else std.os.linux.W;
		pub const P = if (@hasDecl(substitutes, "P")) substitutes.P else std.os.linux.P;
		pub const SA = if (@hasDecl(substitutes, "SA")) substitutes.SA else std.os.linux.SA;
		pub const SIG = if (@hasDecl(substitutes, "SIG")) substitutes.SIG else std.os.linux.SIG;
		pub const kernel_rwf = if (@hasDecl(substitutes, "kernel_rwf")) substitutes.kernel_rwf else std.os.linux.kernel_rwf;
		pub const RWF = if (@hasDecl(substitutes, "RWF")) substitutes.RWF else std.os.linux.RWF;
		pub const SEEK = if (@hasDecl(substitutes, "SEEK")) substitutes.SEEK else std.os.linux.SEEK;
		pub const SHUT = if (@hasDecl(substitutes, "SHUT")) substitutes.SHUT else std.os.linux.SHUT;
		pub const SOCK = if (@hasDecl(substitutes, "SOCK")) substitutes.SOCK else std.os.linux.SOCK;
		pub const TCP = if (@hasDecl(substitutes, "TCP")) substitutes.TCP else std.os.linux.TCP;
		pub const PF = if (@hasDecl(substitutes, "PF")) substitutes.PF else std.os.linux.PF;
		pub const AF = if (@hasDecl(substitutes, "AF")) substitutes.AF else std.os.linux.AF;
		pub const SO = if (@hasDecl(substitutes, "SO")) substitutes.SO else std.os.linux.SO;
		pub const SCM = if (@hasDecl(substitutes, "SCM")) substitutes.SCM else std.os.linux.SCM;
		pub const SOL = if (@hasDecl(substitutes, "SOL")) substitutes.SOL else std.os.linux.SOL;
		pub const SOMAXCONN = if (@hasDecl(substitutes, "SOMAXCONN")) substitutes.SOMAXCONN else std.os.linux.SOMAXCONN;
		pub const IP = if (@hasDecl(substitutes, "IP")) substitutes.IP else std.os.linux.IP;
		pub const IPV6 = if (@hasDecl(substitutes, "IPV6")) substitutes.IPV6 else std.os.linux.IPV6;
		pub const MSG = if (@hasDecl(substitutes, "MSG")) substitutes.MSG else std.os.linux.MSG;
		pub const DT = if (@hasDecl(substitutes, "DT")) substitutes.DT else std.os.linux.DT;
		pub const T = if (@hasDecl(substitutes, "T")) substitutes.T else std.os.linux.T;
		pub const EPOLL = if (@hasDecl(substitutes, "EPOLL")) substitutes.EPOLL else std.os.linux.EPOLL;
		pub const CLOCK = if (@hasDecl(substitutes, "CLOCK")) substitutes.CLOCK else std.os.linux.CLOCK;
		pub const CSIGNAL = if (@hasDecl(substitutes, "CSIGNAL")) substitutes.CSIGNAL else std.os.linux.CSIGNAL;
		pub const CLONE = if (@hasDecl(substitutes, "CLONE")) substitutes.CLONE else std.os.linux.CLONE;
		pub const EFD = if (@hasDecl(substitutes, "EFD")) substitutes.EFD else std.os.linux.EFD;
		pub const MS = if (@hasDecl(substitutes, "MS")) substitutes.MS else std.os.linux.MS;
		pub const MNT = if (@hasDecl(substitutes, "MNT")) substitutes.MNT else std.os.linux.MNT;
		pub const UMOUNT_NOFOLLOW = if (@hasDecl(substitutes, "UMOUNT_NOFOLLOW")) substitutes.UMOUNT_NOFOLLOW else std.os.linux.UMOUNT_NOFOLLOW;
		pub const IN = if (@hasDecl(substitutes, "IN")) substitutes.IN else std.os.linux.IN;
		pub const S = if (@hasDecl(substitutes, "S")) substitutes.S else std.os.linux.S;
		pub const UTIME = if (@hasDecl(substitutes, "UTIME")) substitutes.UTIME else std.os.linux.UTIME;
		pub const TFD = if (@hasDecl(substitutes, "TFD")) substitutes.TFD else std.os.linux.TFD;
		pub const winsize = if (@hasDecl(substitutes, "winsize")) substitutes.winsize else std.os.linux.winsize;
		pub const NSIG = if (@hasDecl(substitutes, "NSIG")) substitutes.NSIG else std.os.linux.NSIG;
		pub const sigset_t = if (@hasDecl(substitutes, "sigset_t")) substitutes.sigset_t else std.os.linux.sigset_t;
		pub const all_mask = if (@hasDecl(substitutes, "all_mask")) substitutes.all_mask else std.os.linux.all_mask;
		pub const app_mask = if (@hasDecl(substitutes, "app_mask")) substitutes.app_mask else std.os.linux.app_mask;
		pub const k_sigaction = if (@hasDecl(substitutes, "k_sigaction")) substitutes.k_sigaction else std.os.linux.k_sigaction;
		pub const Sigaction = if (@hasDecl(substitutes, "Sigaction")) substitutes.Sigaction else std.os.linux.Sigaction;
		pub const empty_sigset = if (@hasDecl(substitutes, "empty_sigset")) substitutes.empty_sigset else std.os.linux.empty_sigset;
		pub const SFD = if (@hasDecl(substitutes, "SFD")) substitutes.SFD else std.os.linux.SFD;
		pub const signalfd_siginfo = if (@hasDecl(substitutes, "signalfd_siginfo")) substitutes.signalfd_siginfo else std.os.linux.signalfd_siginfo;
		pub const in_port_t = if (@hasDecl(substitutes, "in_port_t")) substitutes.in_port_t else std.os.linux.in_port_t;
		pub const sa_family_t = if (@hasDecl(substitutes, "sa_family_t")) substitutes.sa_family_t else std.os.linux.sa_family_t;
		pub const socklen_t = if (@hasDecl(substitutes, "socklen_t")) substitutes.socklen_t else std.os.linux.socklen_t;
		pub const sockaddr = if (@hasDecl(substitutes, "sockaddr")) substitutes.sockaddr else std.os.linux.sockaddr;
		pub const mmsghdr = if (@hasDecl(substitutes, "mmsghdr")) substitutes.mmsghdr else std.os.linux.mmsghdr;
		pub const mmsghdr_const = if (@hasDecl(substitutes, "mmsghdr_const")) substitutes.mmsghdr_const else std.os.linux.mmsghdr_const;
		pub const epoll_data = if (@hasDecl(substitutes, "epoll_data")) substitutes.epoll_data else std.os.linux.epoll_data;
		pub const epoll_event = if (@hasDecl(substitutes, "epoll_event")) substitutes.epoll_event else std.os.linux.epoll_event;
		pub const VFS_CAP_REVISION_MASK = if (@hasDecl(substitutes, "VFS_CAP_REVISION_MASK")) substitutes.VFS_CAP_REVISION_MASK else std.os.linux.VFS_CAP_REVISION_MASK;
		pub const VFS_CAP_REVISION_SHIFT = if (@hasDecl(substitutes, "VFS_CAP_REVISION_SHIFT")) substitutes.VFS_CAP_REVISION_SHIFT else std.os.linux.VFS_CAP_REVISION_SHIFT;
		pub const VFS_CAP_FLAGS_MASK = if (@hasDecl(substitutes, "VFS_CAP_FLAGS_MASK")) substitutes.VFS_CAP_FLAGS_MASK else std.os.linux.VFS_CAP_FLAGS_MASK;
		pub const VFS_CAP_FLAGS_EFFECTIVE = if (@hasDecl(substitutes, "VFS_CAP_FLAGS_EFFECTIVE")) substitutes.VFS_CAP_FLAGS_EFFECTIVE else std.os.linux.VFS_CAP_FLAGS_EFFECTIVE;
		pub const VFS_CAP_REVISION_1 = if (@hasDecl(substitutes, "VFS_CAP_REVISION_1")) substitutes.VFS_CAP_REVISION_1 else std.os.linux.VFS_CAP_REVISION_1;
		pub const VFS_CAP_U32_1 = if (@hasDecl(substitutes, "VFS_CAP_U32_1")) substitutes.VFS_CAP_U32_1 else std.os.linux.VFS_CAP_U32_1;
		pub const XATTR_CAPS_SZ_1 = if (@hasDecl(substitutes, "XATTR_CAPS_SZ_1")) substitutes.XATTR_CAPS_SZ_1 else std.os.linux.XATTR_CAPS_SZ_1;
		pub const VFS_CAP_REVISION_2 = if (@hasDecl(substitutes, "VFS_CAP_REVISION_2")) substitutes.VFS_CAP_REVISION_2 else std.os.linux.VFS_CAP_REVISION_2;
		pub const VFS_CAP_U32_2 = if (@hasDecl(substitutes, "VFS_CAP_U32_2")) substitutes.VFS_CAP_U32_2 else std.os.linux.VFS_CAP_U32_2;
		pub const XATTR_CAPS_SZ_2 = if (@hasDecl(substitutes, "XATTR_CAPS_SZ_2")) substitutes.XATTR_CAPS_SZ_2 else std.os.linux.XATTR_CAPS_SZ_2;
		pub const XATTR_CAPS_SZ = if (@hasDecl(substitutes, "XATTR_CAPS_SZ")) substitutes.XATTR_CAPS_SZ else std.os.linux.XATTR_CAPS_SZ;
		pub const VFS_CAP_U32 = if (@hasDecl(substitutes, "VFS_CAP_U32")) substitutes.VFS_CAP_U32 else std.os.linux.VFS_CAP_U32;
		pub const VFS_CAP_REVISION = if (@hasDecl(substitutes, "VFS_CAP_REVISION")) substitutes.VFS_CAP_REVISION else std.os.linux.VFS_CAP_REVISION;
		pub const vfs_cap_data = if (@hasDecl(substitutes, "vfs_cap_data")) substitutes.vfs_cap_data else std.os.linux.vfs_cap_data;
		pub const CAP = if (@hasDecl(substitutes, "CAP")) substitutes.CAP else std.os.linux.CAP;
		pub const cap_t = if (@hasDecl(substitutes, "cap_t")) substitutes.cap_t else std.os.linux.cap_t;
		pub const cap_user_header_t = if (@hasDecl(substitutes, "cap_user_header_t")) substitutes.cap_user_header_t else std.os.linux.cap_user_header_t;
		pub const cap_user_data_t = if (@hasDecl(substitutes, "cap_user_data_t")) substitutes.cap_user_data_t else std.os.linux.cap_user_data_t;
		pub const inotify_event = if (@hasDecl(substitutes, "inotify_event")) substitutes.inotify_event else std.os.linux.inotify_event;
		pub const dirent64 = if (@hasDecl(substitutes, "dirent64")) substitutes.dirent64 else std.os.linux.dirent64;
		pub const dl_phdr_info = if (@hasDecl(substitutes, "dl_phdr_info")) substitutes.dl_phdr_info else std.os.linux.dl_phdr_info;
		pub const CPU_SETSIZE = if (@hasDecl(substitutes, "CPU_SETSIZE")) substitutes.CPU_SETSIZE else std.os.linux.CPU_SETSIZE;
		pub const cpu_set_t = if (@hasDecl(substitutes, "cpu_set_t")) substitutes.cpu_set_t else std.os.linux.cpu_set_t;
		pub const cpu_count_t = if (@hasDecl(substitutes, "cpu_count_t")) substitutes.cpu_count_t else std.os.linux.cpu_count_t;
		pub const CPU_COUNT = if (@hasDecl(substitutes, "CPU_COUNT")) substitutes.CPU_COUNT else std.os.linux.CPU_COUNT;
		pub const CPU_ZERO = if (@hasDecl(substitutes, "CPU_ZERO")) substitutes.CPU_ZERO else std.os.linux.CPU_ZERO;
		pub const CPU_SET = if (@hasDecl(substitutes, "CPU_SET")) substitutes.CPU_SET else std.os.linux.CPU_SET;
		pub const CPU_ISSET = if (@hasDecl(substitutes, "CPU_ISSET")) substitutes.CPU_ISSET else std.os.linux.CPU_ISSET;
		pub const CPU_CLR = if (@hasDecl(substitutes, "CPU_CLR")) substitutes.CPU_CLR else std.os.linux.CPU_CLR;
		pub const MINSIGSTKSZ = if (@hasDecl(substitutes, "MINSIGSTKSZ")) substitutes.MINSIGSTKSZ else std.os.linux.MINSIGSTKSZ;
		pub const SIGSTKSZ = if (@hasDecl(substitutes, "SIGSTKSZ")) substitutes.SIGSTKSZ else std.os.linux.SIGSTKSZ;
		pub const SS_ONSTACK = if (@hasDecl(substitutes, "SS_ONSTACK")) substitutes.SS_ONSTACK else std.os.linux.SS_ONSTACK;
		pub const SS_DISABLE = if (@hasDecl(substitutes, "SS_DISABLE")) substitutes.SS_DISABLE else std.os.linux.SS_DISABLE;
		pub const SS_AUTODISARM = if (@hasDecl(substitutes, "SS_AUTODISARM")) substitutes.SS_AUTODISARM else std.os.linux.SS_AUTODISARM;
		pub const stack_t = if (@hasDecl(substitutes, "stack_t")) substitutes.stack_t else std.os.linux.stack_t;
		pub const sigval = if (@hasDecl(substitutes, "sigval")) substitutes.sigval else std.os.linux.sigval;
		pub const siginfo_t = if (@hasDecl(substitutes, "siginfo_t")) substitutes.siginfo_t else std.os.linux.siginfo_t;
		pub const io_uring_params = if (@hasDecl(substitutes, "io_uring_params")) substitutes.io_uring_params else std.os.linux.io_uring_params;
		pub const IORING_FEAT_SINGLE_MMAP = if (@hasDecl(substitutes, "IORING_FEAT_SINGLE_MMAP")) substitutes.IORING_FEAT_SINGLE_MMAP else std.os.linux.IORING_FEAT_SINGLE_MMAP;
		pub const IORING_FEAT_NODROP = if (@hasDecl(substitutes, "IORING_FEAT_NODROP")) substitutes.IORING_FEAT_NODROP else std.os.linux.IORING_FEAT_NODROP;
		pub const IORING_FEAT_SUBMIT_STABLE = if (@hasDecl(substitutes, "IORING_FEAT_SUBMIT_STABLE")) substitutes.IORING_FEAT_SUBMIT_STABLE else std.os.linux.IORING_FEAT_SUBMIT_STABLE;
		pub const IORING_FEAT_RW_CUR_POS = if (@hasDecl(substitutes, "IORING_FEAT_RW_CUR_POS")) substitutes.IORING_FEAT_RW_CUR_POS else std.os.linux.IORING_FEAT_RW_CUR_POS;
		pub const IORING_FEAT_CUR_PERSONALITY = if (@hasDecl(substitutes, "IORING_FEAT_CUR_PERSONALITY")) substitutes.IORING_FEAT_CUR_PERSONALITY else std.os.linux.IORING_FEAT_CUR_PERSONALITY;
		pub const IORING_FEAT_FAST_POLL = if (@hasDecl(substitutes, "IORING_FEAT_FAST_POLL")) substitutes.IORING_FEAT_FAST_POLL else std.os.linux.IORING_FEAT_FAST_POLL;
		pub const IORING_FEAT_POLL_32BITS = if (@hasDecl(substitutes, "IORING_FEAT_POLL_32BITS")) substitutes.IORING_FEAT_POLL_32BITS else std.os.linux.IORING_FEAT_POLL_32BITS;
		pub const IORING_FEAT_SQPOLL_NONFIXED = if (@hasDecl(substitutes, "IORING_FEAT_SQPOLL_NONFIXED")) substitutes.IORING_FEAT_SQPOLL_NONFIXED else std.os.linux.IORING_FEAT_SQPOLL_NONFIXED;
		pub const IORING_FEAT_EXT_ARG = if (@hasDecl(substitutes, "IORING_FEAT_EXT_ARG")) substitutes.IORING_FEAT_EXT_ARG else std.os.linux.IORING_FEAT_EXT_ARG;
		pub const IORING_FEAT_NATIVE_WORKERS = if (@hasDecl(substitutes, "IORING_FEAT_NATIVE_WORKERS")) substitutes.IORING_FEAT_NATIVE_WORKERS else std.os.linux.IORING_FEAT_NATIVE_WORKERS;
		pub const IORING_FEAT_RSRC_TAGS = if (@hasDecl(substitutes, "IORING_FEAT_RSRC_TAGS")) substitutes.IORING_FEAT_RSRC_TAGS else std.os.linux.IORING_FEAT_RSRC_TAGS;
		pub const IORING_FEAT_CQE_SKIP = if (@hasDecl(substitutes, "IORING_FEAT_CQE_SKIP")) substitutes.IORING_FEAT_CQE_SKIP else std.os.linux.IORING_FEAT_CQE_SKIP;
		pub const IORING_FEAT_LINKED_FILE = if (@hasDecl(substitutes, "IORING_FEAT_LINKED_FILE")) substitutes.IORING_FEAT_LINKED_FILE else std.os.linux.IORING_FEAT_LINKED_FILE;
		pub const IORING_SETUP_IOPOLL = if (@hasDecl(substitutes, "IORING_SETUP_IOPOLL")) substitutes.IORING_SETUP_IOPOLL else std.os.linux.IORING_SETUP_IOPOLL;
		pub const IORING_SETUP_SQPOLL = if (@hasDecl(substitutes, "IORING_SETUP_SQPOLL")) substitutes.IORING_SETUP_SQPOLL else std.os.linux.IORING_SETUP_SQPOLL;
		pub const IORING_SETUP_SQ_AFF = if (@hasDecl(substitutes, "IORING_SETUP_SQ_AFF")) substitutes.IORING_SETUP_SQ_AFF else std.os.linux.IORING_SETUP_SQ_AFF;
		pub const IORING_SETUP_CQSIZE = if (@hasDecl(substitutes, "IORING_SETUP_CQSIZE")) substitutes.IORING_SETUP_CQSIZE else std.os.linux.IORING_SETUP_CQSIZE;
		pub const IORING_SETUP_CLAMP = if (@hasDecl(substitutes, "IORING_SETUP_CLAMP")) substitutes.IORING_SETUP_CLAMP else std.os.linux.IORING_SETUP_CLAMP;
		pub const IORING_SETUP_ATTACH_WQ = if (@hasDecl(substitutes, "IORING_SETUP_ATTACH_WQ")) substitutes.IORING_SETUP_ATTACH_WQ else std.os.linux.IORING_SETUP_ATTACH_WQ;
		pub const IORING_SETUP_R_DISABLED = if (@hasDecl(substitutes, "IORING_SETUP_R_DISABLED")) substitutes.IORING_SETUP_R_DISABLED else std.os.linux.IORING_SETUP_R_DISABLED;
		pub const IORING_SETUP_SUBMIT_ALL = if (@hasDecl(substitutes, "IORING_SETUP_SUBMIT_ALL")) substitutes.IORING_SETUP_SUBMIT_ALL else std.os.linux.IORING_SETUP_SUBMIT_ALL;
		pub const IORING_SETUP_COOP_TASKRUN = if (@hasDecl(substitutes, "IORING_SETUP_COOP_TASKRUN")) substitutes.IORING_SETUP_COOP_TASKRUN else std.os.linux.IORING_SETUP_COOP_TASKRUN;
		pub const IORING_SETUP_TASKRUN_FLAG = if (@hasDecl(substitutes, "IORING_SETUP_TASKRUN_FLAG")) substitutes.IORING_SETUP_TASKRUN_FLAG else std.os.linux.IORING_SETUP_TASKRUN_FLAG;
		pub const IORING_SETUP_SQE128 = if (@hasDecl(substitutes, "IORING_SETUP_SQE128")) substitutes.IORING_SETUP_SQE128 else std.os.linux.IORING_SETUP_SQE128;
		pub const IORING_SETUP_CQE32 = if (@hasDecl(substitutes, "IORING_SETUP_CQE32")) substitutes.IORING_SETUP_CQE32 else std.os.linux.IORING_SETUP_CQE32;
		pub const io_sqring_offsets = if (@hasDecl(substitutes, "io_sqring_offsets")) substitutes.io_sqring_offsets else std.os.linux.io_sqring_offsets;
		pub const IORING_SQ_NEED_WAKEUP = if (@hasDecl(substitutes, "IORING_SQ_NEED_WAKEUP")) substitutes.IORING_SQ_NEED_WAKEUP else std.os.linux.IORING_SQ_NEED_WAKEUP;
		pub const IORING_SQ_CQ_OVERFLOW = if (@hasDecl(substitutes, "IORING_SQ_CQ_OVERFLOW")) substitutes.IORING_SQ_CQ_OVERFLOW else std.os.linux.IORING_SQ_CQ_OVERFLOW;
		pub const IORING_SQ_TASKRUN = if (@hasDecl(substitutes, "IORING_SQ_TASKRUN")) substitutes.IORING_SQ_TASKRUN else std.os.linux.IORING_SQ_TASKRUN;
		pub const io_cqring_offsets = if (@hasDecl(substitutes, "io_cqring_offsets")) substitutes.io_cqring_offsets else std.os.linux.io_cqring_offsets;
		pub const io_uring_sqe = if (@hasDecl(substitutes, "io_uring_sqe")) substitutes.io_uring_sqe else std.os.linux.io_uring_sqe;
		pub const IOSQE_BIT = if (@hasDecl(substitutes, "IOSQE_BIT")) substitutes.IOSQE_BIT else std.os.linux.IOSQE_BIT;
		pub const IOSQE_FIXED_FILE = if (@hasDecl(substitutes, "IOSQE_FIXED_FILE")) substitutes.IOSQE_FIXED_FILE else std.os.linux.IOSQE_FIXED_FILE;
		pub const IOSQE_IO_DRAIN = if (@hasDecl(substitutes, "IOSQE_IO_DRAIN")) substitutes.IOSQE_IO_DRAIN else std.os.linux.IOSQE_IO_DRAIN;
		pub const IOSQE_IO_LINK = if (@hasDecl(substitutes, "IOSQE_IO_LINK")) substitutes.IOSQE_IO_LINK else std.os.linux.IOSQE_IO_LINK;
		pub const IOSQE_IO_HARDLINK = if (@hasDecl(substitutes, "IOSQE_IO_HARDLINK")) substitutes.IOSQE_IO_HARDLINK else std.os.linux.IOSQE_IO_HARDLINK;
		pub const IOSQE_ASYNC = if (@hasDecl(substitutes, "IOSQE_ASYNC")) substitutes.IOSQE_ASYNC else std.os.linux.IOSQE_ASYNC;
		pub const IOSQE_BUFFER_SELECT = if (@hasDecl(substitutes, "IOSQE_BUFFER_SELECT")) substitutes.IOSQE_BUFFER_SELECT else std.os.linux.IOSQE_BUFFER_SELECT;
		pub const IOSQE_CQE_SKIP_SUCCESS = if (@hasDecl(substitutes, "IOSQE_CQE_SKIP_SUCCESS")) substitutes.IOSQE_CQE_SKIP_SUCCESS else std.os.linux.IOSQE_CQE_SKIP_SUCCESS;
		pub const IORING_OP = if (@hasDecl(substitutes, "IORING_OP")) substitutes.IORING_OP else std.os.linux.IORING_OP;
		pub const IORING_FSYNC_DATASYNC = if (@hasDecl(substitutes, "IORING_FSYNC_DATASYNC")) substitutes.IORING_FSYNC_DATASYNC else std.os.linux.IORING_FSYNC_DATASYNC;
		pub const IORING_TIMEOUT_ABS = if (@hasDecl(substitutes, "IORING_TIMEOUT_ABS")) substitutes.IORING_TIMEOUT_ABS else std.os.linux.IORING_TIMEOUT_ABS;
		pub const IORING_TIMEOUT_UPDATE = if (@hasDecl(substitutes, "IORING_TIMEOUT_UPDATE")) substitutes.IORING_TIMEOUT_UPDATE else std.os.linux.IORING_TIMEOUT_UPDATE;
		pub const IORING_TIMEOUT_BOOTTIME = if (@hasDecl(substitutes, "IORING_TIMEOUT_BOOTTIME")) substitutes.IORING_TIMEOUT_BOOTTIME else std.os.linux.IORING_TIMEOUT_BOOTTIME;
		pub const IORING_TIMEOUT_REALTIME = if (@hasDecl(substitutes, "IORING_TIMEOUT_REALTIME")) substitutes.IORING_TIMEOUT_REALTIME else std.os.linux.IORING_TIMEOUT_REALTIME;
		pub const IORING_LINK_TIMEOUT_UPDATE = if (@hasDecl(substitutes, "IORING_LINK_TIMEOUT_UPDATE")) substitutes.IORING_LINK_TIMEOUT_UPDATE else std.os.linux.IORING_LINK_TIMEOUT_UPDATE;
		pub const IORING_TIMEOUT_ETIME_SUCCESS = if (@hasDecl(substitutes, "IORING_TIMEOUT_ETIME_SUCCESS")) substitutes.IORING_TIMEOUT_ETIME_SUCCESS else std.os.linux.IORING_TIMEOUT_ETIME_SUCCESS;
		pub const IORING_TIMEOUT_CLOCK_MASK = if (@hasDecl(substitutes, "IORING_TIMEOUT_CLOCK_MASK")) substitutes.IORING_TIMEOUT_CLOCK_MASK else std.os.linux.IORING_TIMEOUT_CLOCK_MASK;
		pub const IORING_TIMEOUT_UPDATE_MASK = if (@hasDecl(substitutes, "IORING_TIMEOUT_UPDATE_MASK")) substitutes.IORING_TIMEOUT_UPDATE_MASK else std.os.linux.IORING_TIMEOUT_UPDATE_MASK;
		pub const IORING_SPLICE_F_FD_IN_FIXED = if (@hasDecl(substitutes, "IORING_SPLICE_F_FD_IN_FIXED")) substitutes.IORING_SPLICE_F_FD_IN_FIXED else std.os.linux.IORING_SPLICE_F_FD_IN_FIXED;
		pub const IORING_POLL_ADD_MULTI = if (@hasDecl(substitutes, "IORING_POLL_ADD_MULTI")) substitutes.IORING_POLL_ADD_MULTI else std.os.linux.IORING_POLL_ADD_MULTI;
		pub const IORING_POLL_UPDATE_EVENTS = if (@hasDecl(substitutes, "IORING_POLL_UPDATE_EVENTS")) substitutes.IORING_POLL_UPDATE_EVENTS else std.os.linux.IORING_POLL_UPDATE_EVENTS;
		pub const IORING_POLL_UPDATE_USER_DATA = if (@hasDecl(substitutes, "IORING_POLL_UPDATE_USER_DATA")) substitutes.IORING_POLL_UPDATE_USER_DATA else std.os.linux.IORING_POLL_UPDATE_USER_DATA;
		pub const IORING_ASYNC_CANCEL_ALL = if (@hasDecl(substitutes, "IORING_ASYNC_CANCEL_ALL")) substitutes.IORING_ASYNC_CANCEL_ALL else std.os.linux.IORING_ASYNC_CANCEL_ALL;
		pub const IORING_ASYNC_CANCEL_FD = if (@hasDecl(substitutes, "IORING_ASYNC_CANCEL_FD")) substitutes.IORING_ASYNC_CANCEL_FD else std.os.linux.IORING_ASYNC_CANCEL_FD;
		pub const IORING_ASYNC_CANCEL_ANY = if (@hasDecl(substitutes, "IORING_ASYNC_CANCEL_ANY")) substitutes.IORING_ASYNC_CANCEL_ANY else std.os.linux.IORING_ASYNC_CANCEL_ANY;
		pub const IORING_RECVSEND_POLL_FIRST = if (@hasDecl(substitutes, "IORING_RECVSEND_POLL_FIRST")) substitutes.IORING_RECVSEND_POLL_FIRST else std.os.linux.IORING_RECVSEND_POLL_FIRST;
		pub const IORING_RECV_MULTISHOT = if (@hasDecl(substitutes, "IORING_RECV_MULTISHOT")) substitutes.IORING_RECV_MULTISHOT else std.os.linux.IORING_RECV_MULTISHOT;
		pub const IORING_ACCEPT_MULTISHOT = if (@hasDecl(substitutes, "IORING_ACCEPT_MULTISHOT")) substitutes.IORING_ACCEPT_MULTISHOT else std.os.linux.IORING_ACCEPT_MULTISHOT;
		pub const io_uring_cqe = if (@hasDecl(substitutes, "io_uring_cqe")) substitutes.io_uring_cqe else std.os.linux.io_uring_cqe;
		pub const IORING_CQE_F_BUFFER = if (@hasDecl(substitutes, "IORING_CQE_F_BUFFER")) substitutes.IORING_CQE_F_BUFFER else std.os.linux.IORING_CQE_F_BUFFER;
		pub const IORING_CQE_F_MORE = if (@hasDecl(substitutes, "IORING_CQE_F_MORE")) substitutes.IORING_CQE_F_MORE else std.os.linux.IORING_CQE_F_MORE;
		pub const IORING_CQE_F_SOCK_NONEMPTY = if (@hasDecl(substitutes, "IORING_CQE_F_SOCK_NONEMPTY")) substitutes.IORING_CQE_F_SOCK_NONEMPTY else std.os.linux.IORING_CQE_F_SOCK_NONEMPTY;
		pub const IORING_CQE_F_NOTIF = if (@hasDecl(substitutes, "IORING_CQE_F_NOTIF")) substitutes.IORING_CQE_F_NOTIF else std.os.linux.IORING_CQE_F_NOTIF;
		pub const IORING_OFF_SQ_RING = if (@hasDecl(substitutes, "IORING_OFF_SQ_RING")) substitutes.IORING_OFF_SQ_RING else std.os.linux.IORING_OFF_SQ_RING;
		pub const IORING_OFF_CQ_RING = if (@hasDecl(substitutes, "IORING_OFF_CQ_RING")) substitutes.IORING_OFF_CQ_RING else std.os.linux.IORING_OFF_CQ_RING;
		pub const IORING_OFF_SQES = if (@hasDecl(substitutes, "IORING_OFF_SQES")) substitutes.IORING_OFF_SQES else std.os.linux.IORING_OFF_SQES;
		pub const IORING_ENTER_GETEVENTS = if (@hasDecl(substitutes, "IORING_ENTER_GETEVENTS")) substitutes.IORING_ENTER_GETEVENTS else std.os.linux.IORING_ENTER_GETEVENTS;
		pub const IORING_ENTER_SQ_WAKEUP = if (@hasDecl(substitutes, "IORING_ENTER_SQ_WAKEUP")) substitutes.IORING_ENTER_SQ_WAKEUP else std.os.linux.IORING_ENTER_SQ_WAKEUP;
		pub const IORING_ENTER_SQ_WAIT = if (@hasDecl(substitutes, "IORING_ENTER_SQ_WAIT")) substitutes.IORING_ENTER_SQ_WAIT else std.os.linux.IORING_ENTER_SQ_WAIT;
		pub const IORING_ENTER_EXT_ARG = if (@hasDecl(substitutes, "IORING_ENTER_EXT_ARG")) substitutes.IORING_ENTER_EXT_ARG else std.os.linux.IORING_ENTER_EXT_ARG;
		pub const IORING_ENTER_REGISTERED_RING = if (@hasDecl(substitutes, "IORING_ENTER_REGISTERED_RING")) substitutes.IORING_ENTER_REGISTERED_RING else std.os.linux.IORING_ENTER_REGISTERED_RING;
		pub const IORING_REGISTER = if (@hasDecl(substitutes, "IORING_REGISTER")) substitutes.IORING_REGISTER else std.os.linux.IORING_REGISTER;
		pub const io_uring_files_update = if (@hasDecl(substitutes, "io_uring_files_update")) substitutes.io_uring_files_update else std.os.linux.io_uring_files_update;
		pub const IO_URING_OP_SUPPORTED = if (@hasDecl(substitutes, "IO_URING_OP_SUPPORTED")) substitutes.IO_URING_OP_SUPPORTED else std.os.linux.IO_URING_OP_SUPPORTED;
		pub const io_uring_probe_op = if (@hasDecl(substitutes, "io_uring_probe_op")) substitutes.io_uring_probe_op else std.os.linux.io_uring_probe_op;
		pub const io_uring_probe = if (@hasDecl(substitutes, "io_uring_probe")) substitutes.io_uring_probe else std.os.linux.io_uring_probe;
		pub const io_uring_restriction = if (@hasDecl(substitutes, "io_uring_restriction")) substitutes.io_uring_restriction else std.os.linux.io_uring_restriction;
		pub const IORING_RESTRICTION = if (@hasDecl(substitutes, "IORING_RESTRICTION")) substitutes.IORING_RESTRICTION else std.os.linux.IORING_RESTRICTION;
		pub const utsname = if (@hasDecl(substitutes, "utsname")) substitutes.utsname else std.os.linux.utsname;
		pub const HOST_NAME_MAX = if (@hasDecl(substitutes, "HOST_NAME_MAX")) substitutes.HOST_NAME_MAX else std.os.linux.HOST_NAME_MAX;
		pub const STATX_TYPE = if (@hasDecl(substitutes, "STATX_TYPE")) substitutes.STATX_TYPE else std.os.linux.STATX_TYPE;
		pub const STATX_MODE = if (@hasDecl(substitutes, "STATX_MODE")) substitutes.STATX_MODE else std.os.linux.STATX_MODE;
		pub const STATX_NLINK = if (@hasDecl(substitutes, "STATX_NLINK")) substitutes.STATX_NLINK else std.os.linux.STATX_NLINK;
		pub const STATX_UID = if (@hasDecl(substitutes, "STATX_UID")) substitutes.STATX_UID else std.os.linux.STATX_UID;
		pub const STATX_GID = if (@hasDecl(substitutes, "STATX_GID")) substitutes.STATX_GID else std.os.linux.STATX_GID;
		pub const STATX_ATIME = if (@hasDecl(substitutes, "STATX_ATIME")) substitutes.STATX_ATIME else std.os.linux.STATX_ATIME;
		pub const STATX_MTIME = if (@hasDecl(substitutes, "STATX_MTIME")) substitutes.STATX_MTIME else std.os.linux.STATX_MTIME;
		pub const STATX_CTIME = if (@hasDecl(substitutes, "STATX_CTIME")) substitutes.STATX_CTIME else std.os.linux.STATX_CTIME;
		pub const STATX_INO = if (@hasDecl(substitutes, "STATX_INO")) substitutes.STATX_INO else std.os.linux.STATX_INO;
		pub const STATX_SIZE = if (@hasDecl(substitutes, "STATX_SIZE")) substitutes.STATX_SIZE else std.os.linux.STATX_SIZE;
		pub const STATX_BLOCKS = if (@hasDecl(substitutes, "STATX_BLOCKS")) substitutes.STATX_BLOCKS else std.os.linux.STATX_BLOCKS;
		pub const STATX_BASIC_STATS = if (@hasDecl(substitutes, "STATX_BASIC_STATS")) substitutes.STATX_BASIC_STATS else std.os.linux.STATX_BASIC_STATS;
		pub const STATX_BTIME = if (@hasDecl(substitutes, "STATX_BTIME")) substitutes.STATX_BTIME else std.os.linux.STATX_BTIME;
		pub const STATX_ATTR_COMPRESSED = if (@hasDecl(substitutes, "STATX_ATTR_COMPRESSED")) substitutes.STATX_ATTR_COMPRESSED else std.os.linux.STATX_ATTR_COMPRESSED;
		pub const STATX_ATTR_IMMUTABLE = if (@hasDecl(substitutes, "STATX_ATTR_IMMUTABLE")) substitutes.STATX_ATTR_IMMUTABLE else std.os.linux.STATX_ATTR_IMMUTABLE;
		pub const STATX_ATTR_APPEND = if (@hasDecl(substitutes, "STATX_ATTR_APPEND")) substitutes.STATX_ATTR_APPEND else std.os.linux.STATX_ATTR_APPEND;
		pub const STATX_ATTR_NODUMP = if (@hasDecl(substitutes, "STATX_ATTR_NODUMP")) substitutes.STATX_ATTR_NODUMP else std.os.linux.STATX_ATTR_NODUMP;
		pub const STATX_ATTR_ENCRYPTED = if (@hasDecl(substitutes, "STATX_ATTR_ENCRYPTED")) substitutes.STATX_ATTR_ENCRYPTED else std.os.linux.STATX_ATTR_ENCRYPTED;
		pub const STATX_ATTR_AUTOMOUNT = if (@hasDecl(substitutes, "STATX_ATTR_AUTOMOUNT")) substitutes.STATX_ATTR_AUTOMOUNT else std.os.linux.STATX_ATTR_AUTOMOUNT;
		pub const statx_timestamp = if (@hasDecl(substitutes, "statx_timestamp")) substitutes.statx_timestamp else std.os.linux.statx_timestamp;
		pub const Statx = if (@hasDecl(substitutes, "Statx")) substitutes.Statx else std.os.linux.Statx;
		pub const addrinfo = if (@hasDecl(substitutes, "addrinfo")) substitutes.addrinfo else std.os.linux.addrinfo;
		pub const IPPORT_RESERVED = if (@hasDecl(substitutes, "IPPORT_RESERVED")) substitutes.IPPORT_RESERVED else std.os.linux.IPPORT_RESERVED;
		pub const IPPROTO = if (@hasDecl(substitutes, "IPPROTO")) substitutes.IPPROTO else std.os.linux.IPPROTO;
		pub const RR = if (@hasDecl(substitutes, "RR")) substitutes.RR else std.os.linux.RR;
		pub const tcp_repair_opt = if (@hasDecl(substitutes, "tcp_repair_opt")) substitutes.tcp_repair_opt else std.os.linux.tcp_repair_opt;
		pub const tcp_repair_window = if (@hasDecl(substitutes, "tcp_repair_window")) substitutes.tcp_repair_window else std.os.linux.tcp_repair_window;
		pub const TcpRepairOption = if (@hasDecl(substitutes, "TcpRepairOption")) substitutes.TcpRepairOption else std.os.linux.TcpRepairOption;
		pub const tcp_fastopen_client_fail = if (@hasDecl(substitutes, "tcp_fastopen_client_fail")) substitutes.tcp_fastopen_client_fail else std.os.linux.tcp_fastopen_client_fail;
		pub const TCPI_OPT_TIMESTAMPS = if (@hasDecl(substitutes, "TCPI_OPT_TIMESTAMPS")) substitutes.TCPI_OPT_TIMESTAMPS else std.os.linux.TCPI_OPT_TIMESTAMPS;
		pub const TCPI_OPT_SACK = if (@hasDecl(substitutes, "TCPI_OPT_SACK")) substitutes.TCPI_OPT_SACK else std.os.linux.TCPI_OPT_SACK;
		pub const TCPI_OPT_WSCALE = if (@hasDecl(substitutes, "TCPI_OPT_WSCALE")) substitutes.TCPI_OPT_WSCALE else std.os.linux.TCPI_OPT_WSCALE;
		pub const TCPI_OPT_ECN = if (@hasDecl(substitutes, "TCPI_OPT_ECN")) substitutes.TCPI_OPT_ECN else std.os.linux.TCPI_OPT_ECN;
		pub const TCPI_OPT_ECN_SEEN = if (@hasDecl(substitutes, "TCPI_OPT_ECN_SEEN")) substitutes.TCPI_OPT_ECN_SEEN else std.os.linux.TCPI_OPT_ECN_SEEN;
		pub const TCPI_OPT_SYN_DATA = if (@hasDecl(substitutes, "TCPI_OPT_SYN_DATA")) substitutes.TCPI_OPT_SYN_DATA else std.os.linux.TCPI_OPT_SYN_DATA;
		pub const nfds_t = if (@hasDecl(substitutes, "nfds_t")) substitutes.nfds_t else std.os.linux.nfds_t;
		pub const pollfd = if (@hasDecl(substitutes, "pollfd")) substitutes.pollfd else std.os.linux.pollfd;
		pub const POLL = if (@hasDecl(substitutes, "POLL")) substitutes.POLL else std.os.linux.POLL;
		pub const HUGETLB_FLAG_ENCODE_SHIFT = if (@hasDecl(substitutes, "HUGETLB_FLAG_ENCODE_SHIFT")) substitutes.HUGETLB_FLAG_ENCODE_SHIFT else std.os.linux.HUGETLB_FLAG_ENCODE_SHIFT;
		pub const HUGETLB_FLAG_ENCODE_MASK = if (@hasDecl(substitutes, "HUGETLB_FLAG_ENCODE_MASK")) substitutes.HUGETLB_FLAG_ENCODE_MASK else std.os.linux.HUGETLB_FLAG_ENCODE_MASK;
		pub const HUGETLB_FLAG_ENCODE_64KB = if (@hasDecl(substitutes, "HUGETLB_FLAG_ENCODE_64KB")) substitutes.HUGETLB_FLAG_ENCODE_64KB else std.os.linux.HUGETLB_FLAG_ENCODE_64KB;
		pub const HUGETLB_FLAG_ENCODE_512KB = if (@hasDecl(substitutes, "HUGETLB_FLAG_ENCODE_512KB")) substitutes.HUGETLB_FLAG_ENCODE_512KB else std.os.linux.HUGETLB_FLAG_ENCODE_512KB;
		pub const HUGETLB_FLAG_ENCODE_1MB = if (@hasDecl(substitutes, "HUGETLB_FLAG_ENCODE_1MB")) substitutes.HUGETLB_FLAG_ENCODE_1MB else std.os.linux.HUGETLB_FLAG_ENCODE_1MB;
		pub const HUGETLB_FLAG_ENCODE_2MB = if (@hasDecl(substitutes, "HUGETLB_FLAG_ENCODE_2MB")) substitutes.HUGETLB_FLAG_ENCODE_2MB else std.os.linux.HUGETLB_FLAG_ENCODE_2MB;
		pub const HUGETLB_FLAG_ENCODE_8MB = if (@hasDecl(substitutes, "HUGETLB_FLAG_ENCODE_8MB")) substitutes.HUGETLB_FLAG_ENCODE_8MB else std.os.linux.HUGETLB_FLAG_ENCODE_8MB;
		pub const HUGETLB_FLAG_ENCODE_16MB = if (@hasDecl(substitutes, "HUGETLB_FLAG_ENCODE_16MB")) substitutes.HUGETLB_FLAG_ENCODE_16MB else std.os.linux.HUGETLB_FLAG_ENCODE_16MB;
		pub const HUGETLB_FLAG_ENCODE_32MB = if (@hasDecl(substitutes, "HUGETLB_FLAG_ENCODE_32MB")) substitutes.HUGETLB_FLAG_ENCODE_32MB else std.os.linux.HUGETLB_FLAG_ENCODE_32MB;
		pub const HUGETLB_FLAG_ENCODE_256MB = if (@hasDecl(substitutes, "HUGETLB_FLAG_ENCODE_256MB")) substitutes.HUGETLB_FLAG_ENCODE_256MB else std.os.linux.HUGETLB_FLAG_ENCODE_256MB;
		pub const HUGETLB_FLAG_ENCODE_512MB = if (@hasDecl(substitutes, "HUGETLB_FLAG_ENCODE_512MB")) substitutes.HUGETLB_FLAG_ENCODE_512MB else std.os.linux.HUGETLB_FLAG_ENCODE_512MB;
		pub const HUGETLB_FLAG_ENCODE_1GB = if (@hasDecl(substitutes, "HUGETLB_FLAG_ENCODE_1GB")) substitutes.HUGETLB_FLAG_ENCODE_1GB else std.os.linux.HUGETLB_FLAG_ENCODE_1GB;
		pub const HUGETLB_FLAG_ENCODE_2GB = if (@hasDecl(substitutes, "HUGETLB_FLAG_ENCODE_2GB")) substitutes.HUGETLB_FLAG_ENCODE_2GB else std.os.linux.HUGETLB_FLAG_ENCODE_2GB;
		pub const HUGETLB_FLAG_ENCODE_16GB = if (@hasDecl(substitutes, "HUGETLB_FLAG_ENCODE_16GB")) substitutes.HUGETLB_FLAG_ENCODE_16GB else std.os.linux.HUGETLB_FLAG_ENCODE_16GB;
		pub const MFD = if (@hasDecl(substitutes, "MFD")) substitutes.MFD else std.os.linux.MFD;
		pub const rusage = if (@hasDecl(substitutes, "rusage")) substitutes.rusage else std.os.linux.rusage;
		pub const cc_t = if (@hasDecl(substitutes, "cc_t")) substitutes.cc_t else std.os.linux.cc_t;
		pub const speed_t = if (@hasDecl(substitutes, "speed_t")) substitutes.speed_t else std.os.linux.speed_t;
		pub const tcflag_t = if (@hasDecl(substitutes, "tcflag_t")) substitutes.tcflag_t else std.os.linux.tcflag_t;
		pub const NCCS = if (@hasDecl(substitutes, "NCCS")) substitutes.NCCS else std.os.linux.NCCS;
		pub const B0 = if (@hasDecl(substitutes, "B0")) substitutes.B0 else std.os.linux.B0;
		pub const B50 = if (@hasDecl(substitutes, "B50")) substitutes.B50 else std.os.linux.B50;
		pub const B75 = if (@hasDecl(substitutes, "B75")) substitutes.B75 else std.os.linux.B75;
		pub const B110 = if (@hasDecl(substitutes, "B110")) substitutes.B110 else std.os.linux.B110;
		pub const B134 = if (@hasDecl(substitutes, "B134")) substitutes.B134 else std.os.linux.B134;
		pub const B150 = if (@hasDecl(substitutes, "B150")) substitutes.B150 else std.os.linux.B150;
		pub const B200 = if (@hasDecl(substitutes, "B200")) substitutes.B200 else std.os.linux.B200;
		pub const B300 = if (@hasDecl(substitutes, "B300")) substitutes.B300 else std.os.linux.B300;
		pub const B600 = if (@hasDecl(substitutes, "B600")) substitutes.B600 else std.os.linux.B600;
		pub const B1200 = if (@hasDecl(substitutes, "B1200")) substitutes.B1200 else std.os.linux.B1200;
		pub const B1800 = if (@hasDecl(substitutes, "B1800")) substitutes.B1800 else std.os.linux.B1800;
		pub const B2400 = if (@hasDecl(substitutes, "B2400")) substitutes.B2400 else std.os.linux.B2400;
		pub const B4800 = if (@hasDecl(substitutes, "B4800")) substitutes.B4800 else std.os.linux.B4800;
		pub const B9600 = if (@hasDecl(substitutes, "B9600")) substitutes.B9600 else std.os.linux.B9600;
		pub const B19200 = if (@hasDecl(substitutes, "B19200")) substitutes.B19200 else std.os.linux.B19200;
		pub const B38400 = if (@hasDecl(substitutes, "B38400")) substitutes.B38400 else std.os.linux.B38400;
		pub const BOTHER = if (@hasDecl(substitutes, "BOTHER")) substitutes.BOTHER else std.os.linux.BOTHER;
		pub const B57600 = if (@hasDecl(substitutes, "B57600")) substitutes.B57600 else std.os.linux.B57600;
		pub const B115200 = if (@hasDecl(substitutes, "B115200")) substitutes.B115200 else std.os.linux.B115200;
		pub const B230400 = if (@hasDecl(substitutes, "B230400")) substitutes.B230400 else std.os.linux.B230400;
		pub const B460800 = if (@hasDecl(substitutes, "B460800")) substitutes.B460800 else std.os.linux.B460800;
		pub const B500000 = if (@hasDecl(substitutes, "B500000")) substitutes.B500000 else std.os.linux.B500000;
		pub const B576000 = if (@hasDecl(substitutes, "B576000")) substitutes.B576000 else std.os.linux.B576000;
		pub const B921600 = if (@hasDecl(substitutes, "B921600")) substitutes.B921600 else std.os.linux.B921600;
		pub const B1000000 = if (@hasDecl(substitutes, "B1000000")) substitutes.B1000000 else std.os.linux.B1000000;
		pub const B1152000 = if (@hasDecl(substitutes, "B1152000")) substitutes.B1152000 else std.os.linux.B1152000;
		pub const B1500000 = if (@hasDecl(substitutes, "B1500000")) substitutes.B1500000 else std.os.linux.B1500000;
		pub const B2000000 = if (@hasDecl(substitutes, "B2000000")) substitutes.B2000000 else std.os.linux.B2000000;
		pub const B2500000 = if (@hasDecl(substitutes, "B2500000")) substitutes.B2500000 else std.os.linux.B2500000;
		pub const B3000000 = if (@hasDecl(substitutes, "B3000000")) substitutes.B3000000 else std.os.linux.B3000000;
		pub const B3500000 = if (@hasDecl(substitutes, "B3500000")) substitutes.B3500000 else std.os.linux.B3500000;
		pub const B4000000 = if (@hasDecl(substitutes, "B4000000")) substitutes.B4000000 else std.os.linux.B4000000;
		pub const V = if (@hasDecl(substitutes, "V")) substitutes.V else std.os.linux.V;
		pub const IGNBRK = if (@hasDecl(substitutes, "IGNBRK")) substitutes.IGNBRK else std.os.linux.IGNBRK;
		pub const BRKINT = if (@hasDecl(substitutes, "BRKINT")) substitutes.BRKINT else std.os.linux.BRKINT;
		pub const IGNPAR = if (@hasDecl(substitutes, "IGNPAR")) substitutes.IGNPAR else std.os.linux.IGNPAR;
		pub const PARMRK = if (@hasDecl(substitutes, "PARMRK")) substitutes.PARMRK else std.os.linux.PARMRK;
		pub const INPCK = if (@hasDecl(substitutes, "INPCK")) substitutes.INPCK else std.os.linux.INPCK;
		pub const ISTRIP = if (@hasDecl(substitutes, "ISTRIP")) substitutes.ISTRIP else std.os.linux.ISTRIP;
		pub const INLCR = if (@hasDecl(substitutes, "INLCR")) substitutes.INLCR else std.os.linux.INLCR;
		pub const IGNCR = if (@hasDecl(substitutes, "IGNCR")) substitutes.IGNCR else std.os.linux.IGNCR;
		pub const ICRNL = if (@hasDecl(substitutes, "ICRNL")) substitutes.ICRNL else std.os.linux.ICRNL;
		pub const IUCLC = if (@hasDecl(substitutes, "IUCLC")) substitutes.IUCLC else std.os.linux.IUCLC;
		pub const IXON = if (@hasDecl(substitutes, "IXON")) substitutes.IXON else std.os.linux.IXON;
		pub const IXANY = if (@hasDecl(substitutes, "IXANY")) substitutes.IXANY else std.os.linux.IXANY;
		pub const IXOFF = if (@hasDecl(substitutes, "IXOFF")) substitutes.IXOFF else std.os.linux.IXOFF;
		pub const IMAXBEL = if (@hasDecl(substitutes, "IMAXBEL")) substitutes.IMAXBEL else std.os.linux.IMAXBEL;
		pub const IUTF8 = if (@hasDecl(substitutes, "IUTF8")) substitutes.IUTF8 else std.os.linux.IUTF8;
		pub const OPOST = if (@hasDecl(substitutes, "OPOST")) substitutes.OPOST else std.os.linux.OPOST;
		pub const OLCUC = if (@hasDecl(substitutes, "OLCUC")) substitutes.OLCUC else std.os.linux.OLCUC;
		pub const ONLCR = if (@hasDecl(substitutes, "ONLCR")) substitutes.ONLCR else std.os.linux.ONLCR;
		pub const OCRNL = if (@hasDecl(substitutes, "OCRNL")) substitutes.OCRNL else std.os.linux.OCRNL;
		pub const ONOCR = if (@hasDecl(substitutes, "ONOCR")) substitutes.ONOCR else std.os.linux.ONOCR;
		pub const ONLRET = if (@hasDecl(substitutes, "ONLRET")) substitutes.ONLRET else std.os.linux.ONLRET;
		pub const OFILL = if (@hasDecl(substitutes, "OFILL")) substitutes.OFILL else std.os.linux.OFILL;
		pub const OFDEL = if (@hasDecl(substitutes, "OFDEL")) substitutes.OFDEL else std.os.linux.OFDEL;
		pub const VTDLY = if (@hasDecl(substitutes, "VTDLY")) substitutes.VTDLY else std.os.linux.VTDLY;
		pub const VT0 = if (@hasDecl(substitutes, "VT0")) substitutes.VT0 else std.os.linux.VT0;
		pub const VT1 = if (@hasDecl(substitutes, "VT1")) substitutes.VT1 else std.os.linux.VT1;
		pub const CSIZE = if (@hasDecl(substitutes, "CSIZE")) substitutes.CSIZE else std.os.linux.CSIZE;
		pub const CS5 = if (@hasDecl(substitutes, "CS5")) substitutes.CS5 else std.os.linux.CS5;
		pub const CS6 = if (@hasDecl(substitutes, "CS6")) substitutes.CS6 else std.os.linux.CS6;
		pub const CS7 = if (@hasDecl(substitutes, "CS7")) substitutes.CS7 else std.os.linux.CS7;
		pub const CS8 = if (@hasDecl(substitutes, "CS8")) substitutes.CS8 else std.os.linux.CS8;
		pub const CSTOPB = if (@hasDecl(substitutes, "CSTOPB")) substitutes.CSTOPB else std.os.linux.CSTOPB;
		pub const CREAD = if (@hasDecl(substitutes, "CREAD")) substitutes.CREAD else std.os.linux.CREAD;
		pub const PARENB = if (@hasDecl(substitutes, "PARENB")) substitutes.PARENB else std.os.linux.PARENB;
		pub const PARODD = if (@hasDecl(substitutes, "PARODD")) substitutes.PARODD else std.os.linux.PARODD;
		pub const HUPCL = if (@hasDecl(substitutes, "HUPCL")) substitutes.HUPCL else std.os.linux.HUPCL;
		pub const CLOCAL = if (@hasDecl(substitutes, "CLOCAL")) substitutes.CLOCAL else std.os.linux.CLOCAL;
		pub const ISIG = if (@hasDecl(substitutes, "ISIG")) substitutes.ISIG else std.os.linux.ISIG;
		pub const ICANON = if (@hasDecl(substitutes, "ICANON")) substitutes.ICANON else std.os.linux.ICANON;
		pub const ECHO = if (@hasDecl(substitutes, "ECHO")) substitutes.ECHO else std.os.linux.ECHO;
		pub const ECHOE = if (@hasDecl(substitutes, "ECHOE")) substitutes.ECHOE else std.os.linux.ECHOE;
		pub const ECHOK = if (@hasDecl(substitutes, "ECHOK")) substitutes.ECHOK else std.os.linux.ECHOK;
		pub const ECHONL = if (@hasDecl(substitutes, "ECHONL")) substitutes.ECHONL else std.os.linux.ECHONL;
		pub const NOFLSH = if (@hasDecl(substitutes, "NOFLSH")) substitutes.NOFLSH else std.os.linux.NOFLSH;
		pub const TOSTOP = if (@hasDecl(substitutes, "TOSTOP")) substitutes.TOSTOP else std.os.linux.TOSTOP;
		pub const IEXTEN = if (@hasDecl(substitutes, "IEXTEN")) substitutes.IEXTEN else std.os.linux.IEXTEN;
		pub const TCSA = if (@hasDecl(substitutes, "TCSA")) substitutes.TCSA else std.os.linux.TCSA;
		pub const termios = if (@hasDecl(substitutes, "termios")) substitutes.termios else std.os.linux.termios;
		pub const SIOCGIFINDEX = if (@hasDecl(substitutes, "SIOCGIFINDEX")) substitutes.SIOCGIFINDEX else std.os.linux.SIOCGIFINDEX;
		pub const IFNAMESIZE = if (@hasDecl(substitutes, "IFNAMESIZE")) substitutes.IFNAMESIZE else std.os.linux.IFNAMESIZE;
		pub const ifmap = if (@hasDecl(substitutes, "ifmap")) substitutes.ifmap else std.os.linux.ifmap;
		pub const ifreq = if (@hasDecl(substitutes, "ifreq")) substitutes.ifreq else std.os.linux.ifreq;
		pub const rlimit_resource = if (@hasDecl(substitutes, "rlimit_resource")) substitutes.rlimit_resource else std.os.linux.rlimit_resource;
		pub const rlim_t = if (@hasDecl(substitutes, "rlim_t")) substitutes.rlim_t else std.os.linux.rlim_t;
		pub const RLIM = if (@hasDecl(substitutes, "RLIM")) substitutes.RLIM else std.os.linux.RLIM;
		pub const rlimit = if (@hasDecl(substitutes, "rlimit")) substitutes.rlimit else std.os.linux.rlimit;
		pub const MADV = if (@hasDecl(substitutes, "MADV")) substitutes.MADV else std.os.linux.MADV;
		pub const POSIX_FADV = if (@hasDecl(substitutes, "POSIX_FADV")) substitutes.POSIX_FADV else std.os.linux.POSIX_FADV;
		pub const kernel_timespec = if (@hasDecl(substitutes, "kernel_timespec")) substitutes.kernel_timespec else std.os.linux.kernel_timespec;
		pub const timespec = if (@hasDecl(substitutes, "timespec")) substitutes.timespec else std.os.linux.timespec;
		pub const XDP = if (@hasDecl(substitutes, "XDP")) substitutes.XDP else std.os.linux.XDP;
		pub const xdp_ring_offset = if (@hasDecl(substitutes, "xdp_ring_offset")) substitutes.xdp_ring_offset else std.os.linux.xdp_ring_offset;
		pub const xdp_mmap_offsets = if (@hasDecl(substitutes, "xdp_mmap_offsets")) substitutes.xdp_mmap_offsets else std.os.linux.xdp_mmap_offsets;
		pub const xdp_umem_reg = if (@hasDecl(substitutes, "xdp_umem_reg")) substitutes.xdp_umem_reg else std.os.linux.xdp_umem_reg;
		pub const xdp_statistics = if (@hasDecl(substitutes, "xdp_statistics")) substitutes.xdp_statistics else std.os.linux.xdp_statistics;
		pub const xdp_options = if (@hasDecl(substitutes, "xdp_options")) substitutes.xdp_options else std.os.linux.xdp_options;
		pub const XSK_UNALIGNED_BUF_OFFSET_SHIFT = if (@hasDecl(substitutes, "XSK_UNALIGNED_BUF_OFFSET_SHIFT")) substitutes.XSK_UNALIGNED_BUF_OFFSET_SHIFT else std.os.linux.XSK_UNALIGNED_BUF_OFFSET_SHIFT;
		pub const XSK_UNALIGNED_BUF_ADDR_MASK = if (@hasDecl(substitutes, "XSK_UNALIGNED_BUF_ADDR_MASK")) substitutes.XSK_UNALIGNED_BUF_ADDR_MASK else std.os.linux.XSK_UNALIGNED_BUF_ADDR_MASK;
		pub const xdp_desc = if (@hasDecl(substitutes, "xdp_desc")) substitutes.xdp_desc else std.os.linux.xdp_desc;
		pub const SECUREBITS_DEFAULT = if (@hasDecl(substitutes, "SECUREBITS_DEFAULT")) substitutes.SECUREBITS_DEFAULT else std.os.linux.SECUREBITS_DEFAULT;
		pub const SECURE_NOROOT = if (@hasDecl(substitutes, "SECURE_NOROOT")) substitutes.SECURE_NOROOT else std.os.linux.SECURE_NOROOT;
		pub const SECURE_NOROOT_LOCKED = if (@hasDecl(substitutes, "SECURE_NOROOT_LOCKED")) substitutes.SECURE_NOROOT_LOCKED else std.os.linux.SECURE_NOROOT_LOCKED;
		pub const SECBIT_NOROOT = if (@hasDecl(substitutes, "SECBIT_NOROOT")) substitutes.SECBIT_NOROOT else std.os.linux.SECBIT_NOROOT;
		pub const SECBIT_NOROOT_LOCKED = if (@hasDecl(substitutes, "SECBIT_NOROOT_LOCKED")) substitutes.SECBIT_NOROOT_LOCKED else std.os.linux.SECBIT_NOROOT_LOCKED;
		pub const SECURE_NO_SETUID_FIXUP = if (@hasDecl(substitutes, "SECURE_NO_SETUID_FIXUP")) substitutes.SECURE_NO_SETUID_FIXUP else std.os.linux.SECURE_NO_SETUID_FIXUP;
		pub const SECURE_NO_SETUID_FIXUP_LOCKED = if (@hasDecl(substitutes, "SECURE_NO_SETUID_FIXUP_LOCKED")) substitutes.SECURE_NO_SETUID_FIXUP_LOCKED else std.os.linux.SECURE_NO_SETUID_FIXUP_LOCKED;
		pub const SECBIT_NO_SETUID_FIXUP = if (@hasDecl(substitutes, "SECBIT_NO_SETUID_FIXUP")) substitutes.SECBIT_NO_SETUID_FIXUP else std.os.linux.SECBIT_NO_SETUID_FIXUP;
		pub const SECBIT_NO_SETUID_FIXUP_LOCKED = if (@hasDecl(substitutes, "SECBIT_NO_SETUID_FIXUP_LOCKED")) substitutes.SECBIT_NO_SETUID_FIXUP_LOCKED else std.os.linux.SECBIT_NO_SETUID_FIXUP_LOCKED;
		pub const SECURE_KEEP_CAPS = if (@hasDecl(substitutes, "SECURE_KEEP_CAPS")) substitutes.SECURE_KEEP_CAPS else std.os.linux.SECURE_KEEP_CAPS;
		pub const SECURE_KEEP_CAPS_LOCKED = if (@hasDecl(substitutes, "SECURE_KEEP_CAPS_LOCKED")) substitutes.SECURE_KEEP_CAPS_LOCKED else std.os.linux.SECURE_KEEP_CAPS_LOCKED;
		pub const SECBIT_KEEP_CAPS = if (@hasDecl(substitutes, "SECBIT_KEEP_CAPS")) substitutes.SECBIT_KEEP_CAPS else std.os.linux.SECBIT_KEEP_CAPS;
		pub const SECBIT_KEEP_CAPS_LOCKED = if (@hasDecl(substitutes, "SECBIT_KEEP_CAPS_LOCKED")) substitutes.SECBIT_KEEP_CAPS_LOCKED else std.os.linux.SECBIT_KEEP_CAPS_LOCKED;
		pub const SECURE_NO_CAP_AMBIENT_RAISE = if (@hasDecl(substitutes, "SECURE_NO_CAP_AMBIENT_RAISE")) substitutes.SECURE_NO_CAP_AMBIENT_RAISE else std.os.linux.SECURE_NO_CAP_AMBIENT_RAISE;
		pub const SECURE_NO_CAP_AMBIENT_RAISE_LOCKED = if (@hasDecl(substitutes, "SECURE_NO_CAP_AMBIENT_RAISE_LOCKED")) substitutes.SECURE_NO_CAP_AMBIENT_RAISE_LOCKED else std.os.linux.SECURE_NO_CAP_AMBIENT_RAISE_LOCKED;
		pub const SECBIT_NO_CAP_AMBIENT_RAISE = if (@hasDecl(substitutes, "SECBIT_NO_CAP_AMBIENT_RAISE")) substitutes.SECBIT_NO_CAP_AMBIENT_RAISE else std.os.linux.SECBIT_NO_CAP_AMBIENT_RAISE;
		pub const SECBIT_NO_CAP_AMBIENT_RAISE_LOCKED = if (@hasDecl(substitutes, "SECBIT_NO_CAP_AMBIENT_RAISE_LOCKED")) substitutes.SECBIT_NO_CAP_AMBIENT_RAISE_LOCKED else std.os.linux.SECBIT_NO_CAP_AMBIENT_RAISE_LOCKED;
		pub const SECURE_ALL_BITS = if (@hasDecl(substitutes, "SECURE_ALL_BITS")) substitutes.SECURE_ALL_BITS else std.os.linux.SECURE_ALL_BITS;
		pub const SECURE_ALL_LOCKS = if (@hasDecl(substitutes, "SECURE_ALL_LOCKS")) substitutes.SECURE_ALL_LOCKS else std.os.linux.SECURE_ALL_LOCKS;
		pub const PR = if (@hasDecl(substitutes, "PR")) substitutes.PR else std.os.linux.PR;
		pub const prctl_mm_map = if (@hasDecl(substitutes, "prctl_mm_map")) substitutes.prctl_mm_map else std.os.linux.prctl_mm_map;
		pub const NETLINK = if (@hasDecl(substitutes, "NETLINK")) substitutes.NETLINK else std.os.linux.NETLINK;
		pub const NLM_F_REQUEST = if (@hasDecl(substitutes, "NLM_F_REQUEST")) substitutes.NLM_F_REQUEST else std.os.linux.NLM_F_REQUEST;
		pub const NLM_F_MULTI = if (@hasDecl(substitutes, "NLM_F_MULTI")) substitutes.NLM_F_MULTI else std.os.linux.NLM_F_MULTI;
		pub const NLM_F_ACK = if (@hasDecl(substitutes, "NLM_F_ACK")) substitutes.NLM_F_ACK else std.os.linux.NLM_F_ACK;
		pub const NLM_F_ECHO = if (@hasDecl(substitutes, "NLM_F_ECHO")) substitutes.NLM_F_ECHO else std.os.linux.NLM_F_ECHO;
		pub const NLM_F_DUMP_INTR = if (@hasDecl(substitutes, "NLM_F_DUMP_INTR")) substitutes.NLM_F_DUMP_INTR else std.os.linux.NLM_F_DUMP_INTR;
		pub const NLM_F_DUMP_FILTERED = if (@hasDecl(substitutes, "NLM_F_DUMP_FILTERED")) substitutes.NLM_F_DUMP_FILTERED else std.os.linux.NLM_F_DUMP_FILTERED;
		pub const NLM_F_ROOT = if (@hasDecl(substitutes, "NLM_F_ROOT")) substitutes.NLM_F_ROOT else std.os.linux.NLM_F_ROOT;
		pub const NLM_F_MATCH = if (@hasDecl(substitutes, "NLM_F_MATCH")) substitutes.NLM_F_MATCH else std.os.linux.NLM_F_MATCH;
		pub const NLM_F_ATOMIC = if (@hasDecl(substitutes, "NLM_F_ATOMIC")) substitutes.NLM_F_ATOMIC else std.os.linux.NLM_F_ATOMIC;
		pub const NLM_F_DUMP = if (@hasDecl(substitutes, "NLM_F_DUMP")) substitutes.NLM_F_DUMP else std.os.linux.NLM_F_DUMP;
		pub const NLM_F_REPLACE = if (@hasDecl(substitutes, "NLM_F_REPLACE")) substitutes.NLM_F_REPLACE else std.os.linux.NLM_F_REPLACE;
		pub const NLM_F_EXCL = if (@hasDecl(substitutes, "NLM_F_EXCL")) substitutes.NLM_F_EXCL else std.os.linux.NLM_F_EXCL;
		pub const NLM_F_CREATE = if (@hasDecl(substitutes, "NLM_F_CREATE")) substitutes.NLM_F_CREATE else std.os.linux.NLM_F_CREATE;
		pub const NLM_F_APPEND = if (@hasDecl(substitutes, "NLM_F_APPEND")) substitutes.NLM_F_APPEND else std.os.linux.NLM_F_APPEND;
		pub const NLM_F_NONREC = if (@hasDecl(substitutes, "NLM_F_NONREC")) substitutes.NLM_F_NONREC else std.os.linux.NLM_F_NONREC;
		pub const NLM_F_CAPPED = if (@hasDecl(substitutes, "NLM_F_CAPPED")) substitutes.NLM_F_CAPPED else std.os.linux.NLM_F_CAPPED;
		pub const NLM_F_ACK_TLVS = if (@hasDecl(substitutes, "NLM_F_ACK_TLVS")) substitutes.NLM_F_ACK_TLVS else std.os.linux.NLM_F_ACK_TLVS;
		pub const NetlinkMessageType = if (@hasDecl(substitutes, "NetlinkMessageType")) substitutes.NetlinkMessageType else std.os.linux.NetlinkMessageType;
		pub const nlmsghdr = if (@hasDecl(substitutes, "nlmsghdr")) substitutes.nlmsghdr else std.os.linux.nlmsghdr;
		pub const ifinfomsg = if (@hasDecl(substitutes, "ifinfomsg")) substitutes.ifinfomsg else std.os.linux.ifinfomsg;
		pub const rtattr = if (@hasDecl(substitutes, "rtattr")) substitutes.rtattr else std.os.linux.rtattr;
		pub const IFLA = if (@hasDecl(substitutes, "IFLA")) substitutes.IFLA else std.os.linux.IFLA;
		pub const rtnl_link_ifmap = if (@hasDecl(substitutes, "rtnl_link_ifmap")) substitutes.rtnl_link_ifmap else std.os.linux.rtnl_link_ifmap;
		pub const rtnl_link_stats = if (@hasDecl(substitutes, "rtnl_link_stats")) substitutes.rtnl_link_stats else std.os.linux.rtnl_link_stats;
		pub const rtnl_link_stats64 = if (@hasDecl(substitutes, "rtnl_link_stats64")) substitutes.rtnl_link_stats64 else std.os.linux.rtnl_link_stats64;
		pub const perf_event_attr = if (@hasDecl(substitutes, "perf_event_attr")) substitutes.perf_event_attr else std.os.linux.perf_event_attr;
		pub const PERF = if (@hasDecl(substitutes, "PERF")) substitutes.PERF else std.os.linux.PERF;
		pub const AUDIT = if (@hasDecl(substitutes, "AUDIT")) substitutes.AUDIT else std.os.linux.AUDIT;
		pub const PTRACE = if (@hasDecl(substitutes, "PTRACE")) substitutes.PTRACE else std.os.linux.PTRACE;
	};
}
