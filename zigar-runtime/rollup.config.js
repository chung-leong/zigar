import Replace from '@rollup/plugin-replace';

import { readdirSync, writeFileSync } from 'fs';
import { basename, dirname, join, sep } from 'path';

const replacements1 = {
  'process.env.DEV': 'false',
  'process.env.TARGET': '"wasm"',
  'process.env.BITS': '"32"',
  'process.env.MIXIN': '""',
  'process.env.COMPAT': '""',
};
const replacements2 = {
  '...(undefined),': '',
  '/* c8 ignore start */': '',
  '/* c8 ignore end */': '',
  '/* c8 ignore next */': '',
};

const config = [];
const mixins = {};

function camelize(s) {
  return s.replace(/\-./g, m => m.slice(1).toUpperCase())
          .replace(/^./, m => m.toUpperCase());
}

for (const subpath of readdirSync('./src', { recursive: true })) {
  const filename = basename(subpath);
  const folder = dirname(subpath);
  if (/\.js$/.test(filename)) {
    if (folder !== '.') {
      const folderSingular = folder.endsWith('s') ? folder.slice(0, -1) : folder;
      const prefix = camelize(folderSingular);
      const name = prefix + camelize(filename.slice(0, -3));
      mixins[name] = `./${subpath.split(sep).join('/')}`;
    }
    config.push({
      input: join('./src', subpath),
      output: {
        file: join('./dist', subpath),
        format: 'esm',
      },
      plugins: [
        Replace({
          preventAssignment: true,
          values: replacements1,
        }),
        Replace({
          preventAssignment: false,
          values: replacements2,
          delimiters: [ ' *', '\\n*' ],
        }),
      ],
      external: path => true,
    });
    if (filename === `worker-support.js`) {
      config.push({
        input: join('./src', subpath),
        output: {
          file: join('./dist', subpath.replace('.js', '-compat.js')),
          format: 'esm',
        },
        plugins: [
          Replace({
            preventAssignment: true,
            values: {
              ...replacements1,
              'process.env.COMPAT': '"node"',
            },
          }),
          Replace({
            preventAssignment: false,
            values: replacements2,
            delimiters: [ ' *', '\\n*' ],
          }),
          ],
        external: path => true,
      });
    }
  }
}

const lines = [ '// generated by rollup.config.js' ];
for (const [ name, path ] of Object.entries(mixins)) {
  lines.push(`export { default as ${name} } from '${path}';`);
}
writeFileSync('./src/mixins.js', lines.filter(s => !forWebAssembly(s)).join('\n') + '\n');
writeFileSync('./src/mixins-wasi.js', lines.join('\n') + '\n');

function forWebAssembly(line) {
  return line.includes('/wasi/') || line.includes('worker-support.js');
}

export default config;
